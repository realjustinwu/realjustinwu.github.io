{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/favicon_1.ico","path":"favicon_1.ico","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/Sync-Profile-with-Gradle-File.png","path":"images/Sync-Profile-with-Gradle-File.png","modified":0,"renderable":0},{"_id":"source/images/active-android-state-flow.png","path":"images/active-android-state-flow.png","modified":0,"renderable":0},{"_id":"source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":0},{"_id":"source/images/intelligent_bed_design.png","path":"images/intelligent_bed_design.png","modified":0,"renderable":0},{"_id":"source/images/testimage.gif","path":"images/testimage.gif","modified":0,"renderable":0},{"_id":"source/images/jupyter.png","path":"images/jupyter.png","modified":0,"renderable":0},{"_id":"source/images/my_alipay.png","path":"images/my_alipay.png","modified":0,"renderable":0},{"_id":"source/images/my_wechat_pay.png","path":"images/my_wechat_pay.png","modified":0,"renderable":0},{"_id":"source/images/intelligent_bed.gif","path":"images/intelligent_bed.gif","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"source/images/inklet-snapshot.png","path":"images/inklet-snapshot.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"source/images/jump-jump.mp4","path":"images/jump-jump.mp4","modified":0,"renderable":0},{"_id":"themes/next/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/android-chrome-192x192.png","path":"images/android-chrome-192x192.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/my_alipay.png","path":"images/my_alipay.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/my_wechat_pay.png","path":"images/my_wechat_pay.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1579275313629},{"_id":"source/favicon_1.ico","hash":"a5eef031b1d087aa9b556fc7ca28a955c53cba46","modified":1548199219894},{"_id":"source/favicon.ico","hash":"5654bc458d5c89dfce70f54550522544485555be","modified":1548199219894},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1579275313629},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1579275313630},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1579275313640},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1579275313640},{"_id":"themes/next/_config.yml","hash":"faf3434f8b2d5529fcb07cc18b992953de2d7efc","modified":1579343285677},{"_id":"themes/next/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1579275313641},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1579275313640},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1579275313643},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1579275313641},{"_id":"themes/next/package.json","hash":"19dda7fab09594faba989669e29de88c4289877f","modified":1579275313717},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1579275313654},{"_id":"source/_posts/AsyncQueryHandler-源码学习.md","hash":"d36b6ae8e01b40e8bb623fe776444163707d3a9f","modified":1551970879675},{"_id":"source/_posts/Android_自定义_View——智能床垫.md","hash":"a90d1bd465b33b592d01adee46bbae18eea2e333","modified":1551970879728},{"_id":"source/_posts/ActiveAndroid-源码学习.md","hash":"daf7a6c55706b1efbb3bbed7b70450871095fc5e","modified":1551970879708},{"_id":"source/_posts/Accessibility_源码解析.md","hash":"7877f46391e9195157b90ebc6375a18e67dc22d6","modified":1551970879739},{"_id":"source/_posts/Android_Jetpack_Navigation.md","hash":"2ae8eecb067c435cefe91cc8bcd3925d578a7107","modified":1579345680568},{"_id":"source/_posts/CMake-构建动态库没有生成so文件.md","hash":"952c27659d8ca56474da61f5d694dafb45833c91","modified":1551970879677},{"_id":"source/_posts/Codeforces_516_dev2_C.md","hash":"90cbf0162bf3465287bb1e3941ec3188ada5f459","modified":1551970879822},{"_id":"source/_posts/Codeforces_516_dev2_D.md","hash":"b23c77855e76ec6f3ed5c75c364e40a44a287444","modified":1551970879813},{"_id":"source/_posts/Codeforces_516_dev2_A.md","hash":"9b316b14cbcfff11f96a1df560039ce330c44aa7","modified":1551970879816},{"_id":"source/_posts/Codeforces_516_dev2_B.md","hash":"c8b39b5b6a7be463a6e5ef525ef36d53621b7b89","modified":1551970879818},{"_id":"source/_posts/Codeforces_516_dev2_E.md","hash":"c1577aa2b8d35b6813fed1598069f1ca902e7ea3","modified":1551970879815},{"_id":"source/_posts/CopyOnWrite_容器.md","hash":"ddffd14103d78b8f858596543aef587b4636e8ae","modified":1551970879671},{"_id":"source/_posts/Gitbook-plugin-plantuml_优化.md","hash":"cc20c213d41ec58116ed487429217492e591c02c","modified":1551970879835},{"_id":"source/_posts/Inklet-去广告.md","hash":"aed9c82196719a099086841d3fcf2d0c3936396e","modified":1551970879799},{"_id":"source/_posts/IntentService-源码解析.md","hash":"cd7e31c74a5bfa5ca62696d65307884f8f9dce2e","modified":1551970879669},{"_id":"source/_posts/Hexo-图片上传踩坑.md","hash":"73f52a5c8f89df3de6d210200466c1580a97026f","modified":1551970879840},{"_id":"source/_posts/Mac_鼠标手势.md","hash":"2b07adfb3d770420e1faad4d87416dd39a883147","modified":1551970879784},{"_id":"source/_posts/Stetho-自定义-databases-目录.md","hash":"dfd75d89b6cfa92743d01cd861e8d1799e60b2a2","modified":1551970879715},{"_id":"source/_posts/StrictMode_打印_log_到文件.md","hash":"f71e005a50fed4d47fe1841baec19fea740d18a6","modified":1551970879667},{"_id":"source/_posts/Sublime-Text-3-编译并运行-Kotlin.md","hash":"010919442d64e617e1723f32b6eac32f9a27bdc7","modified":1579345680599},{"_id":"source/_posts/wordpress需要访问您网页服务器的权限.md","hash":"95c305289481a55f1e834dc406d32c4474f4a80b","modified":1551970879838},{"_id":"source/_posts/Unexpected_error_while_obtaining_UI_hierarchy.md","hash":"9529cd176ef87a0b8a2cfe5f87ecd2805f77a66e","modified":1551970879679},{"_id":"source/_posts/Talkback_源码解析.md","hash":"6528bd454870e8cd97baa79db4a809c9f59a4f17","modified":1551970879733},{"_id":"source/_posts/gradle_编译和运行_Java_程序.md","hash":"6df4b5cacaafbb95dd7631583b6137562a9849a6","modified":1579345680611},{"_id":"source/_posts/使用_Docker_搭建_Jupyter_环境.md","hash":"8663e47ab80e5429b3e981f7916d49f137d030b5","modified":1551970879755},{"_id":"source/_posts/博客优化.md","hash":"4a55b93f83dda0052c22cb26c4eb2411944cd6cb","modified":1551970879782},{"_id":"source/_posts/依赖包不更新的_bug.md","hash":"512689acb6c506f0214d4610e3b9abc1e35f8a78","modified":1551970879681},{"_id":"source/_posts/博客搭建.md","hash":"a9312c46acc658bf71ec8e63624d9e967c75a667","modified":1579345680608},{"_id":"source/_posts/建立自己的_Accessibility_Service.md","hash":"8b4a61cc114616f9d880803493b9f03971f88103","modified":1551970879735},{"_id":"source/_posts/搭建-Android-Framework-源码阅读环境.md","hash":"d9904936852764d482da9c375abc450587a31aa9","modified":1579345680610},{"_id":"source/_posts/树莓派3_安装_AndroidThings.md","hash":"6baad976163aac7eb38e2b901fea966ccea4b9c5","modified":1551970879790},{"_id":"source/_posts/树莓派3_安装_Raspbian_镜像.md","hash":"541abbdfc8ce8d06a678c1c530823d7036e53e1a","modified":1551970879791},{"_id":"source/_posts/让_APP_具有辅助功能.md","hash":"2a6d1c179f3cc89f7e03249103be062a83713833","modified":1551970879738},{"_id":"source/_posts/跳一跳.md","hash":"0e1d9c899025eb20371363df01c36cd3077a4b02","modified":1551970879776},{"_id":"source/categories/index.md","hash":"2dfba40193d2a118712c3e5653c4f0d240281d40","modified":1548199219894},{"_id":"source/about/index.md","hash":"29909d7217edef1932c1f40dca59dcd6b6875449","modified":1548199219893},{"_id":"source/images/Sync-Profile-with-Gradle-File.png","hash":"2a0d4eed03bccf1893f74e8ab5d0fc4ec9702d3f","modified":1551970879681},{"_id":"source/images/active-android-state-flow.png","hash":"be06c343f70ac97f273de10f5c11d2869d939409","modified":1551970879708},{"_id":"source/images/avatar.gif","hash":"84f6ae62d362e383b26794ec9f191bf74152445f","modified":1548199219897},{"_id":"source/images/intelligent_bed_design.png","hash":"57e1e0ed73da30f317fae3c72e6bd38894f3b8d0","modified":1551970879728},{"_id":"source/images/testimage.gif","hash":"84f6ae62d362e383b26794ec9f191bf74152445f","modified":1551970879840},{"_id":"source/tags/index.md","hash":"ef7d88cb846540b154731d99c05f743b6f8e5350","modified":1548199219914},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1579275313607},{"_id":"themes/next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1579275313612},{"_id":"themes/next/.git/index","hash":"89e4933780e53a646ed17d7f6c9e0fdbd5553584","modified":1579275313838},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1579275306888},{"_id":"themes/next/.git/packed-refs","hash":"d63af1bfeb9e4c185c7ed55c6803f4a6dd8df0a5","modified":1579275313598},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1579275313631},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ef63f34bd3b6bd4d7304d48ce5e0e3e2bead385","modified":1579275313632},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"715dcf9b0429a4a4c7107d6d1d00a34e4cf9aa99","modified":1579275313635},{"_id":"themes/next/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1579275313636},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1579275313637},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1579275313637},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1579275313638},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1579275313638},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1579275313639},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1579275313639},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1579275313640},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1579275313643},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1579275313644},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1579275313644},{"_id":"themes/next/docs/DATA-FILES.md","hash":"40a8089076005e0d26ef7c0db58a2b5b464cda6c","modified":1579275313645},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1579275313645},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1579275313645},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1579275313646},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1579275313646},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1579275313647},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1579275313726},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1579275313659},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1579275313709},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1579275313708},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1579275313708},{"_id":"themes/next/languages/en.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1579275313655},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1579275313716},{"_id":"themes/next/languages/default.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1579275313655},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1579275313716},{"_id":"themes/next/languages/fa.yml","hash":"35468531ad0236df5b188f28bd1b4bb0c0537faf","modified":1579275313655},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1579275313716},{"_id":"themes/next/languages/de.yml","hash":"285b294b1dd2ce49b0694beb4fd75ed05dc20ccb","modified":1579275313654},{"_id":"themes/next/languages/es.yml","hash":"3bd0977225a9b9dc3cdc856161b3a77e5993ac4a","modified":1579275313655},{"_id":"themes/next/languages/fr.yml","hash":"5fe560d14824c71ea90b2a76d0c17b2332b9d08a","modified":1579275313655},{"_id":"themes/next/languages/id.yml","hash":"80c3db4c2dbbea0703f6c8f1191218f692899507","modified":1579275313655},{"_id":"themes/next/languages/hu.yml","hash":"dd9e4cd2873ed9a9ae7cb89962eeff911de396b4","modified":1579275313655},{"_id":"themes/next/languages/it.yml","hash":"68ac5a0aa361210f51915e101c842ed1c9464889","modified":1579275313656},{"_id":"themes/next/languages/nl.yml","hash":"4d9b09aff03648cbbbfeb0c51a2d1214320b5ec6","modified":1579275313656},{"_id":"themes/next/languages/ko.yml","hash":"14a162509dc71bb364335c20281d3bccbd2a51f3","modified":1579275313656},{"_id":"themes/next/languages/ja.yml","hash":"e61529ddf80426a5362ed07642216027615bd740","modified":1579275313656},{"_id":"themes/next/languages/pt-BR.yml","hash":"024dcdeb30c93e57cd1ba4cd707f8988dcad2468","modified":1579275313656},{"_id":"themes/next/languages/pt.yml","hash":"88fb58e537a949c013a2adcdaebcbe09543c0bd2","modified":1579275313657},{"_id":"themes/next/languages/tr.yml","hash":"e08d8d6ee9507a7c7d4450bc1c76b435470a3739","modified":1579275313657},{"_id":"themes/next/languages/ru.yml","hash":"f7d5efd6289845f2375bbee8fe883813de745767","modified":1579275313657},{"_id":"themes/next/languages/uk.yml","hash":"e58393cf726401bf50a772392e23507d9e11049e","modified":1579275313658},{"_id":"themes/next/languages/vi.yml","hash":"0c0890ccffcb5cca0893de63ebad66e3ce740707","modified":1579275313658},{"_id":"themes/next/languages/zh-CN.yml","hash":"4b36a51556e87d236c6ac6ee6975de1beb95724c","modified":1579275313658},{"_id":"themes/next/languages/zh-TW.yml","hash":"5e395cb492a0b6284f8d2ffdd93f7380db31486f","modified":1579275313658},{"_id":"themes/next/languages/zh-HK.yml","hash":"6d83daf9df1811e3ae6cde5ad778c888d8027b13","modified":1579275313658},{"_id":"source/images/jupyter.png","hash":"663c011d28f6956fba25e233d64c21407b19c9c9","modified":1551970879754},{"_id":"source/images/my_alipay.png","hash":"aa8ec57efb1a6c40326781ffca18e1cf04ed7d7b","modified":1548199219912},{"_id":"source/images/my_wechat_pay.png","hash":"b2b826e8b857e96dfb732cdc8ead4cb0ae857263","modified":1548199219913},{"_id":"source/images/intelligent_bed.gif","hash":"5adea1af6ab09977b4712a2ef3d35e44666345c6","modified":1551970879723},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1579275306889},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1579275306898},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1579275306902},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1579275306903},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1579275306900},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1579275306897},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1579275306903},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1579275306895},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1579275306901},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1579275306901},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1579275306905},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1579275306888},{"_id":"themes/next/.git/logs/HEAD","hash":"52bebecb3643a3c4c5f4afeac97e481ca7299c9d","modified":1579275313609},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"8ae029084b9ac482adf0fae2a0979dd388476513","modified":1579275313632},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"7a9526f749205c882d672a4f51e6a3033c80ca6e","modified":1579275313633},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"89667adbb85c25716dba607cd7a38191acf60736","modified":1579275313634},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"789a3cceb8f37a4b63b1fb2452a03332a3c365ed","modified":1579275313634},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1579275313647},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1579275313648},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1579275313647},{"_id":"themes/next/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1579275313648},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1579275313650},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1579275313649},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1579275313648},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"17d7203e85a8ce9760c42a853dee0f26a8f7ee4e","modified":1579275313649},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"0b0b9ec6ec4a89e701a3b91f8d7d95752d3e241b","modified":1579275313650},{"_id":"themes/next/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1579275313652},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"f0ffb74de522749c9f2fda46970a61bdafbfbc24","modified":1579275313651},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1579275313718},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1579275313650},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1579275313653},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1579275313722},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1579275313723},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1579275313723},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1579275313723},{"_id":"themes/next/scripts/filters/post.js","hash":"5e5035372b3d94a65309334c93303c858e072012","modified":1579275313723},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cb211b6b50913454b1737782e9e2af96cfa40448","modified":1579275313724},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1579275313725},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1579275313726},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1579275313726},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1579275313727},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1579275313728},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1579275313729},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1579275313730},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1579275313730},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1579275313730},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1579275313731},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1579275313731},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1579275313731},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1579275313659},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1579275313769},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1579275313660},{"_id":"themes/next/layout/_macro/post.swig","hash":"049caf88e2cb8dde780b0c6196db984c7bc3a4cc","modified":1579275313660},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1579275313770},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1579275313770},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1579275313771},{"_id":"themes/next/source/images/avatar.gif","hash":"84f6ae62d362e383b26794ec9f191bf74152445f","modified":1548199219897},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1579275313771},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1579275313771},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1579275313772},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1579275313772},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1579275313773},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1579275313773},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1579275313773},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1579275313774},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1579275313774},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1579275313774},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1579275313774},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1579275313805},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0c4914a5fd08f15beec71940218c814ad9a89f3f","modified":1579275313660},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1ee6335c12773dc43f8b92136770cb10d460c25c","modified":1579275313661},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1579275313666},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1579275313672},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1579275313672},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1579275313672},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"a3462c37ab6d7642b1e95860ea5c4cfbac78efab","modified":1579275313673},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1579275313686},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1579275313685},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1579275313689},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1579275313699},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1579275313701},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1579275313798},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1579275313775},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1579275313702},{"_id":"themes/next/source/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1579275313799},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1579275313802},{"_id":"themes/next/source/js/motion.js","hash":"26c6170bc861f33030084e15f9bd31e7e9050b0e","modified":1579275313802},{"_id":"themes/next/source/js/utils.js","hash":"6ef79d54e71d7ddbb2e7ffa5aa9bbd28c543c835","modified":1579275313804},{"_id":"source/images/inklet-snapshot.png","hash":"11c2b6dc42d6502cbc9a3d0248e875be0a9dd311","modified":1551970879799},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579275313758},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579275313758},{"_id":"themes/next/.git/refs/heads/master","hash":"353c0bbe50897e340dbc386c09ce561a0bc4ec8d","modified":1579275313609},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1579275313718},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1579275313718},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1579275313719},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1579275313719},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"5ba0480c2dbb0626501c90c920be85ce2308103c","modified":1579275313720},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1579275313720},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1579275313721},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1579275313721},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1579275313722},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"e24c4dd78f6e4adee0e7c15eb8bca12eb92452e4","modified":1579275313722},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1579275313720},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1579275313767},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1579275313766},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1579275313769},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1579275313767},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1579275313769},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1579275313807},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1579275313806},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1579275313807},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1579275313807},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1579275313807},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1579275313758},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1579275313836},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1579275313837},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1579275313758},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"1638483d2d2dad1da4c841a6fb9f6ee96b850187","modified":1579275313661},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1579275313758},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"0172055d118d1d7f4c8379c8495c1ee1aa50c7d9","modified":1579275313662},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1579275313667},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1579275313669},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1579275313667},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"1b7faa20a458b46369779b57bcc695bbc5d1c13a","modified":1579275313669},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1579275313670},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1579275313670},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1579275313670},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1579275313671},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1579275313673},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"a2bb0bec243685e670b60a3d54142950adc03af0","modified":1579275313673},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1579275313674},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1579275313676},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1579275313663},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"e6076865dba066c5f0008e22217efb850d5af69c","modified":1579275313664},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1579275313685},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1579275313663},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1579275313666},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1579275313664},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"54ba9508a901c295a02c8e34e9cece7c7dcad518","modified":1579275313665},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1579275313665},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1579275313688},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1579275313687},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1579275313689},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1579275313688},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1579275313689},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1579275313691},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1579275313690},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1579275313698},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"d3dc3e051e6816cdd576d00cc70b18b8a4c6a495","modified":1579275313691},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"ed236103bccbcf608f7d5d5b33b9f995d2f1a7de","modified":1579275313697},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1579275313691},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1579275313701},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4d6f9e09ca4056ff6a5d4923e202126a75242183","modified":1579275313698},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1579275313700},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1579275313701},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1579275313702},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1579275313703},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1579275313703},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1579275313704},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1579275313704},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1579275313704},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1579275313704},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"801e1d2f59f7d2db4096c4788b8469b4165f4965","modified":1579275313705},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1579275313706},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1579275313706},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ae2a2502b77203e83f75a040c43e86a7ecb4873c","modified":1579275313802},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1579275313803},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"52bebecb3643a3c4c5f4afeac97e481ca7299c9d","modified":1579275313610},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1579275313606},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1579275313733},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1579275313734},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1579275313733},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1579275313759},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"bc87cea0b534f2d75db60f300b069456f6516d1b","modified":1579275313740},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1579275313740},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1579275313747},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1579275313747},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1579275313753},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1579275313752},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1579275313752},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1579275313754},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"8e1cc5e3b20d804a7265f945b877388bffee39eb","modified":1579275313755},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1579275313754},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1579275313755},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1579275313764},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1579275313763},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a54662bd4cbbe316048a811d3b5c83fb6df63739","modified":1579275313764},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1579275313757},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1579275313764},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1579275313760},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1579275313764},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1579275313764},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1579275313761},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1579275313761},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1579275313763},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"b1a9afa11f8cf1b844682112ff931ac32b72ae39","modified":1579275313765},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1579275313762},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1579275313765},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"71a3d7f2242706f7a6b79933a67ef3664cca3a24","modified":1579275313765},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1579275313766},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"71f71a089a9930c2401cdc22e5c6880a9b90ebcd","modified":1579275313765},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1579275313766},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1579275313819},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1579275313818},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1579275313815},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1579275313835},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1579275313836},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"52bebecb3643a3c4c5f4afeac97e481ca7299c9d","modified":1579275313606},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1579275313734},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1579275313735},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1579275313735},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1579275313735},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"af182c0d1e52f94280f6108936914f04ed541eee","modified":1579275313736},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1579275313735},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1579275313736},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1579275313736},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1579275313737},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1579275313737},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1579275313737},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1579275313739},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1579275313738},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1579275313738},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1579275313739},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1579275313739},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"284249dcfa3b49c5d76210bbb0f74f65fc2f12ea","modified":1579275313740},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1579275313740},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1579275313741},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1579275313741},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1579275313742},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"a48ed1dc9978b1b621f0e12664738c0d855d8013","modified":1579275313741},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1579275313742},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1579275313742},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1579275313743},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"c27b3056d5e22d3c66d8a152a23634314d5c4a60","modified":1579275313747},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1579275313743},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1579275313746},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1579275313747},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1579275313748},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1579275313744},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1579275313749},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1579275313749},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1579275313749},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1579275313750},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1579275313750},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"7e19772f7b2a5c454f3c0949abc272209abc4684","modified":1579275313751},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"521534f483440434e808f92377bc3fc73667c89a","modified":1579275313750},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1579275313751},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1579275313751},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1579275313753},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1579275313753},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"b4923515ca8e44aa62e839ce948f759cfd1f896f","modified":1579275313754},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1579275313754},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1579275313755},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1579275313756},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1579275313756},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1579275313756},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1579275313756},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1579275313757},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1579275313757},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1579275313823},{"_id":"themes/next/.git/objects/pack/pack-176b5d9dc4eac456a89be9db8a26ecfbe7deb1ee.idx","hash":"3c6f75f08b51edbb07662fa72b8b97c06d724940","modified":1579275313573},{"_id":"source/images/jump-jump.mp4","hash":"6dc654ce718653dca7ce007a84f3b15585d1639b","modified":1551970879775},{"_id":"themes/next/.git/objects/pack/pack-176b5d9dc4eac456a89be9db8a26ecfbe7deb1ee.pack","hash":"02ffcb5951558050d6424a9860a466d45644c8df","modified":1579275313560},{"_id":"themes/next/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1579326839508},{"_id":"themes/next/source/images/apple-touch-icon.png","hash":"8cee142695f11bdccee3a533a8ef3f282b6c895a","modified":1579308646000},{"_id":"themes/next/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1579326979651},{"_id":"themes/next/source/images/android-chrome-192x192.png","hash":"a6d36bd003bfc98caaf949dc88e1aec15829f3f1","modified":1579308646000},{"_id":"themes/next/source/images/favicon-16x16.png","hash":"a972b000a4b790b6b433c3fd7ca4a05633d18de0","modified":1579308646000},{"_id":"themes/next/source/images/favicon-32x32.png","hash":"3f80f2a9852600e9bb6c55d74090c63a3a9b8b5f","modified":1579308646000},{"_id":"themes/next/source/images/favicon.ico","hash":"ccf7e21b01457be75cb51a1cbfc50bc679a410b0","modified":1579308646000},{"_id":"themes/next/source/images/my_wechat_pay.png","hash":"b2b826e8b857e96dfb732cdc8ead4cb0ae857263","modified":1548199219913},{"_id":"themes/next/source/images/my_alipay.png","hash":"aa8ec57efb1a6c40326781ffca18e1cf04ed7d7b","modified":1548199219912},{"_id":"public/about/index.html","hash":"90619881191c6b50bd2aba6d50b9c6bf1c47264f","modified":1579345856612},{"_id":"public/categories/NDK/index.html","hash":"695f6c6c8576610de6b96b06e0f1b7534a9bf1ed","modified":1579345856612},{"_id":"public/categories/Java/index.html","hash":"100d4e5fc0eb070c8583e08241e7493d9de5011c","modified":1579345856612},{"_id":"public/categories/小玩意/index.html","hash":"f99ff9411891ea58c9f2dc2d6356ca03aad967e8","modified":1579345856612},{"_id":"public/categories/其他/index.html","hash":"8dbace58e07bab72220339a4b165ddd9e8d58064","modified":1579345856612},{"_id":"public/categories/Wordpress/index.html","hash":"7dffc975f154c48dcb5676a9621a97f0e7f6021e","modified":1579345856612},{"_id":"public/categories/AndroidThings/index.html","hash":"a3c6977b4aaf5d46a728edc46bad884b0f788b61","modified":1579345856612},{"_id":"public/categories/树莓派/index.html","hash":"dba72fe8a63def40ccdf9f4f5af2cb17800ec743","modified":1579345856612},{"_id":"public/categories/小游戏/index.html","hash":"de79fac99c8df3a239b921a9f5d99e2a6c5b1e50","modified":1579345856612},{"_id":"public/tags/AsyncQueryHandler/index.html","hash":"cd33e05e5a56fcdede9c878becb51c2d00e7dd39","modified":1579345856612},{"_id":"public/tags/自定义View/index.html","hash":"05fa62f856b6966c489473388fb1f1be8868b197","modified":1579345856612},{"_id":"public/tags/ObjectAnimator/index.html","hash":"103282ddf6828851f04b9f05cd9a4582f928ea15","modified":1579345856612},{"_id":"public/tags/Path/index.html","hash":"60ffeacdf3a7303d71da96e8d6973d9a3360b8db","modified":1579345856612},{"_id":"public/tags/ActiveAndroid/index.html","hash":"96ed4730152fa2ca84c9fcf4cdf9d326f3c82d90","modified":1579345856612},{"_id":"public/tags/CMake/index.html","hash":"7329511774de5e1738752b76d87ab13e1054c8f9","modified":1579345856612},{"_id":"public/tags/踩坑/index.html","hash":"30260231484309775ccc14ff2fcd9adf46d7ef17","modified":1579345856612},{"_id":"public/tags/Sublime/index.html","hash":"f161cd289cb80c6b15f71e7d9169089785845ffc","modified":1579345856612},{"_id":"public/tags/CopyOnWrite/index.html","hash":"ec181c32b08cfe6e3eac66f78c95f563cf1c9a38","modified":1579345856612},{"_id":"public/tags/plantuml/index.html","hash":"3228716eaf9edbd474c476b5f283ee3e1f1477c2","modified":1579345856612},{"_id":"public/tags/GitBook/index.html","hash":"2d1a50facbc890f04f0de9f29effd5b1422dd8d8","modified":1579345856612},{"_id":"public/tags/plugin/index.html","hash":"331234f97ec046244293ab18c69deab6f4ff7214","modified":1579345856612},{"_id":"public/tags/Inklet/index.html","hash":"e2949aae02db8460edaf53271297a6c989aed61e","modified":1579345856612},{"_id":"public/tags/SketchBook/index.html","hash":"fc30521111103655eb477b1ceee02f9e6d1784f4","modified":1579345856612},{"_id":"public/tags/Alfred/index.html","hash":"08041085e4e7fc7bad6f68ece4747c3045b5b11a","modified":1579345856612},{"_id":"public/tags/shell/index.html","hash":"2cde1503f6e8471c6d7bc7453757832bde92190d","modified":1579345856612},{"_id":"public/tags/IntentServcie/index.html","hash":"b136a3282ee8e4a521a12b6631ee58495eb16eba","modified":1579345856612},{"_id":"public/tags/Hexo/index.html","hash":"dd13ae185f94c4a58022d1a4ded35cdc2a1c8b2a","modified":1579345856612},{"_id":"public/tags/mac/index.html","hash":"c74f9492422a255f93eefb749bf066c7d5a4c31c","modified":1579345856612},{"_id":"public/tags/apple-script/index.html","hash":"f8744b690ceb410af17fae28bddc877ec128d015","modified":1579345856612},{"_id":"public/tags/xGestures/index.html","hash":"c49489b8d3b6e32993640302a9163dbcc1a6cf38","modified":1579345856612},{"_id":"public/tags/Android/index.html","hash":"f4e42d1d98e04e91db947501106bae8f30ad6e33","modified":1579345856612},{"_id":"public/tags/Strict-Mode/index.html","hash":"d4a85e3fc27356d1fd9e3808ef21358073c9d798","modified":1579345856612},{"_id":"public/tags/Stetho/index.html","hash":"93c48324028affeb21f85e2de861771d58c28cca","modified":1579345856612},{"_id":"public/tags/修改默认databases目录/index.html","hash":"1543a5eca16146fb7f95d0607dbbaf7a9cf86872","modified":1579345856612},{"_id":"public/tags/Wordpress/index.html","hash":"ba1376fb04cecb6a92e43fbf51e93bd2fa6344df","modified":1579345856612},{"_id":"public/tags/php/index.html","hash":"d643c041a3ea258044c0be8d2e5f19f0a78dfaf0","modified":1579345856612},{"_id":"public/tags/Kotlin/index.html","hash":"e1410bea5e4845bdff299f2c35a3791dc632783b","modified":1579345856612},{"_id":"public/tags/Sublime-Text-3/index.html","hash":"aa81e784961fe840fa7a1f9367ad49a770ef01fd","modified":1579345856612},{"_id":"public/tags/uiautomatorview/index.html","hash":"5744ddd30350b1361f116981ad780a6a0df706e3","modified":1579345856612},{"_id":"public/tags/sdkmanager/index.html","hash":"ce87ec775a79ef51b432e5fe9e67533883f0db53","modified":1579345856612},{"_id":"public/tags/Talkback/index.html","hash":"f5edd36c1b3f3e70f4e0f25793e3cba0f726c05e","modified":1579345856612},{"_id":"public/tags/gradle/index.html","hash":"5d2aaf2d2de185ecd38d7a45b02acdfb4d618112","modified":1579345856612},{"_id":"public/tags/Docker/index.html","hash":"19d5c415d30734b6ca7e500209a060fa309bdcd6","modified":1579345856612},{"_id":"public/tags/Jupyter/index.html","hash":"42d1fa096360feb070c1b14e087a0f5a92222e6f","modified":1579345856612},{"_id":"public/tags/hexo/index.html","hash":"ba65d4dc61c3de75211b76472a8ccb5e46453e9b","modified":1579345856612},{"_id":"public/tags/Gogs/index.html","hash":"9eb5bbe36e59f66212f291a192900211565d835b","modified":1579345856612},{"_id":"public/tags/Linux/index.html","hash":"d19ed05c4944f48306af3471132732684f7c446b","modified":1579345856612},{"_id":"public/tags/Cron/index.html","hash":"5b3780a5f077631c1f507e9e223a401656be0304","modified":1579345856612},{"_id":"public/tags/bug/index.html","hash":"07c3e01829f92b81fb5b63601970983a94d5ffd0","modified":1579345856612},{"_id":"public/tags/依赖包/index.html","hash":"469ba1fcc096b5e614c45bcce68c8c41f859a5bb","modified":1579345856612},{"_id":"public/tags/树莓派/index.html","hash":"c164ada61907b009d4a27dbb413f19cd3f7402f1","modified":1579345856612},{"_id":"public/tags/AndroidThings/index.html","hash":"db851ba182de9413698f47bbc46803736a8f3cd8","modified":1579345856612},{"_id":"public/tags/Accessibility/index.html","hash":"d5ffc0597a571a07e530fb1e844c037af2fd8aec","modified":1579345856612},{"_id":"public/tags/微信/index.html","hash":"ae3e7d3590a85733acf6f6ea2c409703be27d740","modified":1579345856612},{"_id":"public/tags/跳一跳/index.html","hash":"a0e06d78fe5760a769dc34b43e173df47b9512c8","modified":1579345856612},{"_id":"public/tags/Android-Jetpack/index.html","hash":"3668ab42eb7c793b964e031e8e0e56dc96fff7db","modified":1579345856612},{"_id":"public/archives/2015/index.html","hash":"1be9e44d7ca9e47ff777b97648d7a5e389208a83","modified":1579345856612},{"_id":"public/archives/2015/11/index.html","hash":"32b04e3fc41b57ee4a3b05b3f15b737614e854a0","modified":1579345856612},{"_id":"public/archives/2017/02/index.html","hash":"757eaae089c0a367faddead813e51648a982fb8e","modified":1579345856612},{"_id":"public/archives/2017/03/index.html","hash":"b9c82b4d576d35663570ca9be110f3538e878813","modified":1579345856612},{"_id":"public/archives/2017/07/index.html","hash":"7a73847f260b9d231d965cdf5663b5b638c95f53","modified":1579345856612},{"_id":"public/archives/2017/08/index.html","hash":"e0a333c0d7a586b86ab005686b106bcecb29a674","modified":1579345856612},{"_id":"public/archives/2018/01/index.html","hash":"7cdd889b81eb5d7ed4c453f93673a100e13f74f0","modified":1579345856612},{"_id":"public/archives/2018/02/index.html","hash":"764cf24856b88033e960c4169ec0735de18b0d9a","modified":1579345856612},{"_id":"public/archives/2018/04/index.html","hash":"9dee87a6bd3308c551fa1f10144792cd9aadf742","modified":1579345856612},{"_id":"public/archives/2018/05/index.html","hash":"25bd3b0f3717d21d1a0676b2e2e4b3930475c3cb","modified":1579345856612},{"_id":"public/archives/2018/06/index.html","hash":"c7f083df669da68fe7bc07f9784f3dc5f5804823","modified":1579345856612},{"_id":"public/archives/2018/09/index.html","hash":"d59e9076559bd578b8aa910cda2e4287bd84bc14","modified":1579345856612},{"_id":"public/archives/2018/11/index.html","hash":"7a92acdd0cffd32671fc5d06f3de09d52dd4500a","modified":1579345856612},{"_id":"public/archives/2019/index.html","hash":"5176aaf7947979e0cbd9740ab8031451dfba4e40","modified":1579345856612},{"_id":"public/archives/2019/01/index.html","hash":"378500fe208213821bf7a8a73e64c3113688010e","modified":1579345856612},{"_id":"public/archives/2019/03/index.html","hash":"7bb5b71a69e7256683d8e8ca4e87230e0feaae3a","modified":1579345856612},{"_id":"public/categories/index.html","hash":"e297a74fcadb945af3e10e78ca029a8a329f0ee8","modified":1579345856612},{"_id":"public/tags/index.html","hash":"2e77fe98e64a5281c2d084eeaf3751bc6a64b5e4","modified":1579345856612},{"_id":"public/2019/03/07/使用_Docker_搭建_Jupyter_环境/index.html","hash":"77f87e5f14492cca1a14907f68fbc83b675f353f","modified":1579345856612},{"_id":"public/2019/01/22/StrictMode_打印_log_到文件/index.html","hash":"61f376a8cef06a5321d3134a04555d2973486815","modified":1579345856612},{"_id":"public/2018/11/08/Android_Jetpack_Navigation/index.html","hash":"100fd300e1a08e9efd5cb3753accc70fbd23909c","modified":1579345856612},{"_id":"public/2018/10/25/Codeforces_516_dev2_E/index.html","hash":"0e09d1d6eaff3cf09f87b40d842fca7c6fadddb1","modified":1579345856612},{"_id":"public/2018/10/25/Codeforces_516_dev2_D/index.html","hash":"f4deccc62fd948ef18b4433a108d497e550e62ec","modified":1579345856612},{"_id":"public/2018/10/25/Codeforces_516_dev2_C/index.html","hash":"9ef1a202208abace1284faa9ecb3d1e802f4ef9a","modified":1579345856612},{"_id":"public/2018/10/25/Codeforces_516_dev2_B/index.html","hash":"eabdd25f5952c77e48cbfecf6f0f7b2fe51c6b79","modified":1579345856612},{"_id":"public/2018/10/22/Codeforces_516_dev2_A/index.html","hash":"1f6a42e5c3b9d80d7d68ef0339f62d24204c2428","modified":1579345856612},{"_id":"public/2018/10/22/Talkback_源码解析/index.html","hash":"d3403adc61092fbf81aac39416aaf107ddd6b533","modified":1579345856612},{"_id":"public/2018/10/08/Accessibility_源码解析/index.html","hash":"53277b054ec4b84676044aa1d378fc218d76e9d3","modified":1579343562297},{"_id":"public/2018/10/07/建立自己的_Accessibility_Service/index.html","hash":"f44efdbd37d3c8425f24ff7381b63d0f8ecc49b6","modified":1579345856612},{"_id":"public/2018/09/28/wordpress需要访问您网页服务器的权限/index.html","hash":"dd46fe2a93415016a50d15e7518705962906a24f","modified":1579345856612},{"_id":"public/2018/09/23/Gitbook-plugin-plantuml_优化/index.html","hash":"989c25a5f36755b42bcd7b570572f48b0006ea19","modified":1579345856612},{"_id":"public/2018/09/17/让_APP_具有辅助功能/index.html","hash":"ffc9bc2e2a52191ceccd20bdc7465954c19a1bba","modified":1579345856612},{"_id":"public/2018/06/28/依赖包不更新的_bug/index.html","hash":"2dc0076512ad96122d66ed3630b4c5f8f65066e0","modified":1579345856612},{"_id":"public/2018/06/11/Mac_鼠标手势/index.html","hash":"02ad43aad9eab06eeb50fdb53f9939bb9ad6d83b","modified":1579345856612},{"_id":"public/2018/05/06/树莓派3_安装_Raspbian_镜像/index.html","hash":"96de28e8a79f45d85048a0b6eeeaa79870d24c2d","modified":1579345856612},{"_id":"public/2018/05/06/树莓派3_安装_AndroidThings/index.html","hash":"d6fbd6332206e48a38d1ad375baff19126fabe2e","modified":1579345856612},{"_id":"public/2018/04/28/Unexpected_error_while_obtaining_UI_hierarchy/index.html","hash":"0ae649a2b012013227c3b7e7e8ce3656643a3cc8","modified":1579345856612},{"_id":"public/2018/04/27/博客优化/index.html","hash":"540ae7e84842305afb0f6848e33370e09f3af3b6","modified":1579345856612},{"_id":"public/2018/02/08/Sublime-Text-3-编译并运行-Kotlin/index.html","hash":"f5909cd5e8796509f9c1e7f85b4f051f94ce9974","modified":1579345856612},{"_id":"public/2018/01/09/跳一跳/index.html","hash":"5f93f738acf832c08196b64167992e23a7339dfc","modified":1579345856612},{"_id":"public/2017/08/12/IntentService-源码解析/index.html","hash":"6d1e0db49f8a4f08e5cd7ce66d303f3013a91a35","modified":1579345856612},{"_id":"public/2017/07/25/Inklet-去广告/index.html","hash":"b070de140b999cc7f42227e3ee6a8502bb399ad7","modified":1579345856612},{"_id":"public/2017/07/20/CopyOnWrite_容器/index.html","hash":"6df11f4a358703c26f83895214c46a4b114caf6a","modified":1579345856612},{"_id":"public/2017/03/17/Stetho-自定义-databases-目录/index.html","hash":"ced27bd967f52c8dfbaad6b6d8087fe95ba179ae","modified":1579345856612},{"_id":"public/2017/03/06/AsyncQueryHandler-源码学习/index.html","hash":"cf2b916192812ca58ebdfd7c793b68a97d0b4da9","modified":1579345856612},{"_id":"public/2017/02/24/搭建-Android-Framework-源码阅读环境/index.html","hash":"4ef1250793ac559d9fa3727d46d5b98b28ebe785","modified":1579345856612},{"_id":"public/2017/02/22/CMake-构建动态库没有生成so文件/index.html","hash":"f0ecf0f352654fdec68bc05a35c789fcf3df170a","modified":1579345856612},{"_id":"public/2016/08/31/Android_自定义_View——智能床垫/index.html","hash":"bdcfd2f1d5dc8e126c19de10ffec47061529bdb2","modified":1579345856612},{"_id":"public/2016/08/28/Hexo-图片上传踩坑/index.html","hash":"a161f7551170f1b61f31c8808155d26fb0870308","modified":1579345856612},{"_id":"public/2016/08/27/ActiveAndroid-源码学习/index.html","hash":"247b724a2be8fb8b3921d7cb828a0ff86c7419fe","modified":1579345856612},{"_id":"public/2016/08/26/博客搭建/index.html","hash":"790487dc807127d4603b222c8d6d52f9e794a958","modified":1579345856612},{"_id":"public/2015/11/03/gradle_编译和运行_Java_程序/index.html","hash":"80796751120cbebd9f6bd3cae28c204de0e99790","modified":1579345856612},{"_id":"public/index.html","hash":"a58c63e714c1905a06d5e8582cb9a560fe3959ec","modified":1579345856612},{"_id":"public/page/2/index.html","hash":"c67e7fd2fcd15547a30c4f9cad71ff88cac051a1","modified":1579345856612},{"_id":"public/page/3/index.html","hash":"40ecf9857eb9bf64e05b1bc2ca5d3fb7dd863aeb","modified":1579345856612},{"_id":"public/page/4/index.html","hash":"af862377617dbcff44cff0a13dd9e35588618722","modified":1579345856612},{"_id":"public/categories/源码阅读/index.html","hash":"d3f5f0cb6c4dc2c144003d45791ad00b9d215e27","modified":1579345856612},{"_id":"public/categories/Android/index.html","hash":"5d9816d4ce1cd933e89735d03dfccda41d26c39e","modified":1579345856612},{"_id":"public/categories/Algorithm/index.html","hash":"803cdeaf31321765cd8eff280b55034dd79e2d76","modified":1579345856612},{"_id":"public/categories/小工具/index.html","hash":"fc2a7cffd5383dcebd9b7ce60b2b3e971f84dee1","modified":1579345856612},{"_id":"public/tags/源码/index.html","hash":"9195eedc40ba8d1fa09428ee9962320672d92a97","modified":1579345856612},{"_id":"public/tags/Algorithm/index.html","hash":"8622e92e499dbd7bb84c02f2d7cc0102fe63e3bc","modified":1579345856612},{"_id":"public/tags/Codeforces/index.html","hash":"68454fcf19205bdd3b042a4ea4fb757c4a745502","modified":1579345856612},{"_id":"public/tags/辅助/index.html","hash":"6ae0f83b9ed8eaf5a4d77eabde77c2ccb59d51db","modified":1579345856612},{"_id":"public/archives/index.html","hash":"fb3ef097ea8020d5f590211c8802081c2fbf0f97","modified":1579345856612},{"_id":"public/archives/page/2/index.html","hash":"ed6ca03f6bc4e32b716ef978b57db9d79b857d73","modified":1579345856612},{"_id":"public/archives/page/3/index.html","hash":"35a9c2553b48f105a745d1aa19fa908f74f2c0b9","modified":1579345856612},{"_id":"public/archives/page/4/index.html","hash":"58086f5ebf8d13a4228055b85aa149772773c450","modified":1579345856612},{"_id":"public/archives/2016/index.html","hash":"e2329d98938b7e149d6b97e05e040c5c96930920","modified":1579345856612},{"_id":"public/archives/2016/08/index.html","hash":"bf8877cf71025833ccef91ce4e1376ad39d742b4","modified":1579345856612},{"_id":"public/archives/2017/index.html","hash":"c48067198135fdc5abfdd4a5c58cb781a1dab201","modified":1579345856612},{"_id":"public/archives/2018/index.html","hash":"3caa8d4939d8b34e69890823596d86372760aafd","modified":1579345856612},{"_id":"public/archives/2018/page/2/index.html","hash":"85cae68fe569988d8d266bd86322c77e37a50990","modified":1579345856612},{"_id":"public/archives/2018/10/index.html","hash":"9ba1a714472645244937da1332ee706e96979910","modified":1579345856612},{"_id":"public/favicon_1.ico","hash":"a5eef031b1d087aa9b556fc7ca28a955c53cba46","modified":1579338453336},{"_id":"public/favicon.ico","hash":"5654bc458d5c89dfce70f54550522544485555be","modified":1579338453336},{"_id":"public/images/Sync-Profile-with-Gradle-File.png","hash":"2a0d4eed03bccf1893f74e8ab5d0fc4ec9702d3f","modified":1579338453336},{"_id":"public/images/active-android-state-flow.png","hash":"be06c343f70ac97f273de10f5c11d2869d939409","modified":1579338453336},{"_id":"public/images/intelligent_bed_design.png","hash":"57e1e0ed73da30f317fae3c72e6bd38894f3b8d0","modified":1579338453336},{"_id":"public/images/avatar.gif","hash":"84f6ae62d362e383b26794ec9f191bf74152445f","modified":1579338453336},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1579338453336},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1579338453336},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1579338453336},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1579338453336},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1579338453336},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1579338453336},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1579338453336},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1579338453336},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1579338453336},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1579338453336},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1579338453336},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1579338453336},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1579338453336},{"_id":"public/images/favicon-16x16.png","hash":"a972b000a4b790b6b433c3fd7ca4a05633d18de0","modified":1579338453336},{"_id":"public/images/favicon-32x32.png","hash":"3f80f2a9852600e9bb6c55d74090c63a3a9b8b5f","modified":1579338453336},{"_id":"public/images/android-chrome-192x192.png","hash":"a6d36bd003bfc98caaf949dc88e1aec15829f3f1","modified":1579338453336},{"_id":"public/images/apple-touch-icon.png","hash":"8cee142695f11bdccee3a533a8ef3f282b6c895a","modified":1579338453336},{"_id":"public/images/favicon.ico","hash":"ccf7e21b01457be75cb51a1cbfc50bc679a410b0","modified":1579338453336},{"_id":"public/images/my_alipay.png","hash":"aa8ec57efb1a6c40326781ffca18e1cf04ed7d7b","modified":1579338453336},{"_id":"public/images/my_wechat_pay.png","hash":"b2b826e8b857e96dfb732cdc8ead4cb0ae857263","modified":1579338453336},{"_id":"public/images/testimage.gif","hash":"84f6ae62d362e383b26794ec9f191bf74152445f","modified":1579338453336},{"_id":"public/images/jupyter.png","hash":"663c011d28f6956fba25e233d64c21407b19c9c9","modified":1579338453336},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1579338453336},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1579338453336},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1579338453336},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1579338453336},{"_id":"public/js/motion.js","hash":"26c6170bc861f33030084e15f9bd31e7e9050b0e","modified":1579338453336},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1579338453336},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1579338453336},{"_id":"public/js/schemes/muse.js","hash":"ae2a2502b77203e83f75a040c43e86a7ecb4873c","modified":1579338453336},{"_id":"public/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1579338453336},{"_id":"public/css/main.css","hash":"9cbe17b59c849b9dbeda711fc7010235980e5db6","modified":1579338453336},{"_id":"public/images/intelligent_bed.gif","hash":"5adea1af6ab09977b4712a2ef3d35e44666345c6","modified":1579338453336},{"_id":"public/images/inklet-snapshot.png","hash":"11c2b6dc42d6502cbc9a3d0248e875be0a9dd311","modified":1579338453336},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1579338453336},{"_id":"public/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1579338453336},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1579338453336},{"_id":"public/js/utils.js","hash":"6ef79d54e71d7ddbb2e7ffa5aa9bbd28c543c835","modified":1579338453336},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1579338453336},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1579338453336},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1579338453336},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1579338453336},{"_id":"public/images/jump-jump.mp4","hash":"6dc654ce718653dca7ce007a84f3b15585d1639b","modified":1579338453336},{"_id":"public/sitemap.xml","hash":"40cbc7c3be479a699ef2f058b16e191bc04cf87f","modified":1579345856612},{"_id":"source/_posts/googlea77f220d29498179.html","hash":"babe731140e23b865ab6523f510eb6e44e61ef6b","modified":1579343494926},{"_id":"public/2020/01/18/googlea77f220d29498179/index.html","hash":"6e77c05eda2b6f35c9756199e8d436e23ac6cb45","modified":1579343562297},{"_id":"public/archives/2020/01/index.html","hash":"7e9df5ad02c1b0beca5f74769c29ceda6b1803c6","modified":1579343562297},{"_id":"public/archives/2020/index.html","hash":"a9f37c142afb27ad25051e63a6ab3c9124cf32d1","modified":1579343562297}],"Category":[{"name":"源码阅读","_id":"ck5j64dkp000zha9k04j64jz5"},{"name":"Android","_id":"ck5j64dmo0012ha9k6cp5dxgp"},{"name":"NDK","_id":"ck5j64dn60016ha9knre0u9t8"},{"name":"Algorithm","_id":"ck5j64dne0018ha9kt066m7b3"},{"name":"Java","_id":"ck5j64do0001iha9kn5nakcvn"},{"name":"小工具","_id":"ck5j64do1001kha9kxe38b0r6"},{"name":"小玩意","_id":"ck5j64doc001mha9k8w4chusd"},{"name":"其他","_id":"ck5j64dow001qha9kwohfoeec"},{"name":"Wordpress","_id":"ck5j64dpc001yha9kwcqm9ble"},{"name":"AndroidThings","_id":"ck5j64dqa002gha9ke2581418"},{"name":"树莓派","_id":"ck5j64dqb002iha9kzii0df87"},{"name":"小游戏","_id":"ck5j64dqe002lha9kou8tuvjx"}],"Data":[],"Page":[{"title":"categories","date":"2016-08-26T15:29:16.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-08-26 23:29:16\ntype: \"categories\"\n---\n","updated":"2019-01-22T23:20:19.894Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck5j64d8g0000ha9kajqksprk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2016-08-26T15:33:04.000Z","_content":"\n#### 个人信息\n\n- 姓名: Justin\n- 坐标: 厦门\n- 职业: 码农\n- 邮箱: binwin20(a)126.com\n\n\n人一能之，己百之；人十能之，己千之。虽愚必明，虽柔必强。\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2016-08-26 23:33:04\n---\n\n#### 个人信息\n\n- 姓名: Justin\n- 坐标: 厦门\n- 职业: 码农\n- 邮箱: binwin20(a)126.com\n\n\n人一能之，己百之；人十能之，己千之。虽愚必明，虽柔必强。\n\n\n","updated":"2019-01-22T23:20:19.893Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck5j64dag0002ha9kfdnhtps3","content":"<h4 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h4><ul>\n<li>姓名: Justin</li>\n<li>坐标: 厦门</li>\n<li>职业: 码农</li>\n<li>邮箱: binwin20(a)126.com</li>\n</ul>\n<p>人一能之，己百之；人十能之，己千之。虽愚必明，虽柔必强。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h4><ul>\n<li>姓名: Justin</li>\n<li>坐标: 厦门</li>\n<li>职业: 码农</li>\n<li>邮箱: binwin20(a)126.com</li>\n</ul>\n<p>人一能之，己百之；人十能之，己千之。虽愚必明，虽柔必强。</p>\n"},{"title":"tags","date":"2016-08-26T15:29:04.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-08-26 23:29:04\ntype: \"tags\"\n---\n","updated":"2019-01-22T23:20:19.914Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck5j64dau0004ha9k93se42l0","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"AsyncQueryHandler 源码学习","date":"2017-03-06T13:09:45.000Z","blog":true,"_content":"\n\n\nContentProvider 的单线程执行工具类\n\n### 构造函数\n\n- 在构造函数中需要传入 ContentResolver 对象\n- 创建一个 Thread 线程，用于线性执行 msg\n- 然后创建一个 Handler 对象(WorkerHandler)。\n\n### 能处理的操作\n\n- Query\n- Insert\n- Update\n- Delete\n\n### 执行流程\n\n- AsyncQueryHandler 也是一个 Handler 对象。当使用 startInsert/startUpdate 等方法时，先将 msg 发送到 WorkerHandler 的队列中，在其 handleMessage 时执行并获得结果放入 result 中，然后发送到 AsyncQueryHandler 这个 handler 的队列中。\n- AsyncQueryHandler 的 handleMessage 处理比较简单，直接将 token, cookie, args.result 作为参数传递给 onQueryComplete。\n\n重要结构体\n\n```java\nprotected static final class WorkerArgs {\n        public Uri uri;\n        public Handler handler;\n        public String[] projection;\n        public String selection;\n        public String[] selectionArgs;\n        public String orderBy;\n        public Object result;\n        public Object cookie;\n        public ContentValues values;\n    }\n```\n\n","source":"_posts/AsyncQueryHandler-源码学习.md","raw":"---\ntitle: AsyncQueryHandler 源码学习\ndate: 2017-03-06 21:09:45\ntags: [AsyncQueryHandler, 源码]\ncategories: 源码阅读\nblog: true\n---\n\n\n\nContentProvider 的单线程执行工具类\n\n### 构造函数\n\n- 在构造函数中需要传入 ContentResolver 对象\n- 创建一个 Thread 线程，用于线性执行 msg\n- 然后创建一个 Handler 对象(WorkerHandler)。\n\n### 能处理的操作\n\n- Query\n- Insert\n- Update\n- Delete\n\n### 执行流程\n\n- AsyncQueryHandler 也是一个 Handler 对象。当使用 startInsert/startUpdate 等方法时，先将 msg 发送到 WorkerHandler 的队列中，在其 handleMessage 时执行并获得结果放入 result 中，然后发送到 AsyncQueryHandler 这个 handler 的队列中。\n- AsyncQueryHandler 的 handleMessage 处理比较简单，直接将 token, cookie, args.result 作为参数传递给 onQueryComplete。\n\n重要结构体\n\n```java\nprotected static final class WorkerArgs {\n        public Uri uri;\n        public Handler handler;\n        public String[] projection;\n        public String selection;\n        public String[] selectionArgs;\n        public String orderBy;\n        public Object result;\n        public Object cookie;\n        public ContentValues values;\n    }\n```\n\n","slug":"AsyncQueryHandler-源码学习","published":1,"updated":"2019-03-07T15:01:19.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64d8n0001ha9khjhwwhpu","content":"<p>ContentProvider 的单线程执行工具类</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><ul>\n<li>在构造函数中需要传入 ContentResolver 对象</li>\n<li>创建一个 Thread 线程，用于线性执行 msg</li>\n<li>然后创建一个 Handler 对象(WorkerHandler)。</li>\n</ul>\n<h3 id=\"能处理的操作\"><a href=\"#能处理的操作\" class=\"headerlink\" title=\"能处理的操作\"></a>能处理的操作</h3><ul>\n<li>Query</li>\n<li>Insert</li>\n<li>Update</li>\n<li>Delete</li>\n</ul>\n<h3 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程\"></a>执行流程</h3><ul>\n<li>AsyncQueryHandler 也是一个 Handler 对象。当使用 startInsert/startUpdate 等方法时，先将 msg 发送到 WorkerHandler 的队列中，在其 handleMessage 时执行并获得结果放入 result 中，然后发送到 AsyncQueryHandler 这个 handler 的队列中。</li>\n<li>AsyncQueryHandler 的 handleMessage 处理比较简单，直接将 token, cookie, args.result 作为参数传递给 onQueryComplete。</li>\n</ul>\n<p>重要结构体</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerArgs</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Uri uri;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Handler handler;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String[] projection;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String selection;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String[] selectionArgs;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String orderBy;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Object result;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Object cookie;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ContentValues values;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>ContentProvider 的单线程执行工具类</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><ul>\n<li>在构造函数中需要传入 ContentResolver 对象</li>\n<li>创建一个 Thread 线程，用于线性执行 msg</li>\n<li>然后创建一个 Handler 对象(WorkerHandler)。</li>\n</ul>\n<h3 id=\"能处理的操作\"><a href=\"#能处理的操作\" class=\"headerlink\" title=\"能处理的操作\"></a>能处理的操作</h3><ul>\n<li>Query</li>\n<li>Insert</li>\n<li>Update</li>\n<li>Delete</li>\n</ul>\n<h3 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程\"></a>执行流程</h3><ul>\n<li>AsyncQueryHandler 也是一个 Handler 对象。当使用 startInsert/startUpdate 等方法时，先将 msg 发送到 WorkerHandler 的队列中，在其 handleMessage 时执行并获得结果放入 result 中，然后发送到 AsyncQueryHandler 这个 handler 的队列中。</li>\n<li>AsyncQueryHandler 的 handleMessage 处理比较简单，直接将 token, cookie, args.result 作为参数传递给 onQueryComplete。</li>\n</ul>\n<p>重要结构体</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerArgs</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Uri uri;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Handler handler;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String[] projection;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String selection;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String[] selectionArgs;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String orderBy;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Object result;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Object cookie;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ContentValues values;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Android 自定义View——智能床垫","date":"2016-08-31T08:29:56.000Z","blog":true,"_content":"\n\n\n实现一个如下图所示的自定义View。有点像女孩子的安尔乐。😀\n\n{% img \"/images/intelligent_bed.gif\" %}\n\n<!-- more  -->\n\n画图如下：\n\n{% img \"/images/intelligent_bed_design.png\" %}\n\n实现过程:\n\n1. 计算可以上下移动的四个点（如图：A, B, C, D）。\n2. 使用属性动画移动点的位置。\n3. 使用 Path 绘图，先绘制全部的白色区域，再绘制边边上的线。\n4. 圆角使用贝塞尔曲线\n\n### 属性动画\n\n自定义属性动画，\n\n```java\npublic class MyView {\n    private int head;\n    private ObjectAnimator[] mAnimators;\n    private final String[] PROPERTY = {\"head\", \"xxx\", \"xxx\", \"xxx\"};\n    public int getHead() {\n        return head;\n    }\n    public void setHead(int head) {\n        this.head = head;\n        invalidate();  // 设置之后，刷新 view\n    }\n    private void initView() {\n        mAnimators = new ObjectAnimator[4];\n        for (int i = 0; i < 4; i++) {\n            mAnimators[i] = new ObjectAnimator();\n            mAnimators[i].setDuration(600);\n            mAnimators[i].setTarget(this);\n            mAnimators[i].setPropertyName(PROPERTY[i]);\n        }\n    }\n    /**\n     * @param position 被赋值的位置\n     * @param value    -100 到 100\n     */\n    @Override\n    public void setValue(int position, int value) {\n        position &= 3;\n        int toHeight = value * getHeight() / 100 / 2;\n        ObjectAnimator animator = mAnimators[position];\n        animator.setIntValues(toHeight);\n        animator.start();\n    }\n}\n```\n\n### 绘图\n\n1. 计算四个点（A, B, C, D）的横坐标。 x0,x1,x2,x3\n2. 计算所有角的坐标 a,b,c,...h\n3. 计算 0,1,2,3...15 点的坐标。\n4. 使用二阶贝塞尔曲线和直线连接各点。\n5. 线条：使用向量计算计算出点的位置。然后跟上面的操作一样。\n\n画笔设置\n\n```java\n// 白色区域画笔\nmPaint = new Paint();\nmPaint.setColor(Color.WHITE);\nmPaint.setStyle(Paint.Style.FILL);\n\n// 线的画笔\nmLinePaint = new Paint();\nmLinePaint.setColor(getResources().getColor(R.color.mainYellow));\nmLinePaint.setStyle(Paint.Style.STROKE);\nmLinePaint.setStrokeWidth(LINE_WIDTH);\n```\n\n\n\n参考：[贝塞尔曲线][]\n\n[贝塞尔曲线]: https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/%5B06%5DPath_Bezier.md\n\n\n","source":"_posts/Android_自定义_View——智能床垫.md","raw":"---\ntitle: Android 自定义View——智能床垫\ndate: 2016-08-31 16:29:56\ntags: [自定义View, ObjectAnimator, Path]\ncategories: Android\nblog: true\n---\n\n\n\n实现一个如下图所示的自定义View。有点像女孩子的安尔乐。😀\n\n{% img \"/images/intelligent_bed.gif\" %}\n\n<!-- more  -->\n\n画图如下：\n\n{% img \"/images/intelligent_bed_design.png\" %}\n\n实现过程:\n\n1. 计算可以上下移动的四个点（如图：A, B, C, D）。\n2. 使用属性动画移动点的位置。\n3. 使用 Path 绘图，先绘制全部的白色区域，再绘制边边上的线。\n4. 圆角使用贝塞尔曲线\n\n### 属性动画\n\n自定义属性动画，\n\n```java\npublic class MyView {\n    private int head;\n    private ObjectAnimator[] mAnimators;\n    private final String[] PROPERTY = {\"head\", \"xxx\", \"xxx\", \"xxx\"};\n    public int getHead() {\n        return head;\n    }\n    public void setHead(int head) {\n        this.head = head;\n        invalidate();  // 设置之后，刷新 view\n    }\n    private void initView() {\n        mAnimators = new ObjectAnimator[4];\n        for (int i = 0; i < 4; i++) {\n            mAnimators[i] = new ObjectAnimator();\n            mAnimators[i].setDuration(600);\n            mAnimators[i].setTarget(this);\n            mAnimators[i].setPropertyName(PROPERTY[i]);\n        }\n    }\n    /**\n     * @param position 被赋值的位置\n     * @param value    -100 到 100\n     */\n    @Override\n    public void setValue(int position, int value) {\n        position &= 3;\n        int toHeight = value * getHeight() / 100 / 2;\n        ObjectAnimator animator = mAnimators[position];\n        animator.setIntValues(toHeight);\n        animator.start();\n    }\n}\n```\n\n### 绘图\n\n1. 计算四个点（A, B, C, D）的横坐标。 x0,x1,x2,x3\n2. 计算所有角的坐标 a,b,c,...h\n3. 计算 0,1,2,3...15 点的坐标。\n4. 使用二阶贝塞尔曲线和直线连接各点。\n5. 线条：使用向量计算计算出点的位置。然后跟上面的操作一样。\n\n画笔设置\n\n```java\n// 白色区域画笔\nmPaint = new Paint();\nmPaint.setColor(Color.WHITE);\nmPaint.setStyle(Paint.Style.FILL);\n\n// 线的画笔\nmLinePaint = new Paint();\nmLinePaint.setColor(getResources().getColor(R.color.mainYellow));\nmLinePaint.setStyle(Paint.Style.STROKE);\nmLinePaint.setStrokeWidth(LINE_WIDTH);\n```\n\n\n\n参考：[贝塞尔曲线][]\n\n[贝塞尔曲线]: https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/%5B06%5DPath_Bezier.md\n\n\n","slug":"Android_自定义_View——智能床垫","published":1,"updated":"2019-03-07T15:01:19.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64daj0003ha9ku8xebzl9","content":"<p>实现一个如下图所示的自定义View。有点像女孩子的安尔乐。😀</p>\n<img src=\"/images/intelligent_bed.gif\">\n<a id=\"more\"></a>\n<p>画图如下：</p>\n<img src=\"/images/intelligent_bed_design.png\">\n<p>实现过程:</p>\n<ol>\n<li>计算可以上下移动的四个点（如图：A, B, C, D）。</li>\n<li>使用属性动画移动点的位置。</li>\n<li>使用 Path 绘图，先绘制全部的白色区域，再绘制边边上的线。</li>\n<li>圆角使用贝塞尔曲线</li>\n</ol>\n<h3 id=\"属性动画\"><a href=\"#属性动画\" class=\"headerlink\" title=\"属性动画\"></a>属性动画</h3><p>自定义属性动画，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyView</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> head;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectAnimator[] mAnimators;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String[] PROPERTY = &#123;<span class=\"string\">\"head\"</span>, <span class=\"string\">\"xxx\"</span>, <span class=\"string\">\"xxx\"</span>, <span class=\"string\">\"xxx\"</span>&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getHead</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHead</span><span class=\"params\">(<span class=\"keyword\">int</span> head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.head = head;</span><br><span class=\"line\">        invalidate();  <span class=\"comment\">// 设置之后，刷新 view</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mAnimators = <span class=\"keyword\">new</span> ObjectAnimator[<span class=\"number\">4</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            mAnimators[i] = <span class=\"keyword\">new</span> ObjectAnimator();</span><br><span class=\"line\">            mAnimators[i].setDuration(<span class=\"number\">600</span>);</span><br><span class=\"line\">            mAnimators[i].setTarget(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            mAnimators[i].setPropertyName(PROPERTY[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> position 被赋值的位置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value    -100 到 100</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(<span class=\"keyword\">int</span> position, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        position &amp;= <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> toHeight = value * getHeight() / <span class=\"number\">100</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">        ObjectAnimator animator = mAnimators[position];</span><br><span class=\"line\">        animator.setIntValues(toHeight);</span><br><span class=\"line\">        animator.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"绘图\"><a href=\"#绘图\" class=\"headerlink\" title=\"绘图\"></a>绘图</h3><ol>\n<li>计算四个点（A, B, C, D）的横坐标。 x0,x1,x2,x3</li>\n<li>计算所有角的坐标 a,b,c,…h</li>\n<li>计算 0,1,2,3…15 点的坐标。</li>\n<li>使用二阶贝塞尔曲线和直线连接各点。</li>\n<li>线条：使用向量计算计算出点的位置。然后跟上面的操作一样。</li>\n</ol>\n<p>画笔设置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 白色区域画笔</span></span><br><span class=\"line\">mPaint = <span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\">mPaint.setColor(Color.WHITE);</span><br><span class=\"line\">mPaint.setStyle(Paint.Style.FILL);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线的画笔</span></span><br><span class=\"line\">mLinePaint = <span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\">mLinePaint.setColor(getResources().getColor(R.color.mainYellow));</span><br><span class=\"line\">mLinePaint.setStyle(Paint.Style.STROKE);</span><br><span class=\"line\">mLinePaint.setStrokeWidth(LINE_WIDTH);</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/%5B06%5DPath_Bezier.md\" target=\"_blank\" rel=\"noopener\">贝塞尔曲线</a></p>\n","site":{"data":{}},"excerpt":"<p>实现一个如下图所示的自定义View。有点像女孩子的安尔乐。😀</p>\n<img src=\"/images/intelligent_bed.gif\">","more":"<p>画图如下：</p>\n<img src=\"/images/intelligent_bed_design.png\">\n<p>实现过程:</p>\n<ol>\n<li>计算可以上下移动的四个点（如图：A, B, C, D）。</li>\n<li>使用属性动画移动点的位置。</li>\n<li>使用 Path 绘图，先绘制全部的白色区域，再绘制边边上的线。</li>\n<li>圆角使用贝塞尔曲线</li>\n</ol>\n<h3 id=\"属性动画\"><a href=\"#属性动画\" class=\"headerlink\" title=\"属性动画\"></a>属性动画</h3><p>自定义属性动画，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyView</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> head;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectAnimator[] mAnimators;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String[] PROPERTY = &#123;<span class=\"string\">\"head\"</span>, <span class=\"string\">\"xxx\"</span>, <span class=\"string\">\"xxx\"</span>, <span class=\"string\">\"xxx\"</span>&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getHead</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHead</span><span class=\"params\">(<span class=\"keyword\">int</span> head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.head = head;</span><br><span class=\"line\">        invalidate();  <span class=\"comment\">// 设置之后，刷新 view</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mAnimators = <span class=\"keyword\">new</span> ObjectAnimator[<span class=\"number\">4</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            mAnimators[i] = <span class=\"keyword\">new</span> ObjectAnimator();</span><br><span class=\"line\">            mAnimators[i].setDuration(<span class=\"number\">600</span>);</span><br><span class=\"line\">            mAnimators[i].setTarget(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            mAnimators[i].setPropertyName(PROPERTY[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> position 被赋值的位置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value    -100 到 100</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(<span class=\"keyword\">int</span> position, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        position &amp;= <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> toHeight = value * getHeight() / <span class=\"number\">100</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">        ObjectAnimator animator = mAnimators[position];</span><br><span class=\"line\">        animator.setIntValues(toHeight);</span><br><span class=\"line\">        animator.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"绘图\"><a href=\"#绘图\" class=\"headerlink\" title=\"绘图\"></a>绘图</h3><ol>\n<li>计算四个点（A, B, C, D）的横坐标。 x0,x1,x2,x3</li>\n<li>计算所有角的坐标 a,b,c,…h</li>\n<li>计算 0,1,2,3…15 点的坐标。</li>\n<li>使用二阶贝塞尔曲线和直线连接各点。</li>\n<li>线条：使用向量计算计算出点的位置。然后跟上面的操作一样。</li>\n</ol>\n<p>画笔设置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 白色区域画笔</span></span><br><span class=\"line\">mPaint = <span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\">mPaint.setColor(Color.WHITE);</span><br><span class=\"line\">mPaint.setStyle(Paint.Style.FILL);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线的画笔</span></span><br><span class=\"line\">mLinePaint = <span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\">mLinePaint.setColor(getResources().getColor(R.color.mainYellow));</span><br><span class=\"line\">mLinePaint.setStyle(Paint.Style.STROKE);</span><br><span class=\"line\">mLinePaint.setStrokeWidth(LINE_WIDTH);</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/%5B06%5DPath_Bezier.md\" target=\"_blank\" rel=\"noopener\">贝塞尔曲线</a></p>"},{"title":"ActiveAndroid 源码学习","date":"2016-08-27T03:03:40.000Z","blog":true,"_content":"\n\n\n## 分类\n\n- greenDAO 使用工具生成代码，效率高，减少编写重复的代码\n- ActiveAndroid、LitePal 使用反射创建代码，效率比较低，接口灵活\n\n<!-- more -->\n\n## 主要类\n\n### Configuration\n\n配置文件包括\n\n1. context: 上下文，使用 ApplicationContext, 会被强引用\n2. DatabaseName: Manifast.xml 中配置(\"AA_DB_NAME\")或者默认 \"Application.db\"\n3. DatabaseVersion: 默认为1\n4. SqlParser: 语法分析程序，默认 \"legacy\"\n5. mModelClasses: 存储对象类型，Manifast.xml 中配置(\"AA_MODELS\")，默认全局查找所有类，效率低\n6. mTypeSerializers: 类型转化工具类，默认支持 Calendar, File, SqlDate, Date。 可以自定义存储的转化，实现TypeSerializer接口，在 Manifast.xml 中配置(\"AA_SERIALIZERS\")\n\n### Cache\n\n1. 使用 LRU cache 存储 Java 实体对象，键为 `{TableName}@{id}`，默认大小 1024\n2. 通过类对象(? extends Model)，获取表信息\n3. 通过类对象，获取存储转化工具类\n3. 通过类对象获取表名\n4. 通过类名和ID 获取、添加、删除存储的实体对象\n5. 获取数据库，打开、关闭数据库\n\n### DataBaseHelper\n\n1. 继承自 SQLiteOpenHelper\n2. 如果数据库不存在，并且 Asserts 目录下有 dataBaseName.db 的文件，会复制到手机上\n3. 创建数据表的功能：把所有的子 Model 转成创建表sql，并创建数据表\n4. 获取 asserts/migrations 下的所有文件，按照升序排序，执行 (old, current] 版本的sql文件，如: 1.sql, 2.sql\n\n### Model\n\n1. 不能覆盖 getId() 方法，这是作为 key 使用的\n2. delete(): 用sql从数据库中删除，从cache移除，发送 ContentProvider 通知数据已经变化\n3. save(): 反射获取所有字段的名或者`@Column`定义的值和对应的值，如果mId 为空则 insert 到数据库，发送 ContentProvider 通知数据已经变化\n4. loadFromCursor(): 将数据库中获得的 cursor 使用反射解析成 Java 对象，并且存入到 Cache 中，如果有关联的对象，一并获取出来，\n5. getMany(): \n\n静态方法：\n\n1. `Model.delete(Class<? extends Model> type, long id)` 删除数据\n2. `Model.load(Class<? extends Model> type, long id)` 查询数据\n\n\n### ModelInfo\n\n1. mTableInfos 存放所有的 Model 信息，如果没有在 Manifast.xml 中配置，会遍历所有的类对象查找 Model 的子类\n2. mTypeSerializers 支持的存储类型，如果没有在 Manifast.xml 中配置，才会遍历搜索\n\n\n### TableInfo \n\n1. 跟 Model 一一对应\n2. 对传入的 Model类，会解析其中的 `@Table()`,`@Column`，包括子类的属性。得到<属性,表字段> 的键值对\n\n\n### ContentProvider\n\nContentProvider: 是一个内容提供者，类似于网站，为外界提供数据。数据的存储可以是 SP，数据库，文件等，可以跨运用\n\nUri: `Uri.parse(\"content://<authority>/<table>\")`\n\n在 onCreate 中初始化 ActiveAndroid，包括初始化 Cache\n\nURI_MATCHER & TYPE_CODES: 通过 uri 在 URI_MATCHER 获取 key, 再用 key 获取 TYPE_CODES 中的 Model 类对象\n\ngetType(): 与 Intent 的 Category 有关，返回类似 `vnd.com.binwin20.xxx.item/vnd.com.binwin20.TableName`\n\ninsert,query,delete,update 都是调用 Cache 处理数据。处理完之后，发送 notifyChange\n\n### query 指令\n\n使用状态机，使用 Delete, From, Join, Select, Set, Update 类，拼接成一个 Sql 字符串。  \n然后调用 SqlUtils -> Cache 执行 Sql 语句。\n\n{% img \"/images/active-android-state-flow.png\" %}\n\n","source":"_posts/ActiveAndroid-源码学习.md","raw":"---\ntitle: ActiveAndroid 源码学习\ndate: 2016-08-27 11:03:40\ntags: [源码, ActiveAndroid]\ncategories: 源码阅读\nblog: true\n---\n\n\n\n## 分类\n\n- greenDAO 使用工具生成代码，效率高，减少编写重复的代码\n- ActiveAndroid、LitePal 使用反射创建代码，效率比较低，接口灵活\n\n<!-- more -->\n\n## 主要类\n\n### Configuration\n\n配置文件包括\n\n1. context: 上下文，使用 ApplicationContext, 会被强引用\n2. DatabaseName: Manifast.xml 中配置(\"AA_DB_NAME\")或者默认 \"Application.db\"\n3. DatabaseVersion: 默认为1\n4. SqlParser: 语法分析程序，默认 \"legacy\"\n5. mModelClasses: 存储对象类型，Manifast.xml 中配置(\"AA_MODELS\")，默认全局查找所有类，效率低\n6. mTypeSerializers: 类型转化工具类，默认支持 Calendar, File, SqlDate, Date。 可以自定义存储的转化，实现TypeSerializer接口，在 Manifast.xml 中配置(\"AA_SERIALIZERS\")\n\n### Cache\n\n1. 使用 LRU cache 存储 Java 实体对象，键为 `{TableName}@{id}`，默认大小 1024\n2. 通过类对象(? extends Model)，获取表信息\n3. 通过类对象，获取存储转化工具类\n3. 通过类对象获取表名\n4. 通过类名和ID 获取、添加、删除存储的实体对象\n5. 获取数据库，打开、关闭数据库\n\n### DataBaseHelper\n\n1. 继承自 SQLiteOpenHelper\n2. 如果数据库不存在，并且 Asserts 目录下有 dataBaseName.db 的文件，会复制到手机上\n3. 创建数据表的功能：把所有的子 Model 转成创建表sql，并创建数据表\n4. 获取 asserts/migrations 下的所有文件，按照升序排序，执行 (old, current] 版本的sql文件，如: 1.sql, 2.sql\n\n### Model\n\n1. 不能覆盖 getId() 方法，这是作为 key 使用的\n2. delete(): 用sql从数据库中删除，从cache移除，发送 ContentProvider 通知数据已经变化\n3. save(): 反射获取所有字段的名或者`@Column`定义的值和对应的值，如果mId 为空则 insert 到数据库，发送 ContentProvider 通知数据已经变化\n4. loadFromCursor(): 将数据库中获得的 cursor 使用反射解析成 Java 对象，并且存入到 Cache 中，如果有关联的对象，一并获取出来，\n5. getMany(): \n\n静态方法：\n\n1. `Model.delete(Class<? extends Model> type, long id)` 删除数据\n2. `Model.load(Class<? extends Model> type, long id)` 查询数据\n\n\n### ModelInfo\n\n1. mTableInfos 存放所有的 Model 信息，如果没有在 Manifast.xml 中配置，会遍历所有的类对象查找 Model 的子类\n2. mTypeSerializers 支持的存储类型，如果没有在 Manifast.xml 中配置，才会遍历搜索\n\n\n### TableInfo \n\n1. 跟 Model 一一对应\n2. 对传入的 Model类，会解析其中的 `@Table()`,`@Column`，包括子类的属性。得到<属性,表字段> 的键值对\n\n\n### ContentProvider\n\nContentProvider: 是一个内容提供者，类似于网站，为外界提供数据。数据的存储可以是 SP，数据库，文件等，可以跨运用\n\nUri: `Uri.parse(\"content://<authority>/<table>\")`\n\n在 onCreate 中初始化 ActiveAndroid，包括初始化 Cache\n\nURI_MATCHER & TYPE_CODES: 通过 uri 在 URI_MATCHER 获取 key, 再用 key 获取 TYPE_CODES 中的 Model 类对象\n\ngetType(): 与 Intent 的 Category 有关，返回类似 `vnd.com.binwin20.xxx.item/vnd.com.binwin20.TableName`\n\ninsert,query,delete,update 都是调用 Cache 处理数据。处理完之后，发送 notifyChange\n\n### query 指令\n\n使用状态机，使用 Delete, From, Join, Select, Set, Update 类，拼接成一个 Sql 字符串。  \n然后调用 SqlUtils -> Cache 执行 Sql 语句。\n\n{% img \"/images/active-android-state-flow.png\" %}\n\n","slug":"ActiveAndroid-源码学习","published":1,"updated":"2019-03-07T15:01:19.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64daz0005ha9kp5ai605i","content":"<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><ul>\n<li>greenDAO 使用工具生成代码，效率高，减少编写重复的代码</li>\n<li>ActiveAndroid、LitePal 使用反射创建代码，效率比较低，接口灵活</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"主要类\"><a href=\"#主要类\" class=\"headerlink\" title=\"主要类\"></a>主要类</h2><h3 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h3><p>配置文件包括</p>\n<ol>\n<li>context: 上下文，使用 ApplicationContext, 会被强引用</li>\n<li>DatabaseName: Manifast.xml 中配置(“AA_DB_NAME”)或者默认 “Application.db”</li>\n<li>DatabaseVersion: 默认为1</li>\n<li>SqlParser: 语法分析程序，默认 “legacy”</li>\n<li>mModelClasses: 存储对象类型，Manifast.xml 中配置(“AA_MODELS”)，默认全局查找所有类，效率低</li>\n<li>mTypeSerializers: 类型转化工具类，默认支持 Calendar, File, SqlDate, Date。 可以自定义存储的转化，实现TypeSerializer接口，在 Manifast.xml 中配置(“AA_SERIALIZERS”)</li>\n</ol>\n<h3 id=\"Cache\"><a href=\"#Cache\" class=\"headerlink\" title=\"Cache\"></a>Cache</h3><ol>\n<li>使用 LRU cache 存储 Java 实体对象，键为 <code>{TableName}@{id}</code>，默认大小 1024</li>\n<li>通过类对象(? extends Model)，获取表信息</li>\n<li>通过类对象，获取存储转化工具类</li>\n<li>通过类对象获取表名</li>\n<li>通过类名和ID 获取、添加、删除存储的实体对象</li>\n<li>获取数据库，打开、关闭数据库</li>\n</ol>\n<h3 id=\"DataBaseHelper\"><a href=\"#DataBaseHelper\" class=\"headerlink\" title=\"DataBaseHelper\"></a>DataBaseHelper</h3><ol>\n<li>继承自 SQLiteOpenHelper</li>\n<li>如果数据库不存在，并且 Asserts 目录下有 dataBaseName.db 的文件，会复制到手机上</li>\n<li>创建数据表的功能：把所有的子 Model 转成创建表sql，并创建数据表</li>\n<li>获取 asserts/migrations 下的所有文件，按照升序排序，执行 (old, current] 版本的sql文件，如: 1.sql, 2.sql</li>\n</ol>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><ol>\n<li>不能覆盖 getId() 方法，这是作为 key 使用的</li>\n<li>delete(): 用sql从数据库中删除，从cache移除，发送 ContentProvider 通知数据已经变化</li>\n<li>save(): 反射获取所有字段的名或者<code>@Column</code>定义的值和对应的值，如果mId 为空则 insert 到数据库，发送 ContentProvider 通知数据已经变化</li>\n<li>loadFromCursor(): 将数据库中获得的 cursor 使用反射解析成 Java 对象，并且存入到 Cache 中，如果有关联的对象，一并获取出来，</li>\n<li>getMany(): </li>\n</ol>\n<p>静态方法：</p>\n<ol>\n<li><code>Model.delete(Class&lt;? extends Model&gt; type, long id)</code> 删除数据</li>\n<li><code>Model.load(Class&lt;? extends Model&gt; type, long id)</code> 查询数据</li>\n</ol>\n<h3 id=\"ModelInfo\"><a href=\"#ModelInfo\" class=\"headerlink\" title=\"ModelInfo\"></a>ModelInfo</h3><ol>\n<li>mTableInfos 存放所有的 Model 信息，如果没有在 Manifast.xml 中配置，会遍历所有的类对象查找 Model 的子类</li>\n<li>mTypeSerializers 支持的存储类型，如果没有在 Manifast.xml 中配置，才会遍历搜索</li>\n</ol>\n<h3 id=\"TableInfo\"><a href=\"#TableInfo\" class=\"headerlink\" title=\"TableInfo\"></a>TableInfo</h3><ol>\n<li>跟 Model 一一对应</li>\n<li>对传入的 Model类，会解析其中的 <code>@Table()</code>,<code>@Column</code>，包括子类的属性。得到&lt;属性,表字段&gt; 的键值对</li>\n</ol>\n<h3 id=\"ContentProvider\"><a href=\"#ContentProvider\" class=\"headerlink\" title=\"ContentProvider\"></a>ContentProvider</h3><p>ContentProvider: 是一个内容提供者，类似于网站，为外界提供数据。数据的存储可以是 SP，数据库，文件等，可以跨运用</p>\n<p>Uri: <code>Uri.parse(&quot;content://&lt;authority&gt;/&lt;table&gt;&quot;)</code></p>\n<p>在 onCreate 中初始化 ActiveAndroid，包括初始化 Cache</p>\n<p>URI_MATCHER &amp; TYPE_CODES: 通过 uri 在 URI_MATCHER 获取 key, 再用 key 获取 TYPE_CODES 中的 Model 类对象</p>\n<p>getType(): 与 Intent 的 Category 有关，返回类似 <code>vnd.com.binwin20.xxx.item/vnd.com.binwin20.TableName</code></p>\n<p>insert,query,delete,update 都是调用 Cache 处理数据。处理完之后，发送 notifyChange</p>\n<h3 id=\"query-指令\"><a href=\"#query-指令\" class=\"headerlink\" title=\"query 指令\"></a>query 指令</h3><p>使用状态机，使用 Delete, From, Join, Select, Set, Update 类，拼接成一个 Sql 字符串。<br>然后调用 SqlUtils -&gt; Cache 执行 Sql 语句。</p>\n<img src=\"/images/active-android-state-flow.png\">\n","site":{"data":{}},"excerpt":"<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><ul>\n<li>greenDAO 使用工具生成代码，效率高，减少编写重复的代码</li>\n<li>ActiveAndroid、LitePal 使用反射创建代码，效率比较低，接口灵活</li>\n</ul>","more":"<h2 id=\"主要类\"><a href=\"#主要类\" class=\"headerlink\" title=\"主要类\"></a>主要类</h2><h3 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h3><p>配置文件包括</p>\n<ol>\n<li>context: 上下文，使用 ApplicationContext, 会被强引用</li>\n<li>DatabaseName: Manifast.xml 中配置(“AA_DB_NAME”)或者默认 “Application.db”</li>\n<li>DatabaseVersion: 默认为1</li>\n<li>SqlParser: 语法分析程序，默认 “legacy”</li>\n<li>mModelClasses: 存储对象类型，Manifast.xml 中配置(“AA_MODELS”)，默认全局查找所有类，效率低</li>\n<li>mTypeSerializers: 类型转化工具类，默认支持 Calendar, File, SqlDate, Date。 可以自定义存储的转化，实现TypeSerializer接口，在 Manifast.xml 中配置(“AA_SERIALIZERS”)</li>\n</ol>\n<h3 id=\"Cache\"><a href=\"#Cache\" class=\"headerlink\" title=\"Cache\"></a>Cache</h3><ol>\n<li>使用 LRU cache 存储 Java 实体对象，键为 <code>{TableName}@{id}</code>，默认大小 1024</li>\n<li>通过类对象(? extends Model)，获取表信息</li>\n<li>通过类对象，获取存储转化工具类</li>\n<li>通过类对象获取表名</li>\n<li>通过类名和ID 获取、添加、删除存储的实体对象</li>\n<li>获取数据库，打开、关闭数据库</li>\n</ol>\n<h3 id=\"DataBaseHelper\"><a href=\"#DataBaseHelper\" class=\"headerlink\" title=\"DataBaseHelper\"></a>DataBaseHelper</h3><ol>\n<li>继承自 SQLiteOpenHelper</li>\n<li>如果数据库不存在，并且 Asserts 目录下有 dataBaseName.db 的文件，会复制到手机上</li>\n<li>创建数据表的功能：把所有的子 Model 转成创建表sql，并创建数据表</li>\n<li>获取 asserts/migrations 下的所有文件，按照升序排序，执行 (old, current] 版本的sql文件，如: 1.sql, 2.sql</li>\n</ol>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><ol>\n<li>不能覆盖 getId() 方法，这是作为 key 使用的</li>\n<li>delete(): 用sql从数据库中删除，从cache移除，发送 ContentProvider 通知数据已经变化</li>\n<li>save(): 反射获取所有字段的名或者<code>@Column</code>定义的值和对应的值，如果mId 为空则 insert 到数据库，发送 ContentProvider 通知数据已经变化</li>\n<li>loadFromCursor(): 将数据库中获得的 cursor 使用反射解析成 Java 对象，并且存入到 Cache 中，如果有关联的对象，一并获取出来，</li>\n<li>getMany(): </li>\n</ol>\n<p>静态方法：</p>\n<ol>\n<li><code>Model.delete(Class&lt;? extends Model&gt; type, long id)</code> 删除数据</li>\n<li><code>Model.load(Class&lt;? extends Model&gt; type, long id)</code> 查询数据</li>\n</ol>\n<h3 id=\"ModelInfo\"><a href=\"#ModelInfo\" class=\"headerlink\" title=\"ModelInfo\"></a>ModelInfo</h3><ol>\n<li>mTableInfos 存放所有的 Model 信息，如果没有在 Manifast.xml 中配置，会遍历所有的类对象查找 Model 的子类</li>\n<li>mTypeSerializers 支持的存储类型，如果没有在 Manifast.xml 中配置，才会遍历搜索</li>\n</ol>\n<h3 id=\"TableInfo\"><a href=\"#TableInfo\" class=\"headerlink\" title=\"TableInfo\"></a>TableInfo</h3><ol>\n<li>跟 Model 一一对应</li>\n<li>对传入的 Model类，会解析其中的 <code>@Table()</code>,<code>@Column</code>，包括子类的属性。得到&lt;属性,表字段&gt; 的键值对</li>\n</ol>\n<h3 id=\"ContentProvider\"><a href=\"#ContentProvider\" class=\"headerlink\" title=\"ContentProvider\"></a>ContentProvider</h3><p>ContentProvider: 是一个内容提供者，类似于网站，为外界提供数据。数据的存储可以是 SP，数据库，文件等，可以跨运用</p>\n<p>Uri: <code>Uri.parse(&quot;content://&lt;authority&gt;/&lt;table&gt;&quot;)</code></p>\n<p>在 onCreate 中初始化 ActiveAndroid，包括初始化 Cache</p>\n<p>URI_MATCHER &amp; TYPE_CODES: 通过 uri 在 URI_MATCHER 获取 key, 再用 key 获取 TYPE_CODES 中的 Model 类对象</p>\n<p>getType(): 与 Intent 的 Category 有关，返回类似 <code>vnd.com.binwin20.xxx.item/vnd.com.binwin20.TableName</code></p>\n<p>insert,query,delete,update 都是调用 Cache 处理数据。处理完之后，发送 notifyChange</p>\n<h3 id=\"query-指令\"><a href=\"#query-指令\" class=\"headerlink\" title=\"query 指令\"></a>query 指令</h3><p>使用状态机，使用 Delete, From, Join, Select, Set, Update 类，拼接成一个 Sql 字符串。<br>然后调用 SqlUtils -&gt; Cache 执行 Sql 语句。</p>\n<img src=\"/images/active-android-state-flow.png\">"},{"title":"CMake 构建动态库没有生成so文件","date":"2017-02-22T12:48:57.000Z","blog":true,"_content":"\n\n\n最近开始学 NDK 编程，踩了不少的坑。\n\n在 Android Studio 中生成 so 文件又两种方式，一种使用 ndk-build，一种使用 CMake。\n\n使用 ndk-build 可以在 Android.mk 和 Application.mk 文件中，设置编译属性和依赖等。\n每一次编译项目都需要手动执行 `ndk-build` 命令才能生成 so 文件，如果经常修改 C 代码，每次都要重新执行命令，很麻烦。\n也可以在 Gradle 中增加 ndk 配置，但是这种方式有缺陷。Android Studio 创建项目时推荐使用第二种方式：使用 CMake。\n\nCMake 是一个跨平台的自动化建构系统，使用 CMakeLists.txt 来描述构建过程。可以产生标准的构建文件，如 Unix 的 Makefile 或Windows Visual C++ 的 projects/workspaces。\n\n于是乎开始了 CMake 的踩坑之旅。找了一本 [CMake 实践 PDF][] 开始学习。\n\n<!-- more -->\n\n在构建动态库时生成不了 so 文件。检查了好几遍，代码和配置跟 PDF 中的一模一样。输出如下：\n\n```bash\nMacBook-Pro:build binwin20$ make\nScanning dependencies of target lib\n[ 50%] Building C object lib/CMakeFiles/lib.dir/hello.c.o\n[100%] Linking C shared library liblib.dylib\n[100%] Built target lib\n```\n\n看到 liblib.dylib 文件，挺奇怪的，为啥不是 so 文件呢？然后 **在 Sublime 的侧边栏中**找了一下没找到 liblib.dylib 文件，猜想这可能是个中间文件。\n网上各种搜就是找不到答案。最后猜想可能是 Mac 编译的不是 so 文件。于是乎启动 Docker 打开 Ubuntu 系统，把项目文件夹直接挂载到 Ubuntu 中，真是方便。下载 CMake 花了不少时间。\n执行 make 命令之后，输出如下：\n\n```bash\nroot@3eb73a8c9dcc:/myDocker/cmake/t3/build# make\nScanning dependencies of target lib\n[ 50%] Building C object lib/CMakeFiles/lib.dir/hello.c.o\n[100%] Linking C shared library liblib.so\n[100%] Built target lib\n```\n\n发现 Ubuntu 中有生成 so 文件，**在 Sublime 的侧边栏中** 还是没看到 so 文件，坑啊。又继续找了好久，没找到原因，然后猜想，会不会生成到其他地方了呢？于是执行了一下 find，\n\n```bash\nroot@3eb73a8c9dcc:/myDocker/cmake/t3/build# find      \n.\n./cmake_install.cmake\n./CMakeCache.txt\n...\n./lib/CMakeFiles/progress.marks\n./lib/liblib.so\n./lib/Makefile\n./Makefile\n```\n\n看到了 liblib.so。这人品，简直要爆了，要不是项目名 lib 字母排在 CMakeFiles 后面，指不定还要找多久才能找到这个文件呢。\n\n然后看看 **Sublime 的侧边栏** 还是没有 so 文件，一脸蒙蔽。难道 Docker 中的文件都还在虚拟机内存中，Mac中看不到？然后在 Mac 中终端里看了一下，有这个文件啊。。。\n\n最后在 Sublime 中 `command + ,`，果然找到了原因。要是早点让我看到 liblib.dylib，也不至于被坑这么久啊。\n\n```json\n{\n    \"folder_exclude_patterns\": [\".svn\", \".git\", \".hg\", \"CVS\"],\n    \"file_exclude_patterns\": [\"*.pyc\", \"*.pyo\", \"*.exe\", \"*.dll\", \"*.obj\",\"*.o\", \"*.a\", \"*.lib\", \"*.so\", \"*.dylib\", \"*.ncb\", \"*.sdf\", \"*.suo\", \"*.pdb\", \"*.idb\", \".DS_Store\", \"*.class\", \"*.psd\", \"*.db\", \"*.sublime-workspace\"]\n}\n```\n\n有时间一定要把《程序员的自我修养》看一遍。\n\n\n\n\n\n\n[CMake 实践 PDF]: http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf","source":"_posts/CMake-构建动态库没有生成so文件.md","raw":"---\ntitle: CMake 构建动态库没有生成so文件\ndate: 2017-02-22 20:48:57\ntags: [CMake, 踩坑, Sublime]\ncategories: NDK\nblog: true\n---\n\n\n\n最近开始学 NDK 编程，踩了不少的坑。\n\n在 Android Studio 中生成 so 文件又两种方式，一种使用 ndk-build，一种使用 CMake。\n\n使用 ndk-build 可以在 Android.mk 和 Application.mk 文件中，设置编译属性和依赖等。\n每一次编译项目都需要手动执行 `ndk-build` 命令才能生成 so 文件，如果经常修改 C 代码，每次都要重新执行命令，很麻烦。\n也可以在 Gradle 中增加 ndk 配置，但是这种方式有缺陷。Android Studio 创建项目时推荐使用第二种方式：使用 CMake。\n\nCMake 是一个跨平台的自动化建构系统，使用 CMakeLists.txt 来描述构建过程。可以产生标准的构建文件，如 Unix 的 Makefile 或Windows Visual C++ 的 projects/workspaces。\n\n于是乎开始了 CMake 的踩坑之旅。找了一本 [CMake 实践 PDF][] 开始学习。\n\n<!-- more -->\n\n在构建动态库时生成不了 so 文件。检查了好几遍，代码和配置跟 PDF 中的一模一样。输出如下：\n\n```bash\nMacBook-Pro:build binwin20$ make\nScanning dependencies of target lib\n[ 50%] Building C object lib/CMakeFiles/lib.dir/hello.c.o\n[100%] Linking C shared library liblib.dylib\n[100%] Built target lib\n```\n\n看到 liblib.dylib 文件，挺奇怪的，为啥不是 so 文件呢？然后 **在 Sublime 的侧边栏中**找了一下没找到 liblib.dylib 文件，猜想这可能是个中间文件。\n网上各种搜就是找不到答案。最后猜想可能是 Mac 编译的不是 so 文件。于是乎启动 Docker 打开 Ubuntu 系统，把项目文件夹直接挂载到 Ubuntu 中，真是方便。下载 CMake 花了不少时间。\n执行 make 命令之后，输出如下：\n\n```bash\nroot@3eb73a8c9dcc:/myDocker/cmake/t3/build# make\nScanning dependencies of target lib\n[ 50%] Building C object lib/CMakeFiles/lib.dir/hello.c.o\n[100%] Linking C shared library liblib.so\n[100%] Built target lib\n```\n\n发现 Ubuntu 中有生成 so 文件，**在 Sublime 的侧边栏中** 还是没看到 so 文件，坑啊。又继续找了好久，没找到原因，然后猜想，会不会生成到其他地方了呢？于是执行了一下 find，\n\n```bash\nroot@3eb73a8c9dcc:/myDocker/cmake/t3/build# find      \n.\n./cmake_install.cmake\n./CMakeCache.txt\n...\n./lib/CMakeFiles/progress.marks\n./lib/liblib.so\n./lib/Makefile\n./Makefile\n```\n\n看到了 liblib.so。这人品，简直要爆了，要不是项目名 lib 字母排在 CMakeFiles 后面，指不定还要找多久才能找到这个文件呢。\n\n然后看看 **Sublime 的侧边栏** 还是没有 so 文件，一脸蒙蔽。难道 Docker 中的文件都还在虚拟机内存中，Mac中看不到？然后在 Mac 中终端里看了一下，有这个文件啊。。。\n\n最后在 Sublime 中 `command + ,`，果然找到了原因。要是早点让我看到 liblib.dylib，也不至于被坑这么久啊。\n\n```json\n{\n    \"folder_exclude_patterns\": [\".svn\", \".git\", \".hg\", \"CVS\"],\n    \"file_exclude_patterns\": [\"*.pyc\", \"*.pyo\", \"*.exe\", \"*.dll\", \"*.obj\",\"*.o\", \"*.a\", \"*.lib\", \"*.so\", \"*.dylib\", \"*.ncb\", \"*.sdf\", \"*.suo\", \"*.pdb\", \"*.idb\", \".DS_Store\", \"*.class\", \"*.psd\", \"*.db\", \"*.sublime-workspace\"]\n}\n```\n\n有时间一定要把《程序员的自我修养》看一遍。\n\n\n\n\n\n\n[CMake 实践 PDF]: http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf","slug":"CMake-构建动态库没有生成so文件","published":1,"updated":"2019-03-07T15:01:19.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64db30006ha9koqksp55a","content":"<p>最近开始学 NDK 编程，踩了不少的坑。</p>\n<p>在 Android Studio 中生成 so 文件又两种方式，一种使用 ndk-build，一种使用 CMake。</p>\n<p>使用 ndk-build 可以在 Android.mk 和 Application.mk 文件中，设置编译属性和依赖等。<br>每一次编译项目都需要手动执行 <code>ndk-build</code> 命令才能生成 so 文件，如果经常修改 C 代码，每次都要重新执行命令，很麻烦。<br>也可以在 Gradle 中增加 ndk 配置，但是这种方式有缺陷。Android Studio 创建项目时推荐使用第二种方式：使用 CMake。</p>\n<p>CMake 是一个跨平台的自动化建构系统，使用 CMakeLists.txt 来描述构建过程。可以产生标准的构建文件，如 Unix 的 Makefile 或Windows Visual C++ 的 projects/workspaces。</p>\n<p>于是乎开始了 CMake 的踩坑之旅。找了一本 <a href=\"http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf\" target=\"_blank\" rel=\"noopener\">CMake 实践 PDF</a> 开始学习。</p>\n<a id=\"more\"></a>\n<p>在构建动态库时生成不了 so 文件。检查了好几遍，代码和配置跟 PDF 中的一模一样。输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MacBook-Pro:build binwin20$ make</span><br><span class=\"line\">Scanning dependencies of target lib</span><br><span class=\"line\">[ 50%] Building C object lib/CMakeFiles/lib.dir/hello.c.o</span><br><span class=\"line\">[100%] Linking C shared library liblib.dylib</span><br><span class=\"line\">[100%] Built target lib</span><br></pre></td></tr></table></figure>\n<p>看到 liblib.dylib 文件，挺奇怪的，为啥不是 so 文件呢？然后 <strong>在 Sublime 的侧边栏中</strong>找了一下没找到 liblib.dylib 文件，猜想这可能是个中间文件。<br>网上各种搜就是找不到答案。最后猜想可能是 Mac 编译的不是 so 文件。于是乎启动 Docker 打开 Ubuntu 系统，把项目文件夹直接挂载到 Ubuntu 中，真是方便。下载 CMake 花了不少时间。<br>执行 make 命令之后，输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@3eb73a8c9dcc:/myDocker/cmake/t3/build<span class=\"comment\"># make</span></span><br><span class=\"line\">Scanning dependencies of target lib</span><br><span class=\"line\">[ 50%] Building C object lib/CMakeFiles/lib.dir/hello.c.o</span><br><span class=\"line\">[100%] Linking C shared library liblib.so</span><br><span class=\"line\">[100%] Built target lib</span><br></pre></td></tr></table></figure>\n<p>发现 Ubuntu 中有生成 so 文件，<strong>在 Sublime 的侧边栏中</strong> 还是没看到 so 文件，坑啊。又继续找了好久，没找到原因，然后猜想，会不会生成到其他地方了呢？于是执行了一下 find，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@3eb73a8c9dcc:/myDocker/cmake/t3/build<span class=\"comment\"># find      </span></span><br><span class=\"line\">.</span><br><span class=\"line\">./cmake_install.cmake</span><br><span class=\"line\">./CMakeCache.txt</span><br><span class=\"line\">...</span><br><span class=\"line\">./lib/CMakeFiles/progress.marks</span><br><span class=\"line\">./lib/liblib.so</span><br><span class=\"line\">./lib/Makefile</span><br><span class=\"line\">./Makefile</span><br></pre></td></tr></table></figure>\n<p>看到了 liblib.so。这人品，简直要爆了，要不是项目名 lib 字母排在 CMakeFiles 后面，指不定还要找多久才能找到这个文件呢。</p>\n<p>然后看看 <strong>Sublime 的侧边栏</strong> 还是没有 so 文件，一脸蒙蔽。难道 Docker 中的文件都还在虚拟机内存中，Mac中看不到？然后在 Mac 中终端里看了一下，有这个文件啊。。。</p>\n<p>最后在 Sublime 中 <code>command + ,</code>，果然找到了原因。要是早点让我看到 liblib.dylib，也不至于被坑这么久啊。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"folder_exclude_patterns\"</span>: [<span class=\"string\">\".svn\"</span>, <span class=\"string\">\".git\"</span>, <span class=\"string\">\".hg\"</span>, <span class=\"string\">\"CVS\"</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"file_exclude_patterns\"</span>: [<span class=\"string\">\"*.pyc\"</span>, <span class=\"string\">\"*.pyo\"</span>, <span class=\"string\">\"*.exe\"</span>, <span class=\"string\">\"*.dll\"</span>, <span class=\"string\">\"*.obj\"</span>,<span class=\"string\">\"*.o\"</span>, <span class=\"string\">\"*.a\"</span>, <span class=\"string\">\"*.lib\"</span>, <span class=\"string\">\"*.so\"</span>, <span class=\"string\">\"*.dylib\"</span>, <span class=\"string\">\"*.ncb\"</span>, <span class=\"string\">\"*.sdf\"</span>, <span class=\"string\">\"*.suo\"</span>, <span class=\"string\">\"*.pdb\"</span>, <span class=\"string\">\"*.idb\"</span>, <span class=\"string\">\".DS_Store\"</span>, <span class=\"string\">\"*.class\"</span>, <span class=\"string\">\"*.psd\"</span>, <span class=\"string\">\"*.db\"</span>, <span class=\"string\">\"*.sublime-workspace\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有时间一定要把《程序员的自我修养》看一遍。</p>\n","site":{"data":{}},"excerpt":"<p>最近开始学 NDK 编程，踩了不少的坑。</p>\n<p>在 Android Studio 中生成 so 文件又两种方式，一种使用 ndk-build，一种使用 CMake。</p>\n<p>使用 ndk-build 可以在 Android.mk 和 Application.mk 文件中，设置编译属性和依赖等。<br>每一次编译项目都需要手动执行 <code>ndk-build</code> 命令才能生成 so 文件，如果经常修改 C 代码，每次都要重新执行命令，很麻烦。<br>也可以在 Gradle 中增加 ndk 配置，但是这种方式有缺陷。Android Studio 创建项目时推荐使用第二种方式：使用 CMake。</p>\n<p>CMake 是一个跨平台的自动化建构系统，使用 CMakeLists.txt 来描述构建过程。可以产生标准的构建文件，如 Unix 的 Makefile 或Windows Visual C++ 的 projects/workspaces。</p>\n<p>于是乎开始了 CMake 的踩坑之旅。找了一本 <a href=\"http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf\" target=\"_blank\" rel=\"noopener\">CMake 实践 PDF</a> 开始学习。</p>","more":"<p>在构建动态库时生成不了 so 文件。检查了好几遍，代码和配置跟 PDF 中的一模一样。输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MacBook-Pro:build binwin20$ make</span><br><span class=\"line\">Scanning dependencies of target lib</span><br><span class=\"line\">[ 50%] Building C object lib/CMakeFiles/lib.dir/hello.c.o</span><br><span class=\"line\">[100%] Linking C shared library liblib.dylib</span><br><span class=\"line\">[100%] Built target lib</span><br></pre></td></tr></table></figure>\n<p>看到 liblib.dylib 文件，挺奇怪的，为啥不是 so 文件呢？然后 <strong>在 Sublime 的侧边栏中</strong>找了一下没找到 liblib.dylib 文件，猜想这可能是个中间文件。<br>网上各种搜就是找不到答案。最后猜想可能是 Mac 编译的不是 so 文件。于是乎启动 Docker 打开 Ubuntu 系统，把项目文件夹直接挂载到 Ubuntu 中，真是方便。下载 CMake 花了不少时间。<br>执行 make 命令之后，输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@3eb73a8c9dcc:/myDocker/cmake/t3/build<span class=\"comment\"># make</span></span><br><span class=\"line\">Scanning dependencies of target lib</span><br><span class=\"line\">[ 50%] Building C object lib/CMakeFiles/lib.dir/hello.c.o</span><br><span class=\"line\">[100%] Linking C shared library liblib.so</span><br><span class=\"line\">[100%] Built target lib</span><br></pre></td></tr></table></figure>\n<p>发现 Ubuntu 中有生成 so 文件，<strong>在 Sublime 的侧边栏中</strong> 还是没看到 so 文件，坑啊。又继续找了好久，没找到原因，然后猜想，会不会生成到其他地方了呢？于是执行了一下 find，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@3eb73a8c9dcc:/myDocker/cmake/t3/build<span class=\"comment\"># find      </span></span><br><span class=\"line\">.</span><br><span class=\"line\">./cmake_install.cmake</span><br><span class=\"line\">./CMakeCache.txt</span><br><span class=\"line\">...</span><br><span class=\"line\">./lib/CMakeFiles/progress.marks</span><br><span class=\"line\">./lib/liblib.so</span><br><span class=\"line\">./lib/Makefile</span><br><span class=\"line\">./Makefile</span><br></pre></td></tr></table></figure>\n<p>看到了 liblib.so。这人品，简直要爆了，要不是项目名 lib 字母排在 CMakeFiles 后面，指不定还要找多久才能找到这个文件呢。</p>\n<p>然后看看 <strong>Sublime 的侧边栏</strong> 还是没有 so 文件，一脸蒙蔽。难道 Docker 中的文件都还在虚拟机内存中，Mac中看不到？然后在 Mac 中终端里看了一下，有这个文件啊。。。</p>\n<p>最后在 Sublime 中 <code>command + ,</code>，果然找到了原因。要是早点让我看到 liblib.dylib，也不至于被坑这么久啊。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"folder_exclude_patterns\"</span>: [<span class=\"string\">\".svn\"</span>, <span class=\"string\">\".git\"</span>, <span class=\"string\">\".hg\"</span>, <span class=\"string\">\"CVS\"</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"file_exclude_patterns\"</span>: [<span class=\"string\">\"*.pyc\"</span>, <span class=\"string\">\"*.pyo\"</span>, <span class=\"string\">\"*.exe\"</span>, <span class=\"string\">\"*.dll\"</span>, <span class=\"string\">\"*.obj\"</span>,<span class=\"string\">\"*.o\"</span>, <span class=\"string\">\"*.a\"</span>, <span class=\"string\">\"*.lib\"</span>, <span class=\"string\">\"*.so\"</span>, <span class=\"string\">\"*.dylib\"</span>, <span class=\"string\">\"*.ncb\"</span>, <span class=\"string\">\"*.sdf\"</span>, <span class=\"string\">\"*.suo\"</span>, <span class=\"string\">\"*.pdb\"</span>, <span class=\"string\">\"*.idb\"</span>, <span class=\"string\">\".DS_Store\"</span>, <span class=\"string\">\"*.class\"</span>, <span class=\"string\">\"*.psd\"</span>, <span class=\"string\">\"*.db\"</span>, <span class=\"string\">\"*.sublime-workspace\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有时间一定要把《程序员的自我修养》看一遍。</p>"},{"title":"Codeforces #516 dev2 C: Oh Those Palindromes","date":"2018-10-25T13:09:01.000Z","blog":true,"_content":"\n\n\n#### 题目链接\n\nhttp://codeforces.com/contest/1064/problem/C\n\n#### 题意\n\n给你一串字符串，让你排序，使最长回文子串最多。回文子串就是，字符串中截取一小段，这个小段正读倒回来读，都是相同的字符串。\n\n#### 解法\n\n<!-- more -->\n\n凭感觉，相同的字符放一起，能构成更多的回文串。看数据量，给的是 100000，快排时间不够，基数排序可以解决。\n\n#### 代码\n\n```cpp\n#include <cstdio>\n\nint main(int argc, char const *argv[])\n{\n    //freopen(\"C.txt\", \"r\", stdin);\n    int n;\n    char a[100009];\n    int count[256];\n    scanf(\"%d\", &n);\n    scanf(\"%s\", a);\n    for (int i=0; i<n; i++) \n    {\n        count[a[i]] ++;\n    }\n    for(int i=0; i<256; i++)\n    {\n        while (count[i] > 0) \n        {\n            printf(\"%c\", i);\n            --count[i];\n        }\n    }\n    printf(\"\\n\");\n    return 0;\n}\n```\n\n","source":"_posts/Codeforces_516_dev2_C.md","raw":"---\ntitle: \"Codeforces #516 dev2 C: Oh Those Palindromes\"\ndate: 2018-10-25 21:09:01\ncategories: Algorithm\ntags: [Algorithm, Codeforces]\nblog: true\n---\n\n\n\n#### 题目链接\n\nhttp://codeforces.com/contest/1064/problem/C\n\n#### 题意\n\n给你一串字符串，让你排序，使最长回文子串最多。回文子串就是，字符串中截取一小段，这个小段正读倒回来读，都是相同的字符串。\n\n#### 解法\n\n<!-- more -->\n\n凭感觉，相同的字符放一起，能构成更多的回文串。看数据量，给的是 100000，快排时间不够，基数排序可以解决。\n\n#### 代码\n\n```cpp\n#include <cstdio>\n\nint main(int argc, char const *argv[])\n{\n    //freopen(\"C.txt\", \"r\", stdin);\n    int n;\n    char a[100009];\n    int count[256];\n    scanf(\"%d\", &n);\n    scanf(\"%s\", a);\n    for (int i=0; i<n; i++) \n    {\n        count[a[i]] ++;\n    }\n    for(int i=0; i<256; i++)\n    {\n        while (count[i] > 0) \n        {\n            printf(\"%c\", i);\n            --count[i];\n        }\n    }\n    printf(\"\\n\");\n    return 0;\n}\n```\n\n","slug":"Codeforces_516_dev2_C","published":1,"updated":"2019-03-07T15:01:19.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64dbf0007ha9kwkc479ml","content":"<h4 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h4><p><a href=\"http://codeforces.com/contest/1064/problem/C\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/1064/problem/C</a></p>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>给你一串字符串，让你排序，使最长回文子串最多。回文子串就是，字符串中截取一小段，这个小段正读倒回来读，都是相同的字符串。</p>\n<h4 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h4><a id=\"more\"></a>\n<p>凭感觉，相同的字符放一起，能构成更多的回文串。看数据量，给的是 100000，快排时间不够，基数排序可以解决。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"C.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> a[<span class=\"number\">100009</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count[<span class=\"number\">256</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, a);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        count[a[i]] ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">256</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count[i] &gt; <span class=\"number\">0</span>) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, i);</span><br><span class=\"line\">            --count[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h4><p><a href=\"http://codeforces.com/contest/1064/problem/C\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/1064/problem/C</a></p>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>给你一串字符串，让你排序，使最长回文子串最多。回文子串就是，字符串中截取一小段，这个小段正读倒回来读，都是相同的字符串。</p>\n<h4 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h4>","more":"<p>凭感觉，相同的字符放一起，能构成更多的回文串。看数据量，给的是 100000，快排时间不够，基数排序可以解决。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"C.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> a[<span class=\"number\">100009</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count[<span class=\"number\">256</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, a);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        count[a[i]] ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">256</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count[i] &gt; <span class=\"number\">0</span>) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, i);</span><br><span class=\"line\">            --count[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Codeforces #516 dev2 D: Labyrinth","date":"2018-10-25T13:23:03.000Z","blog":true,"_content":"\n#### 题目链接\n\nhttp://codeforces.com/contest/1064/problem/D\n\n#### 题意\n\n你在玩一个走一个迷宫，可以向上、向下走无限次，只能向左走 x 次，向右走 y 次，* 号的点是不能走的。问：能够到达的格子数是多少？\n\n格子大小是 n 行 m 列，起始位置是 c,r (从 1 开始)\n\n#### 解法\n\n<!-- more -->\n\n一般的 BFS。\n\n开始的时候，把起点所在的列全部加入队列并标记为已经访问。\n\n从队列中取出一个点，如果能向左走，并且左边的列没有被标记，把这一列都加入队列并标记已经访问，向左走的次数减一，同理处理右边。\n\n计算访问过的点。\n\n#### 代码\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n#include <deque>\n\nusing namespace std;\n\n#define N 2009\n\nchar map[N][N];\nbool visit[N][N];\nint n,m;\nint x,y;\nint l,r;\n\nstruct Node\n{\n    int x,y,l,r;\n    Node(int x, int y, int l, int r): x(x), y(y), l(l), r(r) {}\n};\n\ndeque<Node> que;\n\nvoid pushColum(int curX, int curY, int curL, int curR) \n{\n    que.push_back(Node(curX, curY, curL, curR));\n    visit[curX][curY] = true;\n    for (int i=curX-1; i>=0; i--)\n    {\n        if (map[i][curY] == '*' || visit[i][curY])\n            break;\n        que.push_back(Node(i, curY, curL, curR));\n        visit[i][curY] = true;\n    }\n    for (int i=curX+1; i<n; i++)\n    {\n        if (map[i][curY] == '*' || visit[i][curY])\n            break;\n        que.push_back(Node(i, curY, curL, curR));\n        visit[i][curY] = true;\n    }\n}\n\nint main(int argc, char const *argv[])\n{\n    //freopen(\"D1.txt\", \"r\", stdin);\n    memset(visit, false, sizeof(visit));\n    scanf(\"%d %d\", &n, &m);\n    scanf(\"%d %d\", &x, &y);\n    scanf(\"%d %d\", &l, &r);\n    for (int i=0; i<n; i++)\n    {\n        scanf(\"%s\", map[i]);\n    }\n    x--;y--;\n    pushColum(x, y, l, r);\n    visit[x][y] = true;\n\n    int curX,curY,curL,curR;\n    while (!que.empty())\n    {\n        Node node = que.front();\n        que.pop_front();\n        curX = node.x;\n        curY = node.y;\n        curL = node.l;\n        curR = node.r;\n        int checkY = curY-1;\n        if (checkY>=0 && map[curX][checkY] != '*' && curL > 0 && !visit[curX][checkY])\n        {\n            pushColum(curX, checkY, curL - 1, curR);\n        }\n        checkY = curY+1;\n        if (checkY<m && map[curX][checkY] != '*' && curR > 0 && !visit[curX][checkY])\n        {\n            pushColum(curX, checkY, curL, curR - 1);\n        }\n    }\n    int ans = 0;\n    for (int i=0; i<n; i++)\n    {\n        for (int j=0; j<m; j++)\n        {\n            if (visit[i][j])\n                ans ++;\n        }\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```\n\n开始做的时候，只把起始点加入队列，取出一个点之后，再把这个点所在的列都加到队列，再考虑点的左右两边。这样是有问题的，下面的 test case 过不了， 想了整整一晚上。😭😭😭\n\n```\n8 13\n1 1\n100 10\n..........#..\n..#######.#..\n#..#####..#..\n##..####.####\n###..###.....\n####..###....\n#####..##....\n######.......\n```\n\n\n\n\n","source":"_posts/Codeforces_516_dev2_D.md","raw":"---\ntitle: \"Codeforces #516 dev2 D: Labyrinth\"\ndate: 2018-10-25 21:23:03\ncategories: Algorithm\ntags: [Algorithm, Codeforces]\nblog: true\n---\n\n#### 题目链接\n\nhttp://codeforces.com/contest/1064/problem/D\n\n#### 题意\n\n你在玩一个走一个迷宫，可以向上、向下走无限次，只能向左走 x 次，向右走 y 次，* 号的点是不能走的。问：能够到达的格子数是多少？\n\n格子大小是 n 行 m 列，起始位置是 c,r (从 1 开始)\n\n#### 解法\n\n<!-- more -->\n\n一般的 BFS。\n\n开始的时候，把起点所在的列全部加入队列并标记为已经访问。\n\n从队列中取出一个点，如果能向左走，并且左边的列没有被标记，把这一列都加入队列并标记已经访问，向左走的次数减一，同理处理右边。\n\n计算访问过的点。\n\n#### 代码\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n#include <deque>\n\nusing namespace std;\n\n#define N 2009\n\nchar map[N][N];\nbool visit[N][N];\nint n,m;\nint x,y;\nint l,r;\n\nstruct Node\n{\n    int x,y,l,r;\n    Node(int x, int y, int l, int r): x(x), y(y), l(l), r(r) {}\n};\n\ndeque<Node> que;\n\nvoid pushColum(int curX, int curY, int curL, int curR) \n{\n    que.push_back(Node(curX, curY, curL, curR));\n    visit[curX][curY] = true;\n    for (int i=curX-1; i>=0; i--)\n    {\n        if (map[i][curY] == '*' || visit[i][curY])\n            break;\n        que.push_back(Node(i, curY, curL, curR));\n        visit[i][curY] = true;\n    }\n    for (int i=curX+1; i<n; i++)\n    {\n        if (map[i][curY] == '*' || visit[i][curY])\n            break;\n        que.push_back(Node(i, curY, curL, curR));\n        visit[i][curY] = true;\n    }\n}\n\nint main(int argc, char const *argv[])\n{\n    //freopen(\"D1.txt\", \"r\", stdin);\n    memset(visit, false, sizeof(visit));\n    scanf(\"%d %d\", &n, &m);\n    scanf(\"%d %d\", &x, &y);\n    scanf(\"%d %d\", &l, &r);\n    for (int i=0; i<n; i++)\n    {\n        scanf(\"%s\", map[i]);\n    }\n    x--;y--;\n    pushColum(x, y, l, r);\n    visit[x][y] = true;\n\n    int curX,curY,curL,curR;\n    while (!que.empty())\n    {\n        Node node = que.front();\n        que.pop_front();\n        curX = node.x;\n        curY = node.y;\n        curL = node.l;\n        curR = node.r;\n        int checkY = curY-1;\n        if (checkY>=0 && map[curX][checkY] != '*' && curL > 0 && !visit[curX][checkY])\n        {\n            pushColum(curX, checkY, curL - 1, curR);\n        }\n        checkY = curY+1;\n        if (checkY<m && map[curX][checkY] != '*' && curR > 0 && !visit[curX][checkY])\n        {\n            pushColum(curX, checkY, curL, curR - 1);\n        }\n    }\n    int ans = 0;\n    for (int i=0; i<n; i++)\n    {\n        for (int j=0; j<m; j++)\n        {\n            if (visit[i][j])\n                ans ++;\n        }\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```\n\n开始做的时候，只把起始点加入队列，取出一个点之后，再把这个点所在的列都加到队列，再考虑点的左右两边。这样是有问题的，下面的 test case 过不了， 想了整整一晚上。😭😭😭\n\n```\n8 13\n1 1\n100 10\n..........#..\n..#######.#..\n#..#####..#..\n##..####.####\n###..###.....\n####..###....\n#####..##....\n######.......\n```\n\n\n\n\n","slug":"Codeforces_516_dev2_D","published":1,"updated":"2019-03-07T15:01:19.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64dc10008ha9kefcysca7","content":"<h4 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h4><p><a href=\"http://codeforces.com/contest/1064/problem/D\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/1064/problem/D</a></p>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>你在玩一个走一个迷宫，可以向上、向下走无限次，只能向左走 x 次，向右走 y 次，* 号的点是不能走的。问：能够到达的格子数是多少？</p>\n<p>格子大小是 n 行 m 列，起始位置是 c,r (从 1 开始)</p>\n<h4 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h4><a id=\"more\"></a>\n<p>一般的 BFS。</p>\n<p>开始的时候，把起点所在的列全部加入队列并标记为已经访问。</p>\n<p>从队列中取出一个点，如果能向左走，并且左边的列没有被标记，把这一列都加入队列并标记已经访问，向左走的次数减一，同理处理右边。</p>\n<p>计算访问过的点。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 2009</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> <span class=\"built_in\">map</span>[N][N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N][N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\"><span class=\"keyword\">int</span> l,r;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,l,r;</span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r): x(x), y(y), l(l), r(r) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">deque</span>&lt;Node&gt; que;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushColum</span><span class=\"params\">(<span class=\"keyword\">int</span> curX, <span class=\"keyword\">int</span> curY, <span class=\"keyword\">int</span> curL, <span class=\"keyword\">int</span> curR)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    que.push_back(Node(curX, curY, curL, curR));</span><br><span class=\"line\">    visit[curX][curY] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=curX<span class=\"number\">-1</span>; i&gt;=<span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][curY] == <span class=\"string\">'*'</span> || visit[i][curY])</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        que.push_back(Node(i, curY, curL, curR));</span><br><span class=\"line\">        visit[i][curY] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=curX+<span class=\"number\">1</span>; i&lt;n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][curY] == <span class=\"string\">'*'</span> || visit[i][curY])</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        que.push_back(Node(i, curY, curL, curR));</span><br><span class=\"line\">        visit[i][curY] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"D1.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visit, <span class=\"literal\">false</span>, <span class=\"keyword\">sizeof</span>(visit));</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;x, &amp;y);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;l, &amp;r);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, <span class=\"built_in\">map</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x--;y--;</span><br><span class=\"line\">    pushColum(x, y, l, r);</span><br><span class=\"line\">    visit[x][y] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> curX,curY,curL,curR;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!que.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Node node = que.front();</span><br><span class=\"line\">        que.pop_front();</span><br><span class=\"line\">        curX = node.x;</span><br><span class=\"line\">        curY = node.y;</span><br><span class=\"line\">        curL = node.l;</span><br><span class=\"line\">        curR = node.r;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> checkY = curY<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checkY&gt;=<span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">map</span>[curX][checkY] != <span class=\"string\">'*'</span> &amp;&amp; curL &gt; <span class=\"number\">0</span> &amp;&amp; !visit[curX][checkY])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            pushColum(curX, checkY, curL - <span class=\"number\">1</span>, curR);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        checkY = curY+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checkY&lt;m &amp;&amp; <span class=\"built_in\">map</span>[curX][checkY] != <span class=\"string\">'*'</span> &amp;&amp; curR &gt; <span class=\"number\">0</span> &amp;&amp; !visit[curX][checkY])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            pushColum(curX, checkY, curL, curR - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;m; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (visit[i][j])</span><br><span class=\"line\">                ans ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开始做的时候，只把起始点加入队列，取出一个点之后，再把这个点所在的列都加到队列，再考虑点的左右两边。这样是有问题的，下面的 test case 过不了， 想了整整一晚上。😭😭😭</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8 13</span><br><span class=\"line\">1 1</span><br><span class=\"line\">100 10</span><br><span class=\"line\">..........#..</span><br><span class=\"line\">..#######.#..</span><br><span class=\"line\">#..#####..#..</span><br><span class=\"line\">##..####.####</span><br><span class=\"line\">###..###.....</span><br><span class=\"line\">####..###....</span><br><span class=\"line\">#####..##....</span><br><span class=\"line\">######.......</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h4><p><a href=\"http://codeforces.com/contest/1064/problem/D\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/1064/problem/D</a></p>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>你在玩一个走一个迷宫，可以向上、向下走无限次，只能向左走 x 次，向右走 y 次，* 号的点是不能走的。问：能够到达的格子数是多少？</p>\n<p>格子大小是 n 行 m 列，起始位置是 c,r (从 1 开始)</p>\n<h4 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h4>","more":"<p>一般的 BFS。</p>\n<p>开始的时候，把起点所在的列全部加入队列并标记为已经访问。</p>\n<p>从队列中取出一个点，如果能向左走，并且左边的列没有被标记，把这一列都加入队列并标记已经访问，向左走的次数减一，同理处理右边。</p>\n<p>计算访问过的点。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 2009</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> <span class=\"built_in\">map</span>[N][N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N][N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\"><span class=\"keyword\">int</span> l,r;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,l,r;</span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r): x(x), y(y), l(l), r(r) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">deque</span>&lt;Node&gt; que;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushColum</span><span class=\"params\">(<span class=\"keyword\">int</span> curX, <span class=\"keyword\">int</span> curY, <span class=\"keyword\">int</span> curL, <span class=\"keyword\">int</span> curR)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    que.push_back(Node(curX, curY, curL, curR));</span><br><span class=\"line\">    visit[curX][curY] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=curX<span class=\"number\">-1</span>; i&gt;=<span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][curY] == <span class=\"string\">'*'</span> || visit[i][curY])</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        que.push_back(Node(i, curY, curL, curR));</span><br><span class=\"line\">        visit[i][curY] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=curX+<span class=\"number\">1</span>; i&lt;n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][curY] == <span class=\"string\">'*'</span> || visit[i][curY])</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        que.push_back(Node(i, curY, curL, curR));</span><br><span class=\"line\">        visit[i][curY] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"D1.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visit, <span class=\"literal\">false</span>, <span class=\"keyword\">sizeof</span>(visit));</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;x, &amp;y);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;l, &amp;r);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, <span class=\"built_in\">map</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x--;y--;</span><br><span class=\"line\">    pushColum(x, y, l, r);</span><br><span class=\"line\">    visit[x][y] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> curX,curY,curL,curR;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!que.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Node node = que.front();</span><br><span class=\"line\">        que.pop_front();</span><br><span class=\"line\">        curX = node.x;</span><br><span class=\"line\">        curY = node.y;</span><br><span class=\"line\">        curL = node.l;</span><br><span class=\"line\">        curR = node.r;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> checkY = curY<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checkY&gt;=<span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">map</span>[curX][checkY] != <span class=\"string\">'*'</span> &amp;&amp; curL &gt; <span class=\"number\">0</span> &amp;&amp; !visit[curX][checkY])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            pushColum(curX, checkY, curL - <span class=\"number\">1</span>, curR);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        checkY = curY+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checkY&lt;m &amp;&amp; <span class=\"built_in\">map</span>[curX][checkY] != <span class=\"string\">'*'</span> &amp;&amp; curR &gt; <span class=\"number\">0</span> &amp;&amp; !visit[curX][checkY])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            pushColum(curX, checkY, curL, curR - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;m; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (visit[i][j])</span><br><span class=\"line\">                ans ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开始做的时候，只把起始点加入队列，取出一个点之后，再把这个点所在的列都加到队列，再考虑点的左右两边。这样是有问题的，下面的 test case 过不了， 想了整整一晚上。😭😭😭</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8 13</span><br><span class=\"line\">1 1</span><br><span class=\"line\">100 10</span><br><span class=\"line\">..........#..</span><br><span class=\"line\">..#######.#..</span><br><span class=\"line\">#..#####..#..</span><br><span class=\"line\">##..####.####</span><br><span class=\"line\">###..###.....</span><br><span class=\"line\">####..###....</span><br><span class=\"line\">#####..##....</span><br><span class=\"line\">######.......</span><br></pre></td></tr></table></figure>"},{"title":"Codeforces 516 Dev2 B: Equations of Mathematical Magic","date":"2018-10-25T12:20:07.000Z","blog":true,"_content":"\n\n\n#### 题目链接\n\nhttp://codeforces.com/contest/1064/problem/B\n\n#### 题意\n\n给你一个数 a，从 0 到 a 有多少个数满足等式 `a-(a^x)-x = 0`？其中 \"^\" 是异或操作符。\n\n#### 解法\n\n<!-- more -->\n\n可以化简为 `a-x=a^x`，然后一位一位考虑\n\n| a | x | a-x | a^x |\n| - | - | - | - |\n| 1 | 0 | 1 | 1 |\n| 1 | 1 | 0 | 0 |\n| 0 | 0 | 0 | 0 |\n| 0 | 1 | 1(需要退位) | 1 |\n\n- 可以看出 a 的某一位上是 1 的时候，x 的这个位上是 0 或者 1 都能使等式成立。\n- 当 a 的某一位上是 0 的时候，x 的这个位上是 0 时，能时等式成立。\n\n下面考虑最后一种需要退位的情况：\n1. 如果上一位是表中的前 3 种情况，那么原来相等的，就会变成不相等。\n2. 如果上一位也是 `0 1` 这种情况，就会变成 `1 1`，上一位也满足了，需要向上上位退位。\n3. a 的前面的位必然会出现 1 的情况，因为 a>=x。\n4. 所以 0 1 是不满足的。\n\n总结就是 a 的某一位上是 0，x 在对应的位上只能是 0，如果 a 的某一位上是 1，x 在对应的位上可以是 0 或者 1。\n\n#### 代码\n\n```cpp\n#include <cmath>\n#include <cstdlib>\n#include <cstdio>\n\nint main(int argc, char const *argv[])\n{\n    //freopen(\"B.txt\", \"r\", stdin);\n    int n,a;\n    scanf(\"%d\", &n);\n    while (n--) \n    {\n        scanf(\"%d\", &a);\n        int k = 0;\n        while (a>0)\n        {\n            if (a&1) k++;\n            a >>= 1;\n        }\n        printf(\"%d\\n\", (1<<k));\n    }\n    return 0;\n}\n```\n\n\n","source":"_posts/Codeforces_516_dev2_B.md","raw":"---\ntitle: \"Codeforces 516 Dev2 B: Equations of Mathematical Magic\"\ndate: 2018-10-25 20:20:07\ncategories: Algorithm\ntags: [Algorithm, Codeforces]\nblog: true\n---\n\n\n\n#### 题目链接\n\nhttp://codeforces.com/contest/1064/problem/B\n\n#### 题意\n\n给你一个数 a，从 0 到 a 有多少个数满足等式 `a-(a^x)-x = 0`？其中 \"^\" 是异或操作符。\n\n#### 解法\n\n<!-- more -->\n\n可以化简为 `a-x=a^x`，然后一位一位考虑\n\n| a | x | a-x | a^x |\n| - | - | - | - |\n| 1 | 0 | 1 | 1 |\n| 1 | 1 | 0 | 0 |\n| 0 | 0 | 0 | 0 |\n| 0 | 1 | 1(需要退位) | 1 |\n\n- 可以看出 a 的某一位上是 1 的时候，x 的这个位上是 0 或者 1 都能使等式成立。\n- 当 a 的某一位上是 0 的时候，x 的这个位上是 0 时，能时等式成立。\n\n下面考虑最后一种需要退位的情况：\n1. 如果上一位是表中的前 3 种情况，那么原来相等的，就会变成不相等。\n2. 如果上一位也是 `0 1` 这种情况，就会变成 `1 1`，上一位也满足了，需要向上上位退位。\n3. a 的前面的位必然会出现 1 的情况，因为 a>=x。\n4. 所以 0 1 是不满足的。\n\n总结就是 a 的某一位上是 0，x 在对应的位上只能是 0，如果 a 的某一位上是 1，x 在对应的位上可以是 0 或者 1。\n\n#### 代码\n\n```cpp\n#include <cmath>\n#include <cstdlib>\n#include <cstdio>\n\nint main(int argc, char const *argv[])\n{\n    //freopen(\"B.txt\", \"r\", stdin);\n    int n,a;\n    scanf(\"%d\", &n);\n    while (n--) \n    {\n        scanf(\"%d\", &a);\n        int k = 0;\n        while (a>0)\n        {\n            if (a&1) k++;\n            a >>= 1;\n        }\n        printf(\"%d\\n\", (1<<k));\n    }\n    return 0;\n}\n```\n\n\n","slug":"Codeforces_516_dev2_B","published":1,"updated":"2019-03-07T15:01:19.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64dcv0009ha9kn8sa5fcp","content":"<h4 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h4><p><a href=\"http://codeforces.com/contest/1064/problem/B\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/1064/problem/B</a></p>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>给你一个数 a，从 0 到 a 有多少个数满足等式 <code>a-(a^x)-x = 0</code>？其中 “^” 是异或操作符。</p>\n<h4 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h4><a id=\"more\"></a>\n<p>可以化简为 <code>a-x=a^x</code>，然后一位一位考虑</p>\n<table>\n<thead>\n<tr>\n<th>a</th>\n<th>x</th>\n<th>a-x</th>\n<th>a^x</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1(需要退位)</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>可以看出 a 的某一位上是 1 的时候，x 的这个位上是 0 或者 1 都能使等式成立。</li>\n<li>当 a 的某一位上是 0 的时候，x 的这个位上是 0 时，能时等式成立。</li>\n</ul>\n<p>下面考虑最后一种需要退位的情况：</p>\n<ol>\n<li>如果上一位是表中的前 3 种情况，那么原来相等的，就会变成不相等。</li>\n<li>如果上一位也是 <code>0 1</code> 这种情况，就会变成 <code>1 1</code>，上一位也满足了，需要向上上位退位。</li>\n<li>a 的前面的位必然会出现 1 的情况，因为 a&gt;=x。</li>\n<li>所以 0 1 是不满足的。</li>\n</ol>\n<p>总结就是 a 的某一位上是 0，x 在对应的位上只能是 0，如果 a 的某一位上是 1，x 在对应的位上可以是 0 或者 1。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"B.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,a;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a&amp;<span class=\"number\">1</span>) k++;</span><br><span class=\"line\">            a &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, (<span class=\"number\">1</span>&lt;&lt;k));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h4><p><a href=\"http://codeforces.com/contest/1064/problem/B\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/1064/problem/B</a></p>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>给你一个数 a，从 0 到 a 有多少个数满足等式 <code>a-(a^x)-x = 0</code>？其中 “^” 是异或操作符。</p>\n<h4 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h4>","more":"<p>可以化简为 <code>a-x=a^x</code>，然后一位一位考虑</p>\n<table>\n<thead>\n<tr>\n<th>a</th>\n<th>x</th>\n<th>a-x</th>\n<th>a^x</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1(需要退位)</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>可以看出 a 的某一位上是 1 的时候，x 的这个位上是 0 或者 1 都能使等式成立。</li>\n<li>当 a 的某一位上是 0 的时候，x 的这个位上是 0 时，能时等式成立。</li>\n</ul>\n<p>下面考虑最后一种需要退位的情况：</p>\n<ol>\n<li>如果上一位是表中的前 3 种情况，那么原来相等的，就会变成不相等。</li>\n<li>如果上一位也是 <code>0 1</code> 这种情况，就会变成 <code>1 1</code>，上一位也满足了，需要向上上位退位。</li>\n<li>a 的前面的位必然会出现 1 的情况，因为 a&gt;=x。</li>\n<li>所以 0 1 是不满足的。</li>\n</ol>\n<p>总结就是 a 的某一位上是 0，x 在对应的位上只能是 0，如果 a 的某一位上是 1，x 在对应的位上可以是 0 或者 1。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"B.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,a;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a&amp;<span class=\"number\">1</span>) k++;</span><br><span class=\"line\">            a &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, (<span class=\"number\">1</span>&lt;&lt;k));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Codeforces 516 dev2 A: Make a triangle!","date":"2018-10-22T12:22:50.000Z","blog":true,"_content":"\n\n\n#### 题目链接\n\nhttp://codeforces.com/contest/1064/problem/A\n\n#### 题意\n\n给你三根棍子，长度分别是 a,b,c，使用这三跟棍子拼成三角形。如果没法拼成的话，可以加长其中的边，问：把边加长多少能拼出三角形。\n\n#### 解法\n\n<!-- more -->\n\n任意两边之和大于大三边就能拼成三角形。\n\n#### 代码\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n    //freopen(\"A.txt\", \"r\", stdin);\n    int a,b,c, out = -1;\n    scanf(\"%d %d %d\", &a, &b, &c);\n    out = max(out, a - b - c);\n    out = max(out, b - a - c);\n    out = max(out, c - a - b);\n    printf(\"%d\\n\", max(out + 1, 0));\n    return 0;\n}\n```\n\n好长时间没写 C++ 代码了，做两题练练手。\n","source":"_posts/Codeforces_516_dev2_A.md","raw":"---\ntitle: \"Codeforces 516 dev2 A: Make a triangle!\"\ndate: 2018-10-22 20:22:50\ncategories: Algorithm\ntags: [Codeforces, Algorithm]\nblog: true\n---\n\n\n\n#### 题目链接\n\nhttp://codeforces.com/contest/1064/problem/A\n\n#### 题意\n\n给你三根棍子，长度分别是 a,b,c，使用这三跟棍子拼成三角形。如果没法拼成的话，可以加长其中的边，问：把边加长多少能拼出三角形。\n\n#### 解法\n\n<!-- more -->\n\n任意两边之和大于大三边就能拼成三角形。\n\n#### 代码\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n    //freopen(\"A.txt\", \"r\", stdin);\n    int a,b,c, out = -1;\n    scanf(\"%d %d %d\", &a, &b, &c);\n    out = max(out, a - b - c);\n    out = max(out, b - a - c);\n    out = max(out, c - a - b);\n    printf(\"%d\\n\", max(out + 1, 0));\n    return 0;\n}\n```\n\n好长时间没写 C++ 代码了，做两题练练手。\n","slug":"Codeforces_516_dev2_A","published":1,"updated":"2019-03-07T15:01:19.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64ddb000aha9knvqga27r","content":"<h4 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h4><p><a href=\"http://codeforces.com/contest/1064/problem/A\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/1064/problem/A</a></p>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>给你三根棍子，长度分别是 a,b,c，使用这三跟棍子拼成三角形。如果没法拼成的话，可以加长其中的边，问：把边加长多少能拼出三角形。</p>\n<h4 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h4><a id=\"more\"></a>\n<p>任意两边之和大于大三边就能拼成三角形。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"A.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b,c, out = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d %d\"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">    out = max(out, a - b - c);</span><br><span class=\"line\">    out = max(out, b - a - c);</span><br><span class=\"line\">    out = max(out, c - a - b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, max(out + <span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好长时间没写 C++ 代码了，做两题练练手。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h4><p><a href=\"http://codeforces.com/contest/1064/problem/A\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/1064/problem/A</a></p>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>给你三根棍子，长度分别是 a,b,c，使用这三跟棍子拼成三角形。如果没法拼成的话，可以加长其中的边，问：把边加长多少能拼出三角形。</p>\n<h4 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h4>","more":"<p>任意两边之和大于大三边就能拼成三角形。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"A.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b,c, out = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d %d\"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">    out = max(out, a - b - c);</span><br><span class=\"line\">    out = max(out, b - a - c);</span><br><span class=\"line\">    out = max(out, c - a - b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, max(out + <span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好长时间没写 C++ 代码了，做两题练练手。</p>"},{"title":"Codeforces #516 dev2 E: Dwarves, Hats and Extrasensory Abilities","date":"2018-10-25T14:04:41.000Z","blog":true,"_content":"\n#### 题目链接\n\nhttp://codeforces.com/contest/1064/problem/E\n\n#### 题意\n\n这个题跟玩游戏一样，首先给你一个数字 n，表示有多少个人，你要给每一个人一个位置，然后再给出一条直线。系统会给每一个人戴白色或者黑色帽子，你要保证在直线同侧的人的帽子颜色相同。\n\n游戏是这样玩的：\n1. 系统告诉你有 n 个人\n2. 你输出第一个人的位置 x1, y1\n3. 系统给你一个输入 black/white 表示第一个人的帽子颜色\n4. 你输出第二个人的位置 x1, y1\n5. 系统给你一个输入 black/white 表示第二个人的帽子颜色\n6. ....\n7. 系统给你地 n 个人的帽子颜色之后，你要输出 x1 y1 x2 y2 表示给出的直线\n8. 系统会检测你给的直线是否满足要求\n\n#### 解法\n\n<!-- more -->\n\n把所有的人放在同一条直线上 (y==10)，然后把相同颜色的人归类到同一边。\n我们先给位置，系统在告诉我们颜色，所以我们都是把人放在中央，系统给了颜色之后，再确定它属于左边还是右边。\n\n1. 我们先给出第一个点 (0, 10), 系统给我们颜色之后(设为 black)，我们就可以定下 0 的位置是 black，10^9 位置是 white\n2. 然后把中点告诉给系统 ((0+10^9)/2, 10)，等系统给了颜色之后，我们再归类。\n3. 最后的直线，我们从两个就很简单了，随便画一条斜线就可以了。\n\n#### 代码\n\n```cpp\n#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\nint n;\nchar color[10], firstColor;\n\nint main(int argc, char const *argv[])\n{\n    //freopen(\"E.txt\", \"r\", stdin);\n    cin>>n;\n    cout<<0<<\" \"<<10<<endl;\n    cin>>color;\n    firstColor = color[0];\n    int l = 0, r = 1000000000, mid;\n    while (--n)\n    {\n        mid = (l+r) >> 1;\n        cout<<mid<<\" \"<<10<<endl;\n        cin>>color;\n        if (color[0] == firstColor)\n        {\n            l = mid;\n        } \n        else\n        {\n            r = mid;\n        }\n    }\n    cout<<l<<\" \"<<20<<\" \"<<r<<\" \"<<0<<endl;\n    return 0;\n}\n```\n\n其实就是一个二分，还是被坑了，需要使用 cout>> 方式输出。\n\n","source":"_posts/Codeforces_516_dev2_E.md","raw":"---\ntitle: \"Codeforces #516 dev2 E: Dwarves, Hats and Extrasensory Abilities\"\ndate: 2018-10-25 22:04:41\ncategories: Algorithm\ntags: [Algorithm, Codeforces]\nblog: true\n---\n\n#### 题目链接\n\nhttp://codeforces.com/contest/1064/problem/E\n\n#### 题意\n\n这个题跟玩游戏一样，首先给你一个数字 n，表示有多少个人，你要给每一个人一个位置，然后再给出一条直线。系统会给每一个人戴白色或者黑色帽子，你要保证在直线同侧的人的帽子颜色相同。\n\n游戏是这样玩的：\n1. 系统告诉你有 n 个人\n2. 你输出第一个人的位置 x1, y1\n3. 系统给你一个输入 black/white 表示第一个人的帽子颜色\n4. 你输出第二个人的位置 x1, y1\n5. 系统给你一个输入 black/white 表示第二个人的帽子颜色\n6. ....\n7. 系统给你地 n 个人的帽子颜色之后，你要输出 x1 y1 x2 y2 表示给出的直线\n8. 系统会检测你给的直线是否满足要求\n\n#### 解法\n\n<!-- more -->\n\n把所有的人放在同一条直线上 (y==10)，然后把相同颜色的人归类到同一边。\n我们先给位置，系统在告诉我们颜色，所以我们都是把人放在中央，系统给了颜色之后，再确定它属于左边还是右边。\n\n1. 我们先给出第一个点 (0, 10), 系统给我们颜色之后(设为 black)，我们就可以定下 0 的位置是 black，10^9 位置是 white\n2. 然后把中点告诉给系统 ((0+10^9)/2, 10)，等系统给了颜色之后，我们再归类。\n3. 最后的直线，我们从两个就很简单了，随便画一条斜线就可以了。\n\n#### 代码\n\n```cpp\n#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\nint n;\nchar color[10], firstColor;\n\nint main(int argc, char const *argv[])\n{\n    //freopen(\"E.txt\", \"r\", stdin);\n    cin>>n;\n    cout<<0<<\" \"<<10<<endl;\n    cin>>color;\n    firstColor = color[0];\n    int l = 0, r = 1000000000, mid;\n    while (--n)\n    {\n        mid = (l+r) >> 1;\n        cout<<mid<<\" \"<<10<<endl;\n        cin>>color;\n        if (color[0] == firstColor)\n        {\n            l = mid;\n        } \n        else\n        {\n            r = mid;\n        }\n    }\n    cout<<l<<\" \"<<20<<\" \"<<r<<\" \"<<0<<endl;\n    return 0;\n}\n```\n\n其实就是一个二分，还是被坑了，需要使用 cout>> 方式输出。\n\n","slug":"Codeforces_516_dev2_E","published":1,"updated":"2019-03-07T15:01:19.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64ddf000bha9ksiq4kh9d","content":"<h4 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h4><p><a href=\"http://codeforces.com/contest/1064/problem/E\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/1064/problem/E</a></p>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>这个题跟玩游戏一样，首先给你一个数字 n，表示有多少个人，你要给每一个人一个位置，然后再给出一条直线。系统会给每一个人戴白色或者黑色帽子，你要保证在直线同侧的人的帽子颜色相同。</p>\n<p>游戏是这样玩的：</p>\n<ol>\n<li>系统告诉你有 n 个人</li>\n<li>你输出第一个人的位置 x1, y1</li>\n<li>系统给你一个输入 black/white 表示第一个人的帽子颜色</li>\n<li>你输出第二个人的位置 x1, y1</li>\n<li>系统给你一个输入 black/white 表示第二个人的帽子颜色</li>\n<li>….</li>\n<li>系统给你地 n 个人的帽子颜色之后，你要输出 x1 y1 x2 y2 表示给出的直线</li>\n<li>系统会检测你给的直线是否满足要求</li>\n</ol>\n<h4 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h4><a id=\"more\"></a>\n<p>把所有的人放在同一条直线上 (y==10)，然后把相同颜色的人归类到同一边。<br>我们先给位置，系统在告诉我们颜色，所以我们都是把人放在中央，系统给了颜色之后，再确定它属于左边还是右边。</p>\n<ol>\n<li>我们先给出第一个点 (0, 10), 系统给我们颜色之后(设为 black)，我们就可以定下 0 的位置是 black，10^9 位置是 white</li>\n<li>然后把中点告诉给系统 ((0+10^9)/2, 10)，等系统给了颜色之后，我们再归类。</li>\n<li>最后的直线，我们从两个就很简单了，随便画一条斜线就可以了。</li>\n</ol>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> color[<span class=\"number\">10</span>], firstColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"E.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;<span class=\"number\">10</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;color;</span><br><span class=\"line\">    firstColor = color[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>, r = <span class=\"number\">1000000000</span>, mid;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (--n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mid = (l+r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;mid&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;<span class=\"number\">10</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;color;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (color[<span class=\"number\">0</span>] == firstColor)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = mid;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            r = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;l&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;<span class=\"number\">20</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;r&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实就是一个二分，还是被坑了，需要使用 cout&gt;&gt; 方式输出。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h4><p><a href=\"http://codeforces.com/contest/1064/problem/E\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/1064/problem/E</a></p>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>这个题跟玩游戏一样，首先给你一个数字 n，表示有多少个人，你要给每一个人一个位置，然后再给出一条直线。系统会给每一个人戴白色或者黑色帽子，你要保证在直线同侧的人的帽子颜色相同。</p>\n<p>游戏是这样玩的：</p>\n<ol>\n<li>系统告诉你有 n 个人</li>\n<li>你输出第一个人的位置 x1, y1</li>\n<li>系统给你一个输入 black/white 表示第一个人的帽子颜色</li>\n<li>你输出第二个人的位置 x1, y1</li>\n<li>系统给你一个输入 black/white 表示第二个人的帽子颜色</li>\n<li>….</li>\n<li>系统给你地 n 个人的帽子颜色之后，你要输出 x1 y1 x2 y2 表示给出的直线</li>\n<li>系统会检测你给的直线是否满足要求</li>\n</ol>\n<h4 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h4>","more":"<p>把所有的人放在同一条直线上 (y==10)，然后把相同颜色的人归类到同一边。<br>我们先给位置，系统在告诉我们颜色，所以我们都是把人放在中央，系统给了颜色之后，再确定它属于左边还是右边。</p>\n<ol>\n<li>我们先给出第一个点 (0, 10), 系统给我们颜色之后(设为 black)，我们就可以定下 0 的位置是 black，10^9 位置是 white</li>\n<li>然后把中点告诉给系统 ((0+10^9)/2, 10)，等系统给了颜色之后，我们再归类。</li>\n<li>最后的直线，我们从两个就很简单了，随便画一条斜线就可以了。</li>\n</ol>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> color[<span class=\"number\">10</span>], firstColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"E.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;<span class=\"number\">10</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;color;</span><br><span class=\"line\">    firstColor = color[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>, r = <span class=\"number\">1000000000</span>, mid;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (--n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mid = (l+r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;mid&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;<span class=\"number\">10</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;color;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (color[<span class=\"number\">0</span>] == firstColor)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = mid;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            r = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;l&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;<span class=\"number\">20</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;r&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实就是一个二分，还是被坑了，需要使用 cout&gt;&gt; 方式输出。</p>"},{"title":"CopyOnWrite 容器","date":"2017-07-20T04:06:47.000Z","blog":true,"_content":"\n\n\nCopyOnWrite 容器包括 CopyOnWriteArrayList, CopyOnWriteSet\n\n### CopyOnWriteArrayList\n\n1. elements 是 volatile 修饰的，当任何一个线程把 elements 地址修改之后，其他任何线程都能够知晓。\n2. write 操作都是加锁的，只会有一个线程修改 elements\n3. write 操作的时候，先拷贝一份数组，然后再修改拷贝数组，修改完之后，把 elements 指向这个拷贝，然后其他线程都使用新的数组\n4. read 操作都是不需要加锁的\n\n<!-- more -->\n\n```java\npublic synchronized boolean add(E e) {\n    Object[] newElements = new Object[elements.length + 1];\n    System.arraycopy(elements, 0, newElements, 0, elements.length);\n    newElements[elements.length] = e;\n    elements = newElements;\n    return true;\n}\npublic synchronized boolean addAll(int index, Collection<? extends E> collection) {\n    Object[] toAdd = collection.toArray();\n    Object[] newElements = new Object[elements.length + toAdd.length];\n    System.arraycopy(elements, 0, newElements, 0, index);\n    System.arraycopy(toAdd, 0, newElements, index, toAdd.length);\n    System.arraycopy(elements, index,\n            newElements, index + toAdd.length, elements.length - index);\n    elements = newElements;\n    return toAdd.length > 0;\n}\n```\n\nGet 不需要加锁\n\n```java\nfinal Object[] getArray() {\n    // CopyOnWriteArraySet needs this.\n    return elements;\n}\npublic int indexOf(Object object) {\n    Object[] snapshot = elements;\n    return indexOf(object, snapshot, 0, snapshot.length);\n}\n@SuppressWarnings(\"unchecked\")\npublic E get(int index) {\n    return (E) elements[index];\n}\n```\n\n### CopyOnWriteArraySet\n\n使用 CopyOnWriteArrayList 实现的\n\n```java\npublic synchronized int addAllAbsent(Collection<? extends E> collection) {\n    Object[] toAdd = collection.toArray();\n    Object[] newElements = new Object[elements.length + toAdd.length];\n    System.arraycopy(elements, 0, newElements, 0, elements.length);\n    int addedCount = 0;\n    for (Object o : toAdd) {\n        if (indexOf(o, newElements, 0, elements.length + addedCount) == -1) {\n            newElements[elements.length + addedCount++] = o;\n        }\n    }\n    if (addedCount < toAdd.length) {\n        newElements = Arrays.copyOfRange(\n                newElements, 0, elements.length + addedCount); // trim to size\n    }\n    elements = newElements;\n    return addedCount;\n}\npublic boolean add(E e) {\n    return al.addIfAbsent(e);\n}\n```\n\n// get 没有加锁\n```java\npublic boolean contains(Object o) {\n    return al.contains(o);\n}\n```\n\n\n\n\n\n\n","source":"_posts/CopyOnWrite_容器.md","raw":"---\ntitle: CopyOnWrite 容器\ndate: 2017-07-20 12:06:47\ntags: [CopyOnWrite]\ncategories: Java\nblog: true\n---\n\n\n\nCopyOnWrite 容器包括 CopyOnWriteArrayList, CopyOnWriteSet\n\n### CopyOnWriteArrayList\n\n1. elements 是 volatile 修饰的，当任何一个线程把 elements 地址修改之后，其他任何线程都能够知晓。\n2. write 操作都是加锁的，只会有一个线程修改 elements\n3. write 操作的时候，先拷贝一份数组，然后再修改拷贝数组，修改完之后，把 elements 指向这个拷贝，然后其他线程都使用新的数组\n4. read 操作都是不需要加锁的\n\n<!-- more -->\n\n```java\npublic synchronized boolean add(E e) {\n    Object[] newElements = new Object[elements.length + 1];\n    System.arraycopy(elements, 0, newElements, 0, elements.length);\n    newElements[elements.length] = e;\n    elements = newElements;\n    return true;\n}\npublic synchronized boolean addAll(int index, Collection<? extends E> collection) {\n    Object[] toAdd = collection.toArray();\n    Object[] newElements = new Object[elements.length + toAdd.length];\n    System.arraycopy(elements, 0, newElements, 0, index);\n    System.arraycopy(toAdd, 0, newElements, index, toAdd.length);\n    System.arraycopy(elements, index,\n            newElements, index + toAdd.length, elements.length - index);\n    elements = newElements;\n    return toAdd.length > 0;\n}\n```\n\nGet 不需要加锁\n\n```java\nfinal Object[] getArray() {\n    // CopyOnWriteArraySet needs this.\n    return elements;\n}\npublic int indexOf(Object object) {\n    Object[] snapshot = elements;\n    return indexOf(object, snapshot, 0, snapshot.length);\n}\n@SuppressWarnings(\"unchecked\")\npublic E get(int index) {\n    return (E) elements[index];\n}\n```\n\n### CopyOnWriteArraySet\n\n使用 CopyOnWriteArrayList 实现的\n\n```java\npublic synchronized int addAllAbsent(Collection<? extends E> collection) {\n    Object[] toAdd = collection.toArray();\n    Object[] newElements = new Object[elements.length + toAdd.length];\n    System.arraycopy(elements, 0, newElements, 0, elements.length);\n    int addedCount = 0;\n    for (Object o : toAdd) {\n        if (indexOf(o, newElements, 0, elements.length + addedCount) == -1) {\n            newElements[elements.length + addedCount++] = o;\n        }\n    }\n    if (addedCount < toAdd.length) {\n        newElements = Arrays.copyOfRange(\n                newElements, 0, elements.length + addedCount); // trim to size\n    }\n    elements = newElements;\n    return addedCount;\n}\npublic boolean add(E e) {\n    return al.addIfAbsent(e);\n}\n```\n\n// get 没有加锁\n```java\npublic boolean contains(Object o) {\n    return al.contains(o);\n}\n```\n\n\n\n\n\n\n","slug":"CopyOnWrite_容器","published":1,"updated":"2019-03-07T15:01:19.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64ddh000cha9kztn5j651","content":"<p>CopyOnWrite 容器包括 CopyOnWriteArrayList, CopyOnWriteSet</p>\n<h3 id=\"CopyOnWriteArrayList\"><a href=\"#CopyOnWriteArrayList\" class=\"headerlink\" title=\"CopyOnWriteArrayList\"></a>CopyOnWriteArrayList</h3><ol>\n<li>elements 是 volatile 修饰的，当任何一个线程把 elements 地址修改之后，其他任何线程都能够知晓。</li>\n<li>write 操作都是加锁的，只会有一个线程修改 elements</li>\n<li>write 操作的时候，先拷贝一份数组，然后再修改拷贝数组，修改完之后，把 elements 指向这个拷贝，然后其他线程都使用新的数组</li>\n<li>read 操作都是不需要加锁的</li>\n</ol>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    Object[] newElements = <span class=\"keyword\">new</span> Object[elements.length + <span class=\"number\">1</span>];</span><br><span class=\"line\">    System.arraycopy(elements, <span class=\"number\">0</span>, newElements, <span class=\"number\">0</span>, elements.length);</span><br><span class=\"line\">    newElements[elements.length] = e;</span><br><span class=\"line\">    elements = newElements;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Collection&lt;? extends E&gt; collection)</span> </span>&#123;</span><br><span class=\"line\">    Object[] toAdd = collection.toArray();</span><br><span class=\"line\">    Object[] newElements = <span class=\"keyword\">new</span> Object[elements.length + toAdd.length];</span><br><span class=\"line\">    System.arraycopy(elements, <span class=\"number\">0</span>, newElements, <span class=\"number\">0</span>, index);</span><br><span class=\"line\">    System.arraycopy(toAdd, <span class=\"number\">0</span>, newElements, index, toAdd.length);</span><br><span class=\"line\">    System.arraycopy(elements, index,</span><br><span class=\"line\">            newElements, index + toAdd.length, elements.length - index);</span><br><span class=\"line\">    elements = newElements;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> toAdd.length &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Get 不需要加锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Object[] getArray() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// CopyOnWriteArraySet needs this.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> elements;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">    Object[] snapshot = elements;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> indexOf(object, snapshot, <span class=\"number\">0</span>, snapshot.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (E) elements[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"CopyOnWriteArraySet\"><a href=\"#CopyOnWriteArraySet\" class=\"headerlink\" title=\"CopyOnWriteArraySet\"></a>CopyOnWriteArraySet</h3><p>使用 CopyOnWriteArrayList 实现的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">addAllAbsent</span><span class=\"params\">(Collection&lt;? extends E&gt; collection)</span> </span>&#123;</span><br><span class=\"line\">    Object[] toAdd = collection.toArray();</span><br><span class=\"line\">    Object[] newElements = <span class=\"keyword\">new</span> Object[elements.length + toAdd.length];</span><br><span class=\"line\">    System.arraycopy(elements, <span class=\"number\">0</span>, newElements, <span class=\"number\">0</span>, elements.length);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> addedCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object o : toAdd) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (indexOf(o, newElements, <span class=\"number\">0</span>, elements.length + addedCount) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            newElements[elements.length + addedCount++] = o;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (addedCount &lt; toAdd.length) &#123;</span><br><span class=\"line\">        newElements = Arrays.copyOfRange(</span><br><span class=\"line\">                newElements, <span class=\"number\">0</span>, elements.length + addedCount); <span class=\"comment\">// trim to size</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    elements = newElements;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> addedCount;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> al.addIfAbsent(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>// get 没有加锁<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> al.contains(o);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>CopyOnWrite 容器包括 CopyOnWriteArrayList, CopyOnWriteSet</p>\n<h3 id=\"CopyOnWriteArrayList\"><a href=\"#CopyOnWriteArrayList\" class=\"headerlink\" title=\"CopyOnWriteArrayList\"></a>CopyOnWriteArrayList</h3><ol>\n<li>elements 是 volatile 修饰的，当任何一个线程把 elements 地址修改之后，其他任何线程都能够知晓。</li>\n<li>write 操作都是加锁的，只会有一个线程修改 elements</li>\n<li>write 操作的时候，先拷贝一份数组，然后再修改拷贝数组，修改完之后，把 elements 指向这个拷贝，然后其他线程都使用新的数组</li>\n<li>read 操作都是不需要加锁的</li>\n</ol>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    Object[] newElements = <span class=\"keyword\">new</span> Object[elements.length + <span class=\"number\">1</span>];</span><br><span class=\"line\">    System.arraycopy(elements, <span class=\"number\">0</span>, newElements, <span class=\"number\">0</span>, elements.length);</span><br><span class=\"line\">    newElements[elements.length] = e;</span><br><span class=\"line\">    elements = newElements;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Collection&lt;? extends E&gt; collection)</span> </span>&#123;</span><br><span class=\"line\">    Object[] toAdd = collection.toArray();</span><br><span class=\"line\">    Object[] newElements = <span class=\"keyword\">new</span> Object[elements.length + toAdd.length];</span><br><span class=\"line\">    System.arraycopy(elements, <span class=\"number\">0</span>, newElements, <span class=\"number\">0</span>, index);</span><br><span class=\"line\">    System.arraycopy(toAdd, <span class=\"number\">0</span>, newElements, index, toAdd.length);</span><br><span class=\"line\">    System.arraycopy(elements, index,</span><br><span class=\"line\">            newElements, index + toAdd.length, elements.length - index);</span><br><span class=\"line\">    elements = newElements;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> toAdd.length &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Get 不需要加锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Object[] getArray() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// CopyOnWriteArraySet needs this.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> elements;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">    Object[] snapshot = elements;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> indexOf(object, snapshot, <span class=\"number\">0</span>, snapshot.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (E) elements[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"CopyOnWriteArraySet\"><a href=\"#CopyOnWriteArraySet\" class=\"headerlink\" title=\"CopyOnWriteArraySet\"></a>CopyOnWriteArraySet</h3><p>使用 CopyOnWriteArrayList 实现的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">addAllAbsent</span><span class=\"params\">(Collection&lt;? extends E&gt; collection)</span> </span>&#123;</span><br><span class=\"line\">    Object[] toAdd = collection.toArray();</span><br><span class=\"line\">    Object[] newElements = <span class=\"keyword\">new</span> Object[elements.length + toAdd.length];</span><br><span class=\"line\">    System.arraycopy(elements, <span class=\"number\">0</span>, newElements, <span class=\"number\">0</span>, elements.length);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> addedCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object o : toAdd) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (indexOf(o, newElements, <span class=\"number\">0</span>, elements.length + addedCount) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            newElements[elements.length + addedCount++] = o;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (addedCount &lt; toAdd.length) &#123;</span><br><span class=\"line\">        newElements = Arrays.copyOfRange(</span><br><span class=\"line\">                newElements, <span class=\"number\">0</span>, elements.length + addedCount); <span class=\"comment\">// trim to size</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    elements = newElements;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> addedCount;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> al.addIfAbsent(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>// get 没有加锁<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> al.contains(o);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"Gitbook-plugin-plantuml 优化","date":"2018-09-23T06:37:30.000Z","blog":true,"_content":"\n\n\n我的笔记都是使用 Markdown 编写的，并且使用 GitBook 搭建一个本地 Web 网页，可以像读书本一样看自己的笔记。\n\n在写笔记的过程中，可以直接打开网页查看效果，特别方便，更重要的是 GitBook 自带 PlantUml 插件，可以直接写 uml 代码。\n\n但是呢，使用过程中，发现 PlantUml 插件是有问题的。修改 uml 代码之后，点击保存，等待4，5秒，再次点击保存，才能在网页看到 UML 的修改效果。看了 Gitbook-plugin-plantuml 的源代码，发现工作原理很简单。\n\n<!-- more -->\n\n1. 先用正则查找每一个文件中所有 \"\\`\\`\\`uml\" 和 \"\\`\\`\\`\" 之间的内容，并放在一个文件中\n2. 计算这个文件的 md5 用于下一次文件改动时，检查文件是否改变\n3. 使用 plantuml 生成 png 图片保存到 assets/images/uml/ 目录下\n4. 下一次保存文件时，会把 assets/ 目录下的文件拷贝到 _book/ 目录下\n\n这个插件的 Github 地址为 https://github.com/lyhcode/gitbook-plugin-plantuml ，在 issues 中已经有人提 issue 了， 1 年了，还没有解决。然后找了一个修改版，这个修改版已经解决了保存两次才能生效的问题，但是还有一个不足，每次保存，会把所有 UML 文件全部重新生成 png 一次，一次生成几十张，CPU 风扇呼呼呼地叫，特别不舒服。于是对其进行优化。\n\n修改的内容为，新建一个缓存目录，如果 uml 文件没有改动，就不会重新生成 png 图片，而是把缓存的图片复制到 _book 目录下，修改的 uml 会生成新的 png 图片，并且把已经废弃的图片删除。\n\n我修改过后的插件仓库地址为 https://github.com/binwin20/gitbook-plugin-plantuml \n\n使用插件\n\n```json\n{\n    \"plugins\": [\n        \"plantuml@git+https://github.com/binwin20/gitbook-plugin-plantuml.git\"\n    ]\n}\n```\n\n如果在这之前已经使用了官方 gitbook-plugin-plantuml 插件，需要把 assets/images/uml 下的所有内容全部删掉。然后运行 `gitbook install` 重新下载插件\n\n","source":"_posts/Gitbook-plugin-plantuml_优化.md","raw":"---\ntitle: Gitbook-plugin-plantuml 优化\ndate: 2018-9-23 14:37:30\ncategories: 小工具\ntags: [plantuml, GitBook, plugin]\nblog: true\n---\n\n\n\n我的笔记都是使用 Markdown 编写的，并且使用 GitBook 搭建一个本地 Web 网页，可以像读书本一样看自己的笔记。\n\n在写笔记的过程中，可以直接打开网页查看效果，特别方便，更重要的是 GitBook 自带 PlantUml 插件，可以直接写 uml 代码。\n\n但是呢，使用过程中，发现 PlantUml 插件是有问题的。修改 uml 代码之后，点击保存，等待4，5秒，再次点击保存，才能在网页看到 UML 的修改效果。看了 Gitbook-plugin-plantuml 的源代码，发现工作原理很简单。\n\n<!-- more -->\n\n1. 先用正则查找每一个文件中所有 \"\\`\\`\\`uml\" 和 \"\\`\\`\\`\" 之间的内容，并放在一个文件中\n2. 计算这个文件的 md5 用于下一次文件改动时，检查文件是否改变\n3. 使用 plantuml 生成 png 图片保存到 assets/images/uml/ 目录下\n4. 下一次保存文件时，会把 assets/ 目录下的文件拷贝到 _book/ 目录下\n\n这个插件的 Github 地址为 https://github.com/lyhcode/gitbook-plugin-plantuml ，在 issues 中已经有人提 issue 了， 1 年了，还没有解决。然后找了一个修改版，这个修改版已经解决了保存两次才能生效的问题，但是还有一个不足，每次保存，会把所有 UML 文件全部重新生成 png 一次，一次生成几十张，CPU 风扇呼呼呼地叫，特别不舒服。于是对其进行优化。\n\n修改的内容为，新建一个缓存目录，如果 uml 文件没有改动，就不会重新生成 png 图片，而是把缓存的图片复制到 _book 目录下，修改的 uml 会生成新的 png 图片，并且把已经废弃的图片删除。\n\n我修改过后的插件仓库地址为 https://github.com/binwin20/gitbook-plugin-plantuml \n\n使用插件\n\n```json\n{\n    \"plugins\": [\n        \"plantuml@git+https://github.com/binwin20/gitbook-plugin-plantuml.git\"\n    ]\n}\n```\n\n如果在这之前已经使用了官方 gitbook-plugin-plantuml 插件，需要把 assets/images/uml 下的所有内容全部删掉。然后运行 `gitbook install` 重新下载插件\n\n","slug":"Gitbook-plugin-plantuml_优化","published":1,"updated":"2019-03-07T15:01:19.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64ddm000dha9kh5u29m7v","content":"<p>我的笔记都是使用 Markdown 编写的，并且使用 GitBook 搭建一个本地 Web 网页，可以像读书本一样看自己的笔记。</p>\n<p>在写笔记的过程中，可以直接打开网页查看效果，特别方便，更重要的是 GitBook 自带 PlantUml 插件，可以直接写 uml 代码。</p>\n<p>但是呢，使用过程中，发现 PlantUml 插件是有问题的。修改 uml 代码之后，点击保存，等待4，5秒，再次点击保存，才能在网页看到 UML 的修改效果。看了 Gitbook-plugin-plantuml 的源代码，发现工作原理很简单。</p>\n<a id=\"more\"></a>\n<ol>\n<li>先用正则查找每一个文件中所有 “```uml” 和 “```“ 之间的内容，并放在一个文件中</li>\n<li>计算这个文件的 md5 用于下一次文件改动时，检查文件是否改变</li>\n<li>使用 plantuml 生成 png 图片保存到 assets/images/uml/ 目录下</li>\n<li>下一次保存文件时，会把 assets/ 目录下的文件拷贝到 _book/ 目录下</li>\n</ol>\n<p>这个插件的 Github 地址为 <a href=\"https://github.com/lyhcode/gitbook-plugin-plantuml\" target=\"_blank\" rel=\"noopener\">https://github.com/lyhcode/gitbook-plugin-plantuml</a> ，在 issues 中已经有人提 issue 了， 1 年了，还没有解决。然后找了一个修改版，这个修改版已经解决了保存两次才能生效的问题，但是还有一个不足，每次保存，会把所有 UML 文件全部重新生成 png 一次，一次生成几十张，CPU 风扇呼呼呼地叫，特别不舒服。于是对其进行优化。</p>\n<p>修改的内容为，新建一个缓存目录，如果 uml 文件没有改动，就不会重新生成 png 图片，而是把缓存的图片复制到 _book 目录下，修改的 uml 会生成新的 png 图片，并且把已经废弃的图片删除。</p>\n<p>我修改过后的插件仓库地址为 <a href=\"https://github.com/binwin20/gitbook-plugin-plantuml\" target=\"_blank\" rel=\"noopener\">https://github.com/binwin20/gitbook-plugin-plantuml</a> </p>\n<p>使用插件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"plugins\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"plantuml@git+https://github.com/binwin20/gitbook-plugin-plantuml.git\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果在这之前已经使用了官方 gitbook-plugin-plantuml 插件，需要把 assets/images/uml 下的所有内容全部删掉。然后运行 <code>gitbook install</code> 重新下载插件</p>\n","site":{"data":{}},"excerpt":"<p>我的笔记都是使用 Markdown 编写的，并且使用 GitBook 搭建一个本地 Web 网页，可以像读书本一样看自己的笔记。</p>\n<p>在写笔记的过程中，可以直接打开网页查看效果，特别方便，更重要的是 GitBook 自带 PlantUml 插件，可以直接写 uml 代码。</p>\n<p>但是呢，使用过程中，发现 PlantUml 插件是有问题的。修改 uml 代码之后，点击保存，等待4，5秒，再次点击保存，才能在网页看到 UML 的修改效果。看了 Gitbook-plugin-plantuml 的源代码，发现工作原理很简单。</p>","more":"<ol>\n<li>先用正则查找每一个文件中所有 “```uml” 和 “```“ 之间的内容，并放在一个文件中</li>\n<li>计算这个文件的 md5 用于下一次文件改动时，检查文件是否改变</li>\n<li>使用 plantuml 生成 png 图片保存到 assets/images/uml/ 目录下</li>\n<li>下一次保存文件时，会把 assets/ 目录下的文件拷贝到 _book/ 目录下</li>\n</ol>\n<p>这个插件的 Github 地址为 <a href=\"https://github.com/lyhcode/gitbook-plugin-plantuml\" target=\"_blank\" rel=\"noopener\">https://github.com/lyhcode/gitbook-plugin-plantuml</a> ，在 issues 中已经有人提 issue 了， 1 年了，还没有解决。然后找了一个修改版，这个修改版已经解决了保存两次才能生效的问题，但是还有一个不足，每次保存，会把所有 UML 文件全部重新生成 png 一次，一次生成几十张，CPU 风扇呼呼呼地叫，特别不舒服。于是对其进行优化。</p>\n<p>修改的内容为，新建一个缓存目录，如果 uml 文件没有改动，就不会重新生成 png 图片，而是把缓存的图片复制到 _book 目录下，修改的 uml 会生成新的 png 图片，并且把已经废弃的图片删除。</p>\n<p>我修改过后的插件仓库地址为 <a href=\"https://github.com/binwin20/gitbook-plugin-plantuml\" target=\"_blank\" rel=\"noopener\">https://github.com/binwin20/gitbook-plugin-plantuml</a> </p>\n<p>使用插件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"plugins\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"plantuml@git+https://github.com/binwin20/gitbook-plugin-plantuml.git\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果在这之前已经使用了官方 gitbook-plugin-plantuml 插件，需要把 assets/images/uml 下的所有内容全部删掉。然后运行 <code>gitbook install</code> 重新下载插件</p>"},{"title":"Inklet 去广告","date":"2017-07-25T14:14:52.000Z","blog":true,"_content":"\n\n\n最近发现一个把触摸板当画板的小软件 —— [Inklet](https://tenonedesign.com/inklet.php)。\n\n这是一个收费软件，也可以免费使用，但是每隔200s左右会有25s的广告时间。\n\n{% img \"/images/inklet-snapshot.png\" %}\n\n我真是太穷了，买不起正版，但是作为一个有一点点道德的程序员，也不能去破解同行的软件的（其实是不会破解）\n\n广告是很烦的东西，我怎么可能把宝贵的时间浪费在这里呢？于是，每次快要出现广告的时候我都会关闭 Inklet 然后重启，就可以跳过广告了。写了一个快速重启的脚本。\n\n新建文件 inkletRestart\n```\nkillall Inklet\nopen -a  /Applications/Inklet.app/Contents/MacOS/Inklet \nexit\n```\n\n添加可执行权限\n\n```bash\nsudo chmod u+x inkletRestart\n```\n\n然后每次双击这个文件就可以重启了\n\n如果安装了 Alfred 的话，用 open 命令打开这个文件: `空格 + inkletRestart`\n\n\n\n\n\n\n","source":"_posts/Inklet-去广告.md","raw":"---\ntitle: Inklet 去广告\ndate: 2017-07-25 22:14:52\ntags: [Inklet, SketchBook, Alfred, shell]\ncategories: 小玩意\nblog: true\n---\n\n\n\n最近发现一个把触摸板当画板的小软件 —— [Inklet](https://tenonedesign.com/inklet.php)。\n\n这是一个收费软件，也可以免费使用，但是每隔200s左右会有25s的广告时间。\n\n{% img \"/images/inklet-snapshot.png\" %}\n\n我真是太穷了，买不起正版，但是作为一个有一点点道德的程序员，也不能去破解同行的软件的（其实是不会破解）\n\n广告是很烦的东西，我怎么可能把宝贵的时间浪费在这里呢？于是，每次快要出现广告的时候我都会关闭 Inklet 然后重启，就可以跳过广告了。写了一个快速重启的脚本。\n\n新建文件 inkletRestart\n```\nkillall Inklet\nopen -a  /Applications/Inklet.app/Contents/MacOS/Inklet \nexit\n```\n\n添加可执行权限\n\n```bash\nsudo chmod u+x inkletRestart\n```\n\n然后每次双击这个文件就可以重启了\n\n如果安装了 Alfred 的话，用 open 命令打开这个文件: `空格 + inkletRestart`\n\n\n\n\n\n\n","slug":"Inklet-去广告","published":1,"updated":"2019-03-07T15:01:19.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64ddp000eha9kh9625l2d","content":"<p>最近发现一个把触摸板当画板的小软件 —— <a href=\"https://tenonedesign.com/inklet.php\" target=\"_blank\" rel=\"noopener\">Inklet</a>。</p>\n<p>这是一个收费软件，也可以免费使用，但是每隔200s左右会有25s的广告时间。</p>\n<img src=\"/images/inklet-snapshot.png\">\n<p>我真是太穷了，买不起正版，但是作为一个有一点点道德的程序员，也不能去破解同行的软件的（其实是不会破解）</p>\n<p>广告是很烦的东西，我怎么可能把宝贵的时间浪费在这里呢？于是，每次快要出现广告的时候我都会关闭 Inklet 然后重启，就可以跳过广告了。写了一个快速重启的脚本。</p>\n<p>新建文件 inkletRestart<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall Inklet</span><br><span class=\"line\">open -a  /Applications/Inklet.app/Contents/MacOS/Inklet </span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure></p>\n<p>添加可执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod u+x inkletRestart</span><br></pre></td></tr></table></figure>\n<p>然后每次双击这个文件就可以重启了</p>\n<p>如果安装了 Alfred 的话，用 open 命令打开这个文件: <code>空格 + inkletRestart</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近发现一个把触摸板当画板的小软件 —— <a href=\"https://tenonedesign.com/inklet.php\" target=\"_blank\" rel=\"noopener\">Inklet</a>。</p>\n<p>这是一个收费软件，也可以免费使用，但是每隔200s左右会有25s的广告时间。</p>\n<img src=\"/images/inklet-snapshot.png\">\n<p>我真是太穷了，买不起正版，但是作为一个有一点点道德的程序员，也不能去破解同行的软件的（其实是不会破解）</p>\n<p>广告是很烦的东西，我怎么可能把宝贵的时间浪费在这里呢？于是，每次快要出现广告的时候我都会关闭 Inklet 然后重启，就可以跳过广告了。写了一个快速重启的脚本。</p>\n<p>新建文件 inkletRestart<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall Inklet</span><br><span class=\"line\">open -a  /Applications/Inklet.app/Contents/MacOS/Inklet </span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure></p>\n<p>添加可执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod u+x inkletRestart</span><br></pre></td></tr></table></figure>\n<p>然后每次双击这个文件就可以重启了</p>\n<p>如果安装了 Alfred 的话，用 open 命令打开这个文件: <code>空格 + inkletRestart</code></p>\n"},{"title":"IntentService 源码解析","date":"2017-08-12T02:31:29.000Z","blog":true,"_content":"\n\n\nIntentService 继承子 Service，所以是 Service 的加强版\n\nService 中的函数都是在主线程中进行的，而 Service 一般是用来处理耗时操作的，如果在主线程中处理耗时操作可能导致 ANR，所以出现了后台线程处理耗时操作的 Service —— IntentService，当耗时操作结束时，会自动结束这个 Service\n\n首先看看 onCreate 方法\n\n<!-- more -->\n\n```java\n    @Override\n    public void onCreate() {\n\n        super.onCreate();\n        HandlerThread thread = new HandlerThread(\"IntentService[\" + mName + \"]\");\n        thread.start();\n\n        mServiceLooper = thread.getLooper();\n        mServiceHandler = new ServiceHandler(mServiceLooper);\n    }\n```\n\nonCreate 方法中会创建一个线程和一个 Handler\n\n我们知道，Service 收到 Intent 调用的时候都会调用 onStartCommand 方法\n\n```java\n    @Override\n    public void onStart(@Nullable Intent intent, int startId) {\n        Message msg = mServiceHandler.obtainMessage();\n        msg.arg1 = startId;\n        msg.obj = intent;\n        mServiceHandler.sendMessage(msg);\n    }\n    @Override\n    public int onStartCommand(@Nullable Intent intent, int flags, int startId) {\n        onStart(intent, startId);\n        return mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;\n    }\n```\n\n所以 IntentService 都会使用刚刚的 Handler 发送一个 message, 交给后台线程 HandlerThread 处理，下面看看 Hanlder 是如何处理的。\n\n```java\n    private final class ServiceHandler extends Handler {\n        public ServiceHandler(Looper looper) {\n            super(looper);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            onHandleIntent((Intent)msg.obj);\n            stopSelf(msg.arg1);\n        }\n    }\n```\n\nHandler 会调用 Servcie 的 onhandleIntent，然后会调用 stopSelf(msg.arg1), 当 onHandleIntent 处理完之后才会调用 stopSelf(int)\n\n然后看看 stopSelf(int) 的作用，其实就是老的 stopSelfResult 方法：\n\n```\nStop the service if the most recent time it was started was <var>startId</var>. This is the same as calling Context#stopService(), \nfor this particular service but allows you to afely avoid stopping if there is a start request from a client that you haven't yet seen in {@link #onStart}\n\nBe careful about ordering of your calls to this function. If you call this function with the most-recently received ID before you have called it\n for previously received IDs,the service will be immediately stopped anyway.\n```\n\n\n这里有几个需要注意的地方：\n- 只有 stopSelf 使用的 ID 等于最后的 onStart 的 ID 才会把 service 停掉\n- 如果 onHandleIntent 中使用了其他线程，onHandleIntent 返回之后，会直接停掉 Service，所以 onHandleIntent 中是不能使用其他线程的\n\n\n\n","source":"_posts/IntentService-源码解析.md","raw":"---\ntitle: IntentService 源码解析\ndate: 2017-08-12 10:31:29\ntags: [IntentServcie]\ncategories: 源码阅读\nblog: true\n---\n\n\n\nIntentService 继承子 Service，所以是 Service 的加强版\n\nService 中的函数都是在主线程中进行的，而 Service 一般是用来处理耗时操作的，如果在主线程中处理耗时操作可能导致 ANR，所以出现了后台线程处理耗时操作的 Service —— IntentService，当耗时操作结束时，会自动结束这个 Service\n\n首先看看 onCreate 方法\n\n<!-- more -->\n\n```java\n    @Override\n    public void onCreate() {\n\n        super.onCreate();\n        HandlerThread thread = new HandlerThread(\"IntentService[\" + mName + \"]\");\n        thread.start();\n\n        mServiceLooper = thread.getLooper();\n        mServiceHandler = new ServiceHandler(mServiceLooper);\n    }\n```\n\nonCreate 方法中会创建一个线程和一个 Handler\n\n我们知道，Service 收到 Intent 调用的时候都会调用 onStartCommand 方法\n\n```java\n    @Override\n    public void onStart(@Nullable Intent intent, int startId) {\n        Message msg = mServiceHandler.obtainMessage();\n        msg.arg1 = startId;\n        msg.obj = intent;\n        mServiceHandler.sendMessage(msg);\n    }\n    @Override\n    public int onStartCommand(@Nullable Intent intent, int flags, int startId) {\n        onStart(intent, startId);\n        return mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;\n    }\n```\n\n所以 IntentService 都会使用刚刚的 Handler 发送一个 message, 交给后台线程 HandlerThread 处理，下面看看 Hanlder 是如何处理的。\n\n```java\n    private final class ServiceHandler extends Handler {\n        public ServiceHandler(Looper looper) {\n            super(looper);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            onHandleIntent((Intent)msg.obj);\n            stopSelf(msg.arg1);\n        }\n    }\n```\n\nHandler 会调用 Servcie 的 onhandleIntent，然后会调用 stopSelf(msg.arg1), 当 onHandleIntent 处理完之后才会调用 stopSelf(int)\n\n然后看看 stopSelf(int) 的作用，其实就是老的 stopSelfResult 方法：\n\n```\nStop the service if the most recent time it was started was <var>startId</var>. This is the same as calling Context#stopService(), \nfor this particular service but allows you to afely avoid stopping if there is a start request from a client that you haven't yet seen in {@link #onStart}\n\nBe careful about ordering of your calls to this function. If you call this function with the most-recently received ID before you have called it\n for previously received IDs,the service will be immediately stopped anyway.\n```\n\n\n这里有几个需要注意的地方：\n- 只有 stopSelf 使用的 ID 等于最后的 onStart 的 ID 才会把 service 停掉\n- 如果 onHandleIntent 中使用了其他线程，onHandleIntent 返回之后，会直接停掉 Service，所以 onHandleIntent 中是不能使用其他线程的\n\n\n\n","slug":"IntentService-源码解析","published":1,"updated":"2019-03-07T15:01:19.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64dds000fha9keoupeny4","content":"<p>IntentService 继承子 Service，所以是 Service 的加强版</p>\n<p>Service 中的函数都是在主线程中进行的，而 Service 一般是用来处理耗时操作的，如果在主线程中处理耗时操作可能导致 ANR，所以出现了后台线程处理耗时操作的 Service —— IntentService，当耗时操作结束时，会自动结束这个 Service</p>\n<p>首先看看 onCreate 方法</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">    HandlerThread thread = <span class=\"keyword\">new</span> HandlerThread(<span class=\"string\">\"IntentService[\"</span> + mName + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    mServiceLooper = thread.getLooper();</span><br><span class=\"line\">    mServiceHandler = <span class=\"keyword\">new</span> ServiceHandler(mServiceLooper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>onCreate 方法中会创建一个线程和一个 Handler</p>\n<p>我们知道，Service 收到 Intent 调用的时候都会调用 onStartCommand 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">(@Nullable Intent intent, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</span><br><span class=\"line\">    Message msg = mServiceHandler.obtainMessage();</span><br><span class=\"line\">    msg.arg1 = startId;</span><br><span class=\"line\">    msg.obj = intent;</span><br><span class=\"line\">    mServiceHandler.sendMessage(msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(@Nullable Intent intent, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</span><br><span class=\"line\">    onStart(intent, startId);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以 IntentService 都会使用刚刚的 Handler 发送一个 message, 交给后台线程 HandlerThread 处理，下面看看 Hanlder 是如何处理的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ServiceHandler</span><span class=\"params\">(Looper looper)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(looper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        onHandleIntent((Intent)msg.obj);</span><br><span class=\"line\">        stopSelf(msg.arg1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Handler 会调用 Servcie 的 onhandleIntent，然后会调用 stopSelf(msg.arg1), 当 onHandleIntent 处理完之后才会调用 stopSelf(int)</p>\n<p>然后看看 stopSelf(int) 的作用，其实就是老的 stopSelfResult 方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stop the service if the most recent time it was started was &lt;var&gt;startId&lt;/var&gt;. This is the same as calling Context#stopService(), </span><br><span class=\"line\">for this particular service but allows you to afely avoid stopping if there is a start request from a client that you haven&apos;t yet seen in &#123;@link #onStart&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Be careful about ordering of your calls to this function. If you call this function with the most-recently received ID before you have called it</span><br><span class=\"line\"> for previously received IDs,the service will be immediately stopped anyway.</span><br></pre></td></tr></table></figure>\n<p>这里有几个需要注意的地方：</p>\n<ul>\n<li>只有 stopSelf 使用的 ID 等于最后的 onStart 的 ID 才会把 service 停掉</li>\n<li>如果 onHandleIntent 中使用了其他线程，onHandleIntent 返回之后，会直接停掉 Service，所以 onHandleIntent 中是不能使用其他线程的</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>IntentService 继承子 Service，所以是 Service 的加强版</p>\n<p>Service 中的函数都是在主线程中进行的，而 Service 一般是用来处理耗时操作的，如果在主线程中处理耗时操作可能导致 ANR，所以出现了后台线程处理耗时操作的 Service —— IntentService，当耗时操作结束时，会自动结束这个 Service</p>\n<p>首先看看 onCreate 方法</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">    HandlerThread thread = <span class=\"keyword\">new</span> HandlerThread(<span class=\"string\">\"IntentService[\"</span> + mName + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    mServiceLooper = thread.getLooper();</span><br><span class=\"line\">    mServiceHandler = <span class=\"keyword\">new</span> ServiceHandler(mServiceLooper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>onCreate 方法中会创建一个线程和一个 Handler</p>\n<p>我们知道，Service 收到 Intent 调用的时候都会调用 onStartCommand 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">(@Nullable Intent intent, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</span><br><span class=\"line\">    Message msg = mServiceHandler.obtainMessage();</span><br><span class=\"line\">    msg.arg1 = startId;</span><br><span class=\"line\">    msg.obj = intent;</span><br><span class=\"line\">    mServiceHandler.sendMessage(msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(@Nullable Intent intent, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</span><br><span class=\"line\">    onStart(intent, startId);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以 IntentService 都会使用刚刚的 Handler 发送一个 message, 交给后台线程 HandlerThread 处理，下面看看 Hanlder 是如何处理的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ServiceHandler</span><span class=\"params\">(Looper looper)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(looper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        onHandleIntent((Intent)msg.obj);</span><br><span class=\"line\">        stopSelf(msg.arg1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Handler 会调用 Servcie 的 onhandleIntent，然后会调用 stopSelf(msg.arg1), 当 onHandleIntent 处理完之后才会调用 stopSelf(int)</p>\n<p>然后看看 stopSelf(int) 的作用，其实就是老的 stopSelfResult 方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stop the service if the most recent time it was started was &lt;var&gt;startId&lt;/var&gt;. This is the same as calling Context#stopService(), </span><br><span class=\"line\">for this particular service but allows you to afely avoid stopping if there is a start request from a client that you haven&apos;t yet seen in &#123;@link #onStart&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Be careful about ordering of your calls to this function. If you call this function with the most-recently received ID before you have called it</span><br><span class=\"line\"> for previously received IDs,the service will be immediately stopped anyway.</span><br></pre></td></tr></table></figure>\n<p>这里有几个需要注意的地方：</p>\n<ul>\n<li>只有 stopSelf 使用的 ID 等于最后的 onStart 的 ID 才会把 service 停掉</li>\n<li>如果 onHandleIntent 中使用了其他线程，onHandleIntent 返回之后，会直接停掉 Service，所以 onHandleIntent 中是不能使用其他线程的</li>\n</ul>"},{"title":"Hexo 图片上传踩坑","date":"2016-08-27T16:05:27.000Z","blog":true,"_content":"\n\n\n一直都使用 DropBox 保存笔记，搭建博客的时候也想着要把重要的东西放到 DropBox 中。于是把 项目中 _config.yml 的 source_dir 指向到 DropBox 的文件夹中。写第一篇博客没发现问题，写第二篇博客也没发现问题。因为没有使用图片，写第三篇博客 [ActiveAndroid 源码学习][] 的时候需要用到图片，但是图片不显示。。。开始了 debug 之路。\n\n<!-- more -->\n\n于是找谷歌，大概有两种方式：一种是使用第三方图床，另一种是使用本地保存。于是尝试使用七牛图床，我的图片都放在一个文件夹中的，直接把这个文件夹同步到七牛，一个脚本处理所有的图片链接，简直太方便了。于是开通七牛，实名认证，域名绑定的时候，要求域名备案，域名备案，备案。。。\n\n然后看到 [在 hexo 中优雅的使用本地图片][] 这篇博客，这里介绍了两种放图片的方式，一种放在根目录（我要的就是这种），另一种是建立一个跟文件名相同名称的目录，然后使用相对路径就能访问。两种都试过了，都没有效果。打开 public 文件夹，在 images 目录下和文章同级目录下都没有找到图片文件。为啥别人能用自己用不了呢？\n\n首先想到的是，是不是所有的图片都有问题，打开 public/images 目录，发现其中有一些图片包括 gif, jpg, svg 格式的。然后找找这些图片的来源，都是从 [Next][] 主题中复制来的。把自己的图片放这个主题中，显然是可以的，但是跟主题混在一起，以后更改主题图片就又出问题了，这种处理方式显然不对。。再找找有没有其他的没被 Hexo 处理的文件。只有 vendors 这个文件夹是没有被处理的，但是这个文件夹也是从主题复制来的。忽略。。\n\n谷歌啥图片没有拷贝到 public 目录中，无解。只能自己尝试了。\n\n首先做的是把 source_dir 改回初始化的值 `source`，并且在 source/, source/_post/, source/images 文件夹下都放不同的图片。运行 `hexo g`, 查看 public 目录，发现 source/, source/images 目录下的文件都能复制到 public 中。为啥在 DropBox 中的一个都不能复制呢？难道是权限问题？\n\n于是 `ls -al`, 结果如下：\nHexo 中的文件和文件夹\n\n```bash\ndrwxr-xr-x   3 binwin20  staff   102  8 27 16:21 images\n-rw-r--r--@ 1 binwin20  staff  54092  8 27 10:58 6F869754-243C-47A9-B9A4-A2031948D20A.png\n```\n\nDropBox 中的文件和文件夹\n\n```bash\ndrwxr-xr-x@  4 binwin20  staff    136  8 27 11:47 images\n-rw-r--r--@  1 binwin20  staff  54092  8 27 10:58 6F869754-243C-47A9-B9A4-A2031948D20A.png\n```\n\n文件夹多了一个 `@`，`@` 是啥呢。谷歌一下：它包含了文件的扩展属性。还是不明白，管他呢，把 DropBox 中的复制到 Hexo 中：\n\n```bash\ndrwxr-xr-x@  4 binwin20  staff   136  8 27 11:47 images\n```\n\nHexo 中的图片还是能生到public 中，显然不是 `@` 和权限导致的问题。\n\n于是尝试把 source 放在上一层目录中（跟 Hexo 项目同级）。运行 `hexo clean`, `hexo g`，图片不能复制。。。\n\n然后尝试把路径改成绝对路径，source 名称改成 source1，都试了一下。发现只有 source 在 Hexo 文件夹下才能把其中的图片复制到 public 文件夹下。\n\n猜想应该是 source_dir 的问题。于是全局查找 source_dir。\n\nload_config.js 中：  `ctx.source_dir = pathFn.resolve(baseDir, config.source_dir) + sep;` 没有具体的使用，名称依旧是 source_dir，忽略，继续查找\n\n/hexo/lib/hexo/post.js 中:  `var draftDir = pathFn.join(ctx.source_dir, '_drafts');` 在这里定义了 draftDir，肯定有使用。但是 draft 是草稿的意思。直接忽略，还不如看 post 呢。\n\nsource.js 几行代码，可惜都看不懂。\n\n跟 source_dir 有关的代码都看了一下，然并软。看不懂 js 代码，不知道执行流程。然后想到 hexo 有一个 `--debug` 模式，于是执行 `hexo clean`, `hexo g --debug`,\n\n当 source_dir 指向 DropBox 中时\n\n```bash\n...\nLoading database.\n01:34:17.750 INFO  Start processing\n01:34:17.787 DEBUG Processed: favicon.ico\n01:34:17.820 DEBUG Processed: images/6F869754-243C-47A9-B9A4-A2031948D20A.png\n01:34:17.880 DEBUG Theme config loaded.\n...\n```\n\n当 source_dir 指向 Hexo 中时\n\n```bash\n...\nLoading database.\n01:34:17.750 INFO  Start processing\n01:34:17.787 DEBUG Processed: favicon.ico\n01:34:17.820 DEBUG Processed: images/6F869754-243C-47A9-B9A4-A2031948D20A.png\n01:34:17.880 DEBUG Theme config loaded.\n...\n01:34:20.621 INFO  Generated: about/index.html\n01:34:20.625 INFO  Generated: images/6F869754-243C-47A9-B9A4-A2031948D20A.png\n01:34:20.625 INFO  Generated: images/avatar.jpg\n...\n```\n\n于是全局查找 `Start processing` 和 `Processed:`，还是看不懂 js 代码。\n\n再次谷歌 `hexo source_dir` 搜到 github 中别人提的一个 [issue][]，没有人回答。再看看提 Issue 的人[Evan You][] **Creator of @vuejs, previously @meteor & @google**，哇！Vuejs！我们现在外包给别人做的 H5 页面就是使用 Vuejs 做的。\n\n不能把 source_dir 指向的其他的文件夹，定义这个 source_dir 有软用。不懂 js 😪\n\n在这里死扣也不是办法，于是谷歌 DropBox 同步多文件夹，还真有 [链接][DropBox 同步多文件夹]\n\n以后有时间学学 Js 和 ReactNative。\n\n测试一下上传图片：\n\n{% img \"/images/testimage.gif\" %}\n\n[在 hexo 中优雅的使用本地图片]: https://codefalling.com/2015/12/19/no-pains-with-hexo-local-image/\n[Next]: https://github.com/iissnan/hexo-theme-next\n[issue]: https://github.com/hexojs/hexo/issues/1666\n[Evan You]: https://github.com/yyx990803\n[DropBox 同步多文件夹]: http://www.linuxidc.com/Linux/2011-05/35373.htm\n","source":"_posts/Hexo-图片上传踩坑.md","raw":"---\ntitle: Hexo 图片上传踩坑\ndate: 2016-08-28 00:05:27\ntags: [Hexo]\ncategories: 其他\nblog: true\n---\n\n\n\n一直都使用 DropBox 保存笔记，搭建博客的时候也想着要把重要的东西放到 DropBox 中。于是把 项目中 _config.yml 的 source_dir 指向到 DropBox 的文件夹中。写第一篇博客没发现问题，写第二篇博客也没发现问题。因为没有使用图片，写第三篇博客 [ActiveAndroid 源码学习][] 的时候需要用到图片，但是图片不显示。。。开始了 debug 之路。\n\n<!-- more -->\n\n于是找谷歌，大概有两种方式：一种是使用第三方图床，另一种是使用本地保存。于是尝试使用七牛图床，我的图片都放在一个文件夹中的，直接把这个文件夹同步到七牛，一个脚本处理所有的图片链接，简直太方便了。于是开通七牛，实名认证，域名绑定的时候，要求域名备案，域名备案，备案。。。\n\n然后看到 [在 hexo 中优雅的使用本地图片][] 这篇博客，这里介绍了两种放图片的方式，一种放在根目录（我要的就是这种），另一种是建立一个跟文件名相同名称的目录，然后使用相对路径就能访问。两种都试过了，都没有效果。打开 public 文件夹，在 images 目录下和文章同级目录下都没有找到图片文件。为啥别人能用自己用不了呢？\n\n首先想到的是，是不是所有的图片都有问题，打开 public/images 目录，发现其中有一些图片包括 gif, jpg, svg 格式的。然后找找这些图片的来源，都是从 [Next][] 主题中复制来的。把自己的图片放这个主题中，显然是可以的，但是跟主题混在一起，以后更改主题图片就又出问题了，这种处理方式显然不对。。再找找有没有其他的没被 Hexo 处理的文件。只有 vendors 这个文件夹是没有被处理的，但是这个文件夹也是从主题复制来的。忽略。。\n\n谷歌啥图片没有拷贝到 public 目录中，无解。只能自己尝试了。\n\n首先做的是把 source_dir 改回初始化的值 `source`，并且在 source/, source/_post/, source/images 文件夹下都放不同的图片。运行 `hexo g`, 查看 public 目录，发现 source/, source/images 目录下的文件都能复制到 public 中。为啥在 DropBox 中的一个都不能复制呢？难道是权限问题？\n\n于是 `ls -al`, 结果如下：\nHexo 中的文件和文件夹\n\n```bash\ndrwxr-xr-x   3 binwin20  staff   102  8 27 16:21 images\n-rw-r--r--@ 1 binwin20  staff  54092  8 27 10:58 6F869754-243C-47A9-B9A4-A2031948D20A.png\n```\n\nDropBox 中的文件和文件夹\n\n```bash\ndrwxr-xr-x@  4 binwin20  staff    136  8 27 11:47 images\n-rw-r--r--@  1 binwin20  staff  54092  8 27 10:58 6F869754-243C-47A9-B9A4-A2031948D20A.png\n```\n\n文件夹多了一个 `@`，`@` 是啥呢。谷歌一下：它包含了文件的扩展属性。还是不明白，管他呢，把 DropBox 中的复制到 Hexo 中：\n\n```bash\ndrwxr-xr-x@  4 binwin20  staff   136  8 27 11:47 images\n```\n\nHexo 中的图片还是能生到public 中，显然不是 `@` 和权限导致的问题。\n\n于是尝试把 source 放在上一层目录中（跟 Hexo 项目同级）。运行 `hexo clean`, `hexo g`，图片不能复制。。。\n\n然后尝试把路径改成绝对路径，source 名称改成 source1，都试了一下。发现只有 source 在 Hexo 文件夹下才能把其中的图片复制到 public 文件夹下。\n\n猜想应该是 source_dir 的问题。于是全局查找 source_dir。\n\nload_config.js 中：  `ctx.source_dir = pathFn.resolve(baseDir, config.source_dir) + sep;` 没有具体的使用，名称依旧是 source_dir，忽略，继续查找\n\n/hexo/lib/hexo/post.js 中:  `var draftDir = pathFn.join(ctx.source_dir, '_drafts');` 在这里定义了 draftDir，肯定有使用。但是 draft 是草稿的意思。直接忽略，还不如看 post 呢。\n\nsource.js 几行代码，可惜都看不懂。\n\n跟 source_dir 有关的代码都看了一下，然并软。看不懂 js 代码，不知道执行流程。然后想到 hexo 有一个 `--debug` 模式，于是执行 `hexo clean`, `hexo g --debug`,\n\n当 source_dir 指向 DropBox 中时\n\n```bash\n...\nLoading database.\n01:34:17.750 INFO  Start processing\n01:34:17.787 DEBUG Processed: favicon.ico\n01:34:17.820 DEBUG Processed: images/6F869754-243C-47A9-B9A4-A2031948D20A.png\n01:34:17.880 DEBUG Theme config loaded.\n...\n```\n\n当 source_dir 指向 Hexo 中时\n\n```bash\n...\nLoading database.\n01:34:17.750 INFO  Start processing\n01:34:17.787 DEBUG Processed: favicon.ico\n01:34:17.820 DEBUG Processed: images/6F869754-243C-47A9-B9A4-A2031948D20A.png\n01:34:17.880 DEBUG Theme config loaded.\n...\n01:34:20.621 INFO  Generated: about/index.html\n01:34:20.625 INFO  Generated: images/6F869754-243C-47A9-B9A4-A2031948D20A.png\n01:34:20.625 INFO  Generated: images/avatar.jpg\n...\n```\n\n于是全局查找 `Start processing` 和 `Processed:`，还是看不懂 js 代码。\n\n再次谷歌 `hexo source_dir` 搜到 github 中别人提的一个 [issue][]，没有人回答。再看看提 Issue 的人[Evan You][] **Creator of @vuejs, previously @meteor & @google**，哇！Vuejs！我们现在外包给别人做的 H5 页面就是使用 Vuejs 做的。\n\n不能把 source_dir 指向的其他的文件夹，定义这个 source_dir 有软用。不懂 js 😪\n\n在这里死扣也不是办法，于是谷歌 DropBox 同步多文件夹，还真有 [链接][DropBox 同步多文件夹]\n\n以后有时间学学 Js 和 ReactNative。\n\n测试一下上传图片：\n\n{% img \"/images/testimage.gif\" %}\n\n[在 hexo 中优雅的使用本地图片]: https://codefalling.com/2015/12/19/no-pains-with-hexo-local-image/\n[Next]: https://github.com/iissnan/hexo-theme-next\n[issue]: https://github.com/hexojs/hexo/issues/1666\n[Evan You]: https://github.com/yyx990803\n[DropBox 同步多文件夹]: http://www.linuxidc.com/Linux/2011-05/35373.htm\n","slug":"Hexo-图片上传踩坑","published":1,"updated":"2019-03-07T15:01:19.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64ddu000gha9kik3b8akp","content":"<p>一直都使用 DropBox 保存笔记，搭建博客的时候也想着要把重要的东西放到 DropBox 中。于是把 项目中 _config.yml 的 source_dir 指向到 DropBox 的文件夹中。写第一篇博客没发现问题，写第二篇博客也没发现问题。因为没有使用图片，写第三篇博客 [ActiveAndroid 源码学习][] 的时候需要用到图片，但是图片不显示。。。开始了 debug 之路。</p>\n<a id=\"more\"></a>\n<p>于是找谷歌，大概有两种方式：一种是使用第三方图床，另一种是使用本地保存。于是尝试使用七牛图床，我的图片都放在一个文件夹中的，直接把这个文件夹同步到七牛，一个脚本处理所有的图片链接，简直太方便了。于是开通七牛，实名认证，域名绑定的时候，要求域名备案，域名备案，备案。。。</p>\n<p>然后看到 <a href=\"https://codefalling.com/2015/12/19/no-pains-with-hexo-local-image/\" target=\"_blank\" rel=\"noopener\">在 hexo 中优雅的使用本地图片</a> 这篇博客，这里介绍了两种放图片的方式，一种放在根目录（我要的就是这种），另一种是建立一个跟文件名相同名称的目录，然后使用相对路径就能访问。两种都试过了，都没有效果。打开 public 文件夹，在 images 目录下和文章同级目录下都没有找到图片文件。为啥别人能用自己用不了呢？</p>\n<p>首先想到的是，是不是所有的图片都有问题，打开 public/images 目录，发现其中有一些图片包括 gif, jpg, svg 格式的。然后找找这些图片的来源，都是从 <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">Next</a> 主题中复制来的。把自己的图片放这个主题中，显然是可以的，但是跟主题混在一起，以后更改主题图片就又出问题了，这种处理方式显然不对。。再找找有没有其他的没被 Hexo 处理的文件。只有 vendors 这个文件夹是没有被处理的，但是这个文件夹也是从主题复制来的。忽略。。</p>\n<p>谷歌啥图片没有拷贝到 public 目录中，无解。只能自己尝试了。</p>\n<p>首先做的是把 source_dir 改回初始化的值 <code>source</code>，并且在 source/, source/_post/, source/images 文件夹下都放不同的图片。运行 <code>hexo g</code>, 查看 public 目录，发现 source/, source/images 目录下的文件都能复制到 public 中。为啥在 DropBox 中的一个都不能复制呢？难道是权限问题？</p>\n<p>于是 <code>ls -al</code>, 结果如下：<br>Hexo 中的文件和文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x   3 binwin20  staff   102  8 27 16:21 images</span><br><span class=\"line\">-rw-r--r--@ 1 binwin20  staff  54092  8 27 10:58 6F869754-243C-47A9-B9A4-A2031948D20A.png</span><br></pre></td></tr></table></figure>\n<p>DropBox 中的文件和文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x@  4 binwin20  staff    136  8 27 11:47 images</span><br><span class=\"line\">-rw-r--r--@  1 binwin20  staff  54092  8 27 10:58 6F869754-243C-47A9-B9A4-A2031948D20A.png</span><br></pre></td></tr></table></figure>\n<p>文件夹多了一个 <code>@</code>，<code>@</code> 是啥呢。谷歌一下：它包含了文件的扩展属性。还是不明白，管他呢，把 DropBox 中的复制到 Hexo 中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x@  4 binwin20  staff   136  8 27 11:47 images</span><br></pre></td></tr></table></figure>\n<p>Hexo 中的图片还是能生到public 中，显然不是 <code>@</code> 和权限导致的问题。</p>\n<p>于是尝试把 source 放在上一层目录中（跟 Hexo 项目同级）。运行 <code>hexo clean</code>, <code>hexo g</code>，图片不能复制。。。</p>\n<p>然后尝试把路径改成绝对路径，source 名称改成 source1，都试了一下。发现只有 source 在 Hexo 文件夹下才能把其中的图片复制到 public 文件夹下。</p>\n<p>猜想应该是 source_dir 的问题。于是全局查找 source_dir。</p>\n<p>load_config.js 中：  <code>ctx.source_dir = pathFn.resolve(baseDir, config.source_dir) + sep;</code> 没有具体的使用，名称依旧是 source_dir，忽略，继续查找</p>\n<p>/hexo/lib/hexo/post.js 中:  <code>var draftDir = pathFn.join(ctx.source_dir, &#39;_drafts&#39;);</code> 在这里定义了 draftDir，肯定有使用。但是 draft 是草稿的意思。直接忽略，还不如看 post 呢。</p>\n<p>source.js 几行代码，可惜都看不懂。</p>\n<p>跟 source_dir 有关的代码都看了一下，然并软。看不懂 js 代码，不知道执行流程。然后想到 hexo 有一个 <code>--debug</code> 模式，于是执行 <code>hexo clean</code>, <code>hexo g --debug</code>,</p>\n<p>当 source_dir 指向 DropBox 中时</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">Loading database.</span><br><span class=\"line\">01:34:17.750 INFO  Start processing</span><br><span class=\"line\">01:34:17.787 DEBUG Processed: favicon.ico</span><br><span class=\"line\">01:34:17.820 DEBUG Processed: images/6F869754-243C-47A9-B9A4-A2031948D20A.png</span><br><span class=\"line\">01:34:17.880 DEBUG Theme config loaded.</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>当 source_dir 指向 Hexo 中时</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">Loading database.</span><br><span class=\"line\">01:34:17.750 INFO  Start processing</span><br><span class=\"line\">01:34:17.787 DEBUG Processed: favicon.ico</span><br><span class=\"line\">01:34:17.820 DEBUG Processed: images/6F869754-243C-47A9-B9A4-A2031948D20A.png</span><br><span class=\"line\">01:34:17.880 DEBUG Theme config loaded.</span><br><span class=\"line\">...</span><br><span class=\"line\">01:34:20.621 INFO  Generated: about/index.html</span><br><span class=\"line\">01:34:20.625 INFO  Generated: images/6F869754-243C-47A9-B9A4-A2031948D20A.png</span><br><span class=\"line\">01:34:20.625 INFO  Generated: images/avatar.jpg</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>于是全局查找 <code>Start processing</code> 和 <code>Processed:</code>，还是看不懂 js 代码。</p>\n<p>再次谷歌 <code>hexo source_dir</code> 搜到 github 中别人提的一个 <a href=\"https://github.com/hexojs/hexo/issues/1666\" target=\"_blank\" rel=\"noopener\">issue</a>，没有人回答。再看看提 Issue 的人<a href=\"https://github.com/yyx990803\" target=\"_blank\" rel=\"noopener\">Evan You</a> <strong>Creator of @vuejs, previously @meteor &amp; @google</strong>，哇！Vuejs！我们现在外包给别人做的 H5 页面就是使用 Vuejs 做的。</p>\n<p>不能把 source_dir 指向的其他的文件夹，定义这个 source_dir 有软用。不懂 js 😪</p>\n<p>在这里死扣也不是办法，于是谷歌 DropBox 同步多文件夹，还真有 <a href=\"http://www.linuxidc.com/Linux/2011-05/35373.htm\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p>以后有时间学学 Js 和 ReactNative。</p>\n<p>测试一下上传图片：</p>\n<img src=\"/images/testimage.gif\">\n","site":{"data":{}},"excerpt":"<p>一直都使用 DropBox 保存笔记，搭建博客的时候也想着要把重要的东西放到 DropBox 中。于是把 项目中 _config.yml 的 source_dir 指向到 DropBox 的文件夹中。写第一篇博客没发现问题，写第二篇博客也没发现问题。因为没有使用图片，写第三篇博客 [ActiveAndroid 源码学习][] 的时候需要用到图片，但是图片不显示。。。开始了 debug 之路。</p>","more":"<p>于是找谷歌，大概有两种方式：一种是使用第三方图床，另一种是使用本地保存。于是尝试使用七牛图床，我的图片都放在一个文件夹中的，直接把这个文件夹同步到七牛，一个脚本处理所有的图片链接，简直太方便了。于是开通七牛，实名认证，域名绑定的时候，要求域名备案，域名备案，备案。。。</p>\n<p>然后看到 <a href=\"https://codefalling.com/2015/12/19/no-pains-with-hexo-local-image/\" target=\"_blank\" rel=\"noopener\">在 hexo 中优雅的使用本地图片</a> 这篇博客，这里介绍了两种放图片的方式，一种放在根目录（我要的就是这种），另一种是建立一个跟文件名相同名称的目录，然后使用相对路径就能访问。两种都试过了，都没有效果。打开 public 文件夹，在 images 目录下和文章同级目录下都没有找到图片文件。为啥别人能用自己用不了呢？</p>\n<p>首先想到的是，是不是所有的图片都有问题，打开 public/images 目录，发现其中有一些图片包括 gif, jpg, svg 格式的。然后找找这些图片的来源，都是从 <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">Next</a> 主题中复制来的。把自己的图片放这个主题中，显然是可以的，但是跟主题混在一起，以后更改主题图片就又出问题了，这种处理方式显然不对。。再找找有没有其他的没被 Hexo 处理的文件。只有 vendors 这个文件夹是没有被处理的，但是这个文件夹也是从主题复制来的。忽略。。</p>\n<p>谷歌啥图片没有拷贝到 public 目录中，无解。只能自己尝试了。</p>\n<p>首先做的是把 source_dir 改回初始化的值 <code>source</code>，并且在 source/, source/_post/, source/images 文件夹下都放不同的图片。运行 <code>hexo g</code>, 查看 public 目录，发现 source/, source/images 目录下的文件都能复制到 public 中。为啥在 DropBox 中的一个都不能复制呢？难道是权限问题？</p>\n<p>于是 <code>ls -al</code>, 结果如下：<br>Hexo 中的文件和文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x   3 binwin20  staff   102  8 27 16:21 images</span><br><span class=\"line\">-rw-r--r--@ 1 binwin20  staff  54092  8 27 10:58 6F869754-243C-47A9-B9A4-A2031948D20A.png</span><br></pre></td></tr></table></figure>\n<p>DropBox 中的文件和文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x@  4 binwin20  staff    136  8 27 11:47 images</span><br><span class=\"line\">-rw-r--r--@  1 binwin20  staff  54092  8 27 10:58 6F869754-243C-47A9-B9A4-A2031948D20A.png</span><br></pre></td></tr></table></figure>\n<p>文件夹多了一个 <code>@</code>，<code>@</code> 是啥呢。谷歌一下：它包含了文件的扩展属性。还是不明白，管他呢，把 DropBox 中的复制到 Hexo 中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x@  4 binwin20  staff   136  8 27 11:47 images</span><br></pre></td></tr></table></figure>\n<p>Hexo 中的图片还是能生到public 中，显然不是 <code>@</code> 和权限导致的问题。</p>\n<p>于是尝试把 source 放在上一层目录中（跟 Hexo 项目同级）。运行 <code>hexo clean</code>, <code>hexo g</code>，图片不能复制。。。</p>\n<p>然后尝试把路径改成绝对路径，source 名称改成 source1，都试了一下。发现只有 source 在 Hexo 文件夹下才能把其中的图片复制到 public 文件夹下。</p>\n<p>猜想应该是 source_dir 的问题。于是全局查找 source_dir。</p>\n<p>load_config.js 中：  <code>ctx.source_dir = pathFn.resolve(baseDir, config.source_dir) + sep;</code> 没有具体的使用，名称依旧是 source_dir，忽略，继续查找</p>\n<p>/hexo/lib/hexo/post.js 中:  <code>var draftDir = pathFn.join(ctx.source_dir, &#39;_drafts&#39;);</code> 在这里定义了 draftDir，肯定有使用。但是 draft 是草稿的意思。直接忽略，还不如看 post 呢。</p>\n<p>source.js 几行代码，可惜都看不懂。</p>\n<p>跟 source_dir 有关的代码都看了一下，然并软。看不懂 js 代码，不知道执行流程。然后想到 hexo 有一个 <code>--debug</code> 模式，于是执行 <code>hexo clean</code>, <code>hexo g --debug</code>,</p>\n<p>当 source_dir 指向 DropBox 中时</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">Loading database.</span><br><span class=\"line\">01:34:17.750 INFO  Start processing</span><br><span class=\"line\">01:34:17.787 DEBUG Processed: favicon.ico</span><br><span class=\"line\">01:34:17.820 DEBUG Processed: images/6F869754-243C-47A9-B9A4-A2031948D20A.png</span><br><span class=\"line\">01:34:17.880 DEBUG Theme config loaded.</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>当 source_dir 指向 Hexo 中时</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">Loading database.</span><br><span class=\"line\">01:34:17.750 INFO  Start processing</span><br><span class=\"line\">01:34:17.787 DEBUG Processed: favicon.ico</span><br><span class=\"line\">01:34:17.820 DEBUG Processed: images/6F869754-243C-47A9-B9A4-A2031948D20A.png</span><br><span class=\"line\">01:34:17.880 DEBUG Theme config loaded.</span><br><span class=\"line\">...</span><br><span class=\"line\">01:34:20.621 INFO  Generated: about/index.html</span><br><span class=\"line\">01:34:20.625 INFO  Generated: images/6F869754-243C-47A9-B9A4-A2031948D20A.png</span><br><span class=\"line\">01:34:20.625 INFO  Generated: images/avatar.jpg</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>于是全局查找 <code>Start processing</code> 和 <code>Processed:</code>，还是看不懂 js 代码。</p>\n<p>再次谷歌 <code>hexo source_dir</code> 搜到 github 中别人提的一个 <a href=\"https://github.com/hexojs/hexo/issues/1666\" target=\"_blank\" rel=\"noopener\">issue</a>，没有人回答。再看看提 Issue 的人<a href=\"https://github.com/yyx990803\" target=\"_blank\" rel=\"noopener\">Evan You</a> <strong>Creator of @vuejs, previously @meteor &amp; @google</strong>，哇！Vuejs！我们现在外包给别人做的 H5 页面就是使用 Vuejs 做的。</p>\n<p>不能把 source_dir 指向的其他的文件夹，定义这个 source_dir 有软用。不懂 js 😪</p>\n<p>在这里死扣也不是办法，于是谷歌 DropBox 同步多文件夹，还真有 <a href=\"http://www.linuxidc.com/Linux/2011-05/35373.htm\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p>以后有时间学学 Js 和 ReactNative。</p>\n<p>测试一下上传图片：</p>\n<img src=\"/images/testimage.gif\">"},{"title":"Mac 鼠标手势","date":"2018-06-11T12:48:26.000Z","blog":true,"_content":"\n\n\n用习惯了苹果触摸板之后，换成外接键盘和鼠标之后，感觉鼠标真是太难用了。尤其是习惯了三个手指切换工作空间，鼠标根本没法完成这个快捷方式（苹果鼠标可以切换工作空间，但是 ds 我买不起）。\n\nGoogle 之后发现，除了三个手指之外，还可以用快捷键切换工作空间的，`control + →` 切换到右侧工作空间 `control + ←` 切换到左侧工作空间。之前设置电脑的时候，习惯了三个手指，觉得这个快捷方式没用于是把它禁掉了。在设置中把快捷键勾上后，总算可以不用触摸板就能切换工作空间了。\n\n用了半天之后发现，这种快捷方式不够顺手。如果能把鼠标滚轮的两侧按钮使用上就完美了，摁向左边，切换到左侧工作空间，摁向右边，切换到右侧工作空间。但是没找到我的鼠标的管理软件。然后继续 google，终于找到一个好用的东西 [xGestures][]\n\n[xGestures][] 之前要钱的，现在免费了，感谢作者 Brian Kendall。\n\n使用 xGestures 可以设置各种自定义的鼠标手势，来执行常用操作和非常用操作。其中有一个特别有用的功能，就是可以运行一个 apple script。apple script 是 Mac 上的脚本语言，可以用来执行各种操作。我这里切换工作空间就是使用 apple script 完成的。下面进入正题：\n\n<!-- more -->\n\n## 安装 xGestures\n\n从 http://briankendall.net/xGestures/download.htm 下载 xGestures，下载完成之后，双击安装，安装步骤参考 https://briian.com/6172/\n\n## 自定义手势\n\n1. 修改切换左右工作空间的快捷键\n\n    今天踩了一个小小的坑，发现 `key code 124 using {control down}` 在我的电脑上不起作用，不懂为啥。后面把快捷键改成不包含 ← 和 → 的就好了。所以，要先修改一下快捷键，尽量避免跟其他键冲突\n\n    System Preferences... -> keyboard -> Shortcuts -> Mission Control\n\n    1. 点击 Move left a space -> 回车 -> 同时按下 control + option + command + [\n    2. 点击 Move right a space -> 回车 -> 同时按下 control + option + command + ]\n\n2. 自定义 apple script\n\n    在 ~/.mybash 或者其他文件夹中定义文件 gesture_to_next_space.scpt，并输入下面内容\n\n        tell application \"System Events\"\n            key code 33 using {option down, control down, command down}\n        end tell\n\n    再新建文件 gesture_to_previous_space.scpt，并输入下面内容\n\n        tell application \"System Events\"\n            key code 33 using {option down, control down, command down}\n        end tell\n\n\n\n3. 跳转到 xGestures 设置面板\n    \n    System Preferences... -> xGestures -> Applications \n\n4. 添加手势\n    \n    New Gesture -> 选择手势(比如 Up Right) -> Description 可写可不写 -> Gesture action 选择 Run Apple Script -> 点击 Choose file -> 选择刚刚的文件 gesture_to_next_space.scpt\n\n    同理设置 Up Left 手势。最后点击 Apply Settings。\n\n5. 测试是否成功\n    \n    按住鼠标右键，向上移动鼠标，再向右移动鼠标，松开右键。应该就跳转到右侧工作空间了。\n\nMac 键盘 KeyCode https://eastmanreference.com/complete-list-of-applescript-key-codes\n\n\n\n\n[xGestures]: http://briankendall.net/xGestures/download.htm","source":"_posts/Mac_鼠标手势.md","raw":"---\ntitle: Mac 鼠标手势\ndate: 2018-6-11 20:48:26\ncategories: 小工具\ntags: [mac, apple script, xGestures]\nblog: true\n---\n\n\n\n用习惯了苹果触摸板之后，换成外接键盘和鼠标之后，感觉鼠标真是太难用了。尤其是习惯了三个手指切换工作空间，鼠标根本没法完成这个快捷方式（苹果鼠标可以切换工作空间，但是 ds 我买不起）。\n\nGoogle 之后发现，除了三个手指之外，还可以用快捷键切换工作空间的，`control + →` 切换到右侧工作空间 `control + ←` 切换到左侧工作空间。之前设置电脑的时候，习惯了三个手指，觉得这个快捷方式没用于是把它禁掉了。在设置中把快捷键勾上后，总算可以不用触摸板就能切换工作空间了。\n\n用了半天之后发现，这种快捷方式不够顺手。如果能把鼠标滚轮的两侧按钮使用上就完美了，摁向左边，切换到左侧工作空间，摁向右边，切换到右侧工作空间。但是没找到我的鼠标的管理软件。然后继续 google，终于找到一个好用的东西 [xGestures][]\n\n[xGestures][] 之前要钱的，现在免费了，感谢作者 Brian Kendall。\n\n使用 xGestures 可以设置各种自定义的鼠标手势，来执行常用操作和非常用操作。其中有一个特别有用的功能，就是可以运行一个 apple script。apple script 是 Mac 上的脚本语言，可以用来执行各种操作。我这里切换工作空间就是使用 apple script 完成的。下面进入正题：\n\n<!-- more -->\n\n## 安装 xGestures\n\n从 http://briankendall.net/xGestures/download.htm 下载 xGestures，下载完成之后，双击安装，安装步骤参考 https://briian.com/6172/\n\n## 自定义手势\n\n1. 修改切换左右工作空间的快捷键\n\n    今天踩了一个小小的坑，发现 `key code 124 using {control down}` 在我的电脑上不起作用，不懂为啥。后面把快捷键改成不包含 ← 和 → 的就好了。所以，要先修改一下快捷键，尽量避免跟其他键冲突\n\n    System Preferences... -> keyboard -> Shortcuts -> Mission Control\n\n    1. 点击 Move left a space -> 回车 -> 同时按下 control + option + command + [\n    2. 点击 Move right a space -> 回车 -> 同时按下 control + option + command + ]\n\n2. 自定义 apple script\n\n    在 ~/.mybash 或者其他文件夹中定义文件 gesture_to_next_space.scpt，并输入下面内容\n\n        tell application \"System Events\"\n            key code 33 using {option down, control down, command down}\n        end tell\n\n    再新建文件 gesture_to_previous_space.scpt，并输入下面内容\n\n        tell application \"System Events\"\n            key code 33 using {option down, control down, command down}\n        end tell\n\n\n\n3. 跳转到 xGestures 设置面板\n    \n    System Preferences... -> xGestures -> Applications \n\n4. 添加手势\n    \n    New Gesture -> 选择手势(比如 Up Right) -> Description 可写可不写 -> Gesture action 选择 Run Apple Script -> 点击 Choose file -> 选择刚刚的文件 gesture_to_next_space.scpt\n\n    同理设置 Up Left 手势。最后点击 Apply Settings。\n\n5. 测试是否成功\n    \n    按住鼠标右键，向上移动鼠标，再向右移动鼠标，松开右键。应该就跳转到右侧工作空间了。\n\nMac 键盘 KeyCode https://eastmanreference.com/complete-list-of-applescript-key-codes\n\n\n\n\n[xGestures]: http://briankendall.net/xGestures/download.htm","slug":"Mac_鼠标手势","published":1,"updated":"2019-03-07T15:01:19.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64de6000hha9kjzxu2kx7","content":"<p>用习惯了苹果触摸板之后，换成外接键盘和鼠标之后，感觉鼠标真是太难用了。尤其是习惯了三个手指切换工作空间，鼠标根本没法完成这个快捷方式（苹果鼠标可以切换工作空间，但是 ds 我买不起）。</p>\n<p>Google 之后发现，除了三个手指之外，还可以用快捷键切换工作空间的，<code>control + →</code> 切换到右侧工作空间 <code>control + ←</code> 切换到左侧工作空间。之前设置电脑的时候，习惯了三个手指，觉得这个快捷方式没用于是把它禁掉了。在设置中把快捷键勾上后，总算可以不用触摸板就能切换工作空间了。</p>\n<p>用了半天之后发现，这种快捷方式不够顺手。如果能把鼠标滚轮的两侧按钮使用上就完美了，摁向左边，切换到左侧工作空间，摁向右边，切换到右侧工作空间。但是没找到我的鼠标的管理软件。然后继续 google，终于找到一个好用的东西 <a href=\"http://briankendall.net/xGestures/download.htm\" target=\"_blank\" rel=\"noopener\">xGestures</a></p>\n<p><a href=\"http://briankendall.net/xGestures/download.htm\" target=\"_blank\" rel=\"noopener\">xGestures</a> 之前要钱的，现在免费了，感谢作者 Brian Kendall。</p>\n<p>使用 xGestures 可以设置各种自定义的鼠标手势，来执行常用操作和非常用操作。其中有一个特别有用的功能，就是可以运行一个 apple script。apple script 是 Mac 上的脚本语言，可以用来执行各种操作。我这里切换工作空间就是使用 apple script 完成的。下面进入正题：</p>\n<a id=\"more\"></a>\n<h2 id=\"安装-xGestures\"><a href=\"#安装-xGestures\" class=\"headerlink\" title=\"安装 xGestures\"></a>安装 xGestures</h2><p>从 <a href=\"http://briankendall.net/xGestures/download.htm\" target=\"_blank\" rel=\"noopener\">http://briankendall.net/xGestures/download.htm</a> 下载 xGestures，下载完成之后，双击安装，安装步骤参考 <a href=\"https://briian.com/6172/\" target=\"_blank\" rel=\"noopener\">https://briian.com/6172/</a></p>\n<h2 id=\"自定义手势\"><a href=\"#自定义手势\" class=\"headerlink\" title=\"自定义手势\"></a>自定义手势</h2><ol>\n<li><p>修改切换左右工作空间的快捷键</p>\n<p> 今天踩了一个小小的坑，发现 <code>key code 124 using {control down}</code> 在我的电脑上不起作用，不懂为啥。后面把快捷键改成不包含 ← 和 → 的就好了。所以，要先修改一下快捷键，尽量避免跟其他键冲突</p>\n<p> System Preferences… -&gt; keyboard -&gt; Shortcuts -&gt; Mission Control</p>\n<ol>\n<li>点击 Move left a space -&gt; 回车 -&gt; 同时按下 control + option + command + [</li>\n<li>点击 Move right a space -&gt; 回车 -&gt; 同时按下 control + option + command + ]</li>\n</ol>\n</li>\n<li><p>自定义 apple script</p>\n<p> 在 ~/.mybash 或者其他文件夹中定义文件 gesture_to_next_space.scpt，并输入下面内容</p>\n<pre><code>tell application &quot;System Events&quot;\n    key code 33 using {option down, control down, command down}\nend tell\n</code></pre><p> 再新建文件 gesture_to_previous_space.scpt，并输入下面内容</p>\n<pre><code>tell application &quot;System Events&quot;\n    key code 33 using {option down, control down, command down}\nend tell\n</code></pre></li>\n</ol>\n<ol start=\"3\">\n<li><p>跳转到 xGestures 设置面板</p>\n<p> System Preferences… -&gt; xGestures -&gt; Applications </p>\n</li>\n<li><p>添加手势</p>\n<p> New Gesture -&gt; 选择手势(比如 Up Right) -&gt; Description 可写可不写 -&gt; Gesture action 选择 Run Apple Script -&gt; 点击 Choose file -&gt; 选择刚刚的文件 gesture_to_next_space.scpt</p>\n<p> 同理设置 Up Left 手势。最后点击 Apply Settings。</p>\n</li>\n<li><p>测试是否成功</p>\n<p> 按住鼠标右键，向上移动鼠标，再向右移动鼠标，松开右键。应该就跳转到右侧工作空间了。</p>\n</li>\n</ol>\n<p>Mac 键盘 KeyCode <a href=\"https://eastmanreference.com/complete-list-of-applescript-key-codes\" target=\"_blank\" rel=\"noopener\">https://eastmanreference.com/complete-list-of-applescript-key-codes</a></p>\n","site":{"data":{}},"excerpt":"<p>用习惯了苹果触摸板之后，换成外接键盘和鼠标之后，感觉鼠标真是太难用了。尤其是习惯了三个手指切换工作空间，鼠标根本没法完成这个快捷方式（苹果鼠标可以切换工作空间，但是 ds 我买不起）。</p>\n<p>Google 之后发现，除了三个手指之外，还可以用快捷键切换工作空间的，<code>control + →</code> 切换到右侧工作空间 <code>control + ←</code> 切换到左侧工作空间。之前设置电脑的时候，习惯了三个手指，觉得这个快捷方式没用于是把它禁掉了。在设置中把快捷键勾上后，总算可以不用触摸板就能切换工作空间了。</p>\n<p>用了半天之后发现，这种快捷方式不够顺手。如果能把鼠标滚轮的两侧按钮使用上就完美了，摁向左边，切换到左侧工作空间，摁向右边，切换到右侧工作空间。但是没找到我的鼠标的管理软件。然后继续 google，终于找到一个好用的东西 <a href=\"http://briankendall.net/xGestures/download.htm\" target=\"_blank\" rel=\"noopener\">xGestures</a></p>\n<p><a href=\"http://briankendall.net/xGestures/download.htm\" target=\"_blank\" rel=\"noopener\">xGestures</a> 之前要钱的，现在免费了，感谢作者 Brian Kendall。</p>\n<p>使用 xGestures 可以设置各种自定义的鼠标手势，来执行常用操作和非常用操作。其中有一个特别有用的功能，就是可以运行一个 apple script。apple script 是 Mac 上的脚本语言，可以用来执行各种操作。我这里切换工作空间就是使用 apple script 完成的。下面进入正题：</p>","more":"<h2 id=\"安装-xGestures\"><a href=\"#安装-xGestures\" class=\"headerlink\" title=\"安装 xGestures\"></a>安装 xGestures</h2><p>从 <a href=\"http://briankendall.net/xGestures/download.htm\" target=\"_blank\" rel=\"noopener\">http://briankendall.net/xGestures/download.htm</a> 下载 xGestures，下载完成之后，双击安装，安装步骤参考 <a href=\"https://briian.com/6172/\" target=\"_blank\" rel=\"noopener\">https://briian.com/6172/</a></p>\n<h2 id=\"自定义手势\"><a href=\"#自定义手势\" class=\"headerlink\" title=\"自定义手势\"></a>自定义手势</h2><ol>\n<li><p>修改切换左右工作空间的快捷键</p>\n<p> 今天踩了一个小小的坑，发现 <code>key code 124 using {control down}</code> 在我的电脑上不起作用，不懂为啥。后面把快捷键改成不包含 ← 和 → 的就好了。所以，要先修改一下快捷键，尽量避免跟其他键冲突</p>\n<p> System Preferences… -&gt; keyboard -&gt; Shortcuts -&gt; Mission Control</p>\n<ol>\n<li>点击 Move left a space -&gt; 回车 -&gt; 同时按下 control + option + command + [</li>\n<li>点击 Move right a space -&gt; 回车 -&gt; 同时按下 control + option + command + ]</li>\n</ol>\n</li>\n<li><p>自定义 apple script</p>\n<p> 在 ~/.mybash 或者其他文件夹中定义文件 gesture_to_next_space.scpt，并输入下面内容</p>\n<pre><code>tell application &quot;System Events&quot;\n    key code 33 using {option down, control down, command down}\nend tell\n</code></pre><p> 再新建文件 gesture_to_previous_space.scpt，并输入下面内容</p>\n<pre><code>tell application &quot;System Events&quot;\n    key code 33 using {option down, control down, command down}\nend tell\n</code></pre></li>\n</ol>\n<ol start=\"3\">\n<li><p>跳转到 xGestures 设置面板</p>\n<p> System Preferences… -&gt; xGestures -&gt; Applications </p>\n</li>\n<li><p>添加手势</p>\n<p> New Gesture -&gt; 选择手势(比如 Up Right) -&gt; Description 可写可不写 -&gt; Gesture action 选择 Run Apple Script -&gt; 点击 Choose file -&gt; 选择刚刚的文件 gesture_to_next_space.scpt</p>\n<p> 同理设置 Up Left 手势。最后点击 Apply Settings。</p>\n</li>\n<li><p>测试是否成功</p>\n<p> 按住鼠标右键，向上移动鼠标，再向右移动鼠标，松开右键。应该就跳转到右侧工作空间了。</p>\n</li>\n</ol>\n<p>Mac 键盘 KeyCode <a href=\"https://eastmanreference.com/complete-list-of-applescript-key-codes\" target=\"_blank\" rel=\"noopener\">https://eastmanreference.com/complete-list-of-applescript-key-codes</a></p>"},{"title":"StrictMode 打印 log 到文件","date":"2019-01-22T08:03:41.000Z","blog":true,"_content":"\n\n\nStrict Mode 是 Android 性能调优的工具，用来检查程序运行时有哪些违例的情况。比如在主线程进行耗时操作、检查 Activity 是否泄露、检查 Closeable 对象是否未关闭(如，Sqlite Cursor 对象)。\n\n如何使用及其原理可以查看[技术小黑屋](https://droidyue.com/blog/2015/09/26/android-tuning-tool-strictmode/)。\n\n配置完成之后，发现 log 只能打印到 logcat 中，不能自定义输出到指定的文件。\n\n<!-- more -->\n\n尝试了两种方案，都不行\n\n1. 把 logcat 输出到指定文件，[Stack Overflow](https://stackoverflow.com/questions/19565685/saving-logcat-to-a-text-file-in-android-device)，这里的权限 READ_LOGS 只能给 system app。\n2. 使用 [android-hidden-api](https://github.com/anggrayudi/android-hidden-api) 替换 SDK 中的 android.jar 文件，直接访问 @hide 类和方法。替换 api-28 编译不通过，替换 api-27 打包出来之后，安装到手机(Android P 系统)，会提示找不到 @hide 的类 ViolationLogger。\n\n最后只能使用 StrictMode 类中提供的新方法 penaltyListener()，但是这种方式只能在 Android-P 上使用。\n\n```java\nif (BuildConfig.DEBUG) {\n    StrictMode.ThreadPolicy.Builder builder1 = new StrictMode.ThreadPolicy.Builder();\n    builder1.detectAll().penaltyLog();\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {\n        builder1.penaltyListener(Executors.newSingleThreadExecutor(),\n                v -> Log.d(TAG, \"StrictMode()[Thread]: \" + v));\n    }\n    StrictMode.setThreadPolicy(builder1.build());\n    StrictMode.VmPolicy.Builder builder2 = new StrictMode.VmPolicy.Builder();\n    builder2.detectAll().penaltyLog();\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {\n        builder2.penaltyListener(Executors.newSingleThreadExecutor(),\n                v -> Log.d(TAG, \"StrictMode()[Vm]: \" + v));\n    }\n    StrictMode.setVmPolicy(builder2.build());\n}\n```\n","source":"_posts/StrictMode_打印_log_到文件.md","raw":"---\ntitle: StrictMode 打印 log 到文件\ndate: 2019-1-22 16:03:41\ncategories: Android\ntags: [Android, Strict Mode]\nblog: true\n---\n\n\n\nStrict Mode 是 Android 性能调优的工具，用来检查程序运行时有哪些违例的情况。比如在主线程进行耗时操作、检查 Activity 是否泄露、检查 Closeable 对象是否未关闭(如，Sqlite Cursor 对象)。\n\n如何使用及其原理可以查看[技术小黑屋](https://droidyue.com/blog/2015/09/26/android-tuning-tool-strictmode/)。\n\n配置完成之后，发现 log 只能打印到 logcat 中，不能自定义输出到指定的文件。\n\n<!-- more -->\n\n尝试了两种方案，都不行\n\n1. 把 logcat 输出到指定文件，[Stack Overflow](https://stackoverflow.com/questions/19565685/saving-logcat-to-a-text-file-in-android-device)，这里的权限 READ_LOGS 只能给 system app。\n2. 使用 [android-hidden-api](https://github.com/anggrayudi/android-hidden-api) 替换 SDK 中的 android.jar 文件，直接访问 @hide 类和方法。替换 api-28 编译不通过，替换 api-27 打包出来之后，安装到手机(Android P 系统)，会提示找不到 @hide 的类 ViolationLogger。\n\n最后只能使用 StrictMode 类中提供的新方法 penaltyListener()，但是这种方式只能在 Android-P 上使用。\n\n```java\nif (BuildConfig.DEBUG) {\n    StrictMode.ThreadPolicy.Builder builder1 = new StrictMode.ThreadPolicy.Builder();\n    builder1.detectAll().penaltyLog();\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {\n        builder1.penaltyListener(Executors.newSingleThreadExecutor(),\n                v -> Log.d(TAG, \"StrictMode()[Thread]: \" + v));\n    }\n    StrictMode.setThreadPolicy(builder1.build());\n    StrictMode.VmPolicy.Builder builder2 = new StrictMode.VmPolicy.Builder();\n    builder2.detectAll().penaltyLog();\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {\n        builder2.penaltyListener(Executors.newSingleThreadExecutor(),\n                v -> Log.d(TAG, \"StrictMode()[Vm]: \" + v));\n    }\n    StrictMode.setVmPolicy(builder2.build());\n}\n```\n","slug":"StrictMode_打印_log_到文件","published":1,"updated":"2019-03-07T15:01:19.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64de9000iha9kgz02xung","content":"<p>Strict Mode 是 Android 性能调优的工具，用来检查程序运行时有哪些违例的情况。比如在主线程进行耗时操作、检查 Activity 是否泄露、检查 Closeable 对象是否未关闭(如，Sqlite Cursor 对象)。</p>\n<p>如何使用及其原理可以查看<a href=\"https://droidyue.com/blog/2015/09/26/android-tuning-tool-strictmode/\" target=\"_blank\" rel=\"noopener\">技术小黑屋</a>。</p>\n<p>配置完成之后，发现 log 只能打印到 logcat 中，不能自定义输出到指定的文件。</p>\n<a id=\"more\"></a>\n<p>尝试了两种方案，都不行</p>\n<ol>\n<li>把 logcat 输出到指定文件，<a href=\"https://stackoverflow.com/questions/19565685/saving-logcat-to-a-text-file-in-android-device\" target=\"_blank\" rel=\"noopener\">Stack Overflow</a>，这里的权限 READ_LOGS 只能给 system app。</li>\n<li>使用 <a href=\"https://github.com/anggrayudi/android-hidden-api\" target=\"_blank\" rel=\"noopener\">android-hidden-api</a> 替换 SDK 中的 android.jar 文件，直接访问 @hide 类和方法。替换 api-28 编译不通过，替换 api-27 打包出来之后，安装到手机(Android P 系统)，会提示找不到 @hide 的类 ViolationLogger。</li>\n</ol>\n<p>最后只能使用 StrictMode 类中提供的新方法 penaltyListener()，但是这种方式只能在 Android-P 上使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (BuildConfig.DEBUG) &#123;</span><br><span class=\"line\">    StrictMode.ThreadPolicy.Builder builder1 = <span class=\"keyword\">new</span> StrictMode.ThreadPolicy.Builder();</span><br><span class=\"line\">    builder1.detectAll().penaltyLog();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.P) &#123;</span><br><span class=\"line\">        builder1.penaltyListener(Executors.newSingleThreadExecutor(),</span><br><span class=\"line\">                v -&gt; Log.d(TAG, <span class=\"string\">\"StrictMode()[Thread]: \"</span> + v));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    StrictMode.setThreadPolicy(builder1.build());</span><br><span class=\"line\">    StrictMode.VmPolicy.Builder builder2 = <span class=\"keyword\">new</span> StrictMode.VmPolicy.Builder();</span><br><span class=\"line\">    builder2.detectAll().penaltyLog();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.P) &#123;</span><br><span class=\"line\">        builder2.penaltyListener(Executors.newSingleThreadExecutor(),</span><br><span class=\"line\">                v -&gt; Log.d(TAG, <span class=\"string\">\"StrictMode()[Vm]: \"</span> + v));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    StrictMode.setVmPolicy(builder2.build());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Strict Mode 是 Android 性能调优的工具，用来检查程序运行时有哪些违例的情况。比如在主线程进行耗时操作、检查 Activity 是否泄露、检查 Closeable 对象是否未关闭(如，Sqlite Cursor 对象)。</p>\n<p>如何使用及其原理可以查看<a href=\"https://droidyue.com/blog/2015/09/26/android-tuning-tool-strictmode/\" target=\"_blank\" rel=\"noopener\">技术小黑屋</a>。</p>\n<p>配置完成之后，发现 log 只能打印到 logcat 中，不能自定义输出到指定的文件。</p>","more":"<p>尝试了两种方案，都不行</p>\n<ol>\n<li>把 logcat 输出到指定文件，<a href=\"https://stackoverflow.com/questions/19565685/saving-logcat-to-a-text-file-in-android-device\" target=\"_blank\" rel=\"noopener\">Stack Overflow</a>，这里的权限 READ_LOGS 只能给 system app。</li>\n<li>使用 <a href=\"https://github.com/anggrayudi/android-hidden-api\" target=\"_blank\" rel=\"noopener\">android-hidden-api</a> 替换 SDK 中的 android.jar 文件，直接访问 @hide 类和方法。替换 api-28 编译不通过，替换 api-27 打包出来之后，安装到手机(Android P 系统)，会提示找不到 @hide 的类 ViolationLogger。</li>\n</ol>\n<p>最后只能使用 StrictMode 类中提供的新方法 penaltyListener()，但是这种方式只能在 Android-P 上使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (BuildConfig.DEBUG) &#123;</span><br><span class=\"line\">    StrictMode.ThreadPolicy.Builder builder1 = <span class=\"keyword\">new</span> StrictMode.ThreadPolicy.Builder();</span><br><span class=\"line\">    builder1.detectAll().penaltyLog();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.P) &#123;</span><br><span class=\"line\">        builder1.penaltyListener(Executors.newSingleThreadExecutor(),</span><br><span class=\"line\">                v -&gt; Log.d(TAG, <span class=\"string\">\"StrictMode()[Thread]: \"</span> + v));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    StrictMode.setThreadPolicy(builder1.build());</span><br><span class=\"line\">    StrictMode.VmPolicy.Builder builder2 = <span class=\"keyword\">new</span> StrictMode.VmPolicy.Builder();</span><br><span class=\"line\">    builder2.detectAll().penaltyLog();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.P) &#123;</span><br><span class=\"line\">        builder2.penaltyListener(Executors.newSingleThreadExecutor(),</span><br><span class=\"line\">                v -&gt; Log.d(TAG, <span class=\"string\">\"StrictMode()[Vm]: \"</span> + v));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    StrictMode.setVmPolicy(builder2.build());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Stetho 自定义 databases 目录","date":"2017-03-17T12:33:47.000Z","blog":true,"_content":"\n\n\n以前做小项目，特别懒，数据存储直接放在 SharePreferences 中，开发的时候，使用 Stetho 直接在 Chrome 中修改存储的数据。现在的项目就不一样了，数据都存在数据库中。\n\n今天想修改一下数据，测试一下显示效果，结果傻眼了。公司项目里没有加入 Stetho 库，使用其他方式需要破解手机，太麻烦了。然后就在公司项目中加入了 Stetho，然后踩了一天的坑。\n\n加入 Stetho 之后，在 Chrome 中不显示数据库，网上搜了一下，有说更新 Stetho 之后不显示的，以为是 Stetho 版本问题，1.4.2; 1.4.0; 1.3.1 都试了，还是没效果。。\n\n然后自己写一个 test 数据库放在 databases 目录下，居然显示了。再把我们项目的数据库从 files 目录下拷贝到 databases 目录中，也显示了。。\n\nStetho 默认只读取内部存储中 databases 中的数据库，然而我们的项目把数据库文件放在 files 文件夹下。网上没有找到如何配置 databases 的方法。于是乎下载了 Stetho 源代码。\n\n<!-- more -->\n\n目的是修改默认 databases 目录，有目标之后就简单了。全局找 database，找到 DatabaesFileProvider 类，这个类包含 getDatabaseFiles() 方法，基本可以肯定是需要找的类了。再找这个类的使用，可以找到 DefaultDatabaseFilesProvider，其 getDatabseFiles() 的实现是，读取内部存储的 databases 文件夹下的所有文件。\n\n替换这个类，应该就能达到自己的目标了。然后查找这个类的使用。有两个地方创建这个对象，一个在 SqliteDatabaseDriver 构造方法中，一个在 Stetho 类中。Stetho 中的当 hasSqliteDatabaseDriver 为 false 才创建 DefaultDatabaseFilesProvider 对象。先替换 SqliteDatabaseDriver 中的 DefaultDatabaseFilesProvider 吧，再全局查找一下。发现只有 javadoc 中有 new SqliteDatabaseDriver 对象。如下：\n\n```java\n    /**\n     * Customize the location of database files that Stetho will propogate in the UI.  Android's\n     * {@link Context#getDatabasePath} method will be used by default if not overridden here.\n     *\n     * <p>This method is deprecated and instead it is recommended that you explicitly\n     * configure the {@link SqliteDatabaseDriver} as with:</p>\n     * <pre>\n     *   provideDatabaseDriver(\n     *     new SqliteDatabaseDriver(\n     *       context,\n     *       new MyDatabaseFilesProvider(...),\n     *       new DefaultDatabaseConnectionProvider(...)))\n     * </pre>\n     *\n     * @deprecated See example alternative above.\n     */\n    @Deprecated\n    public DefaultInspectorModulesBuilder databaseFiles(DatabaseFilesProvider provider) {\n      mDatabaseFilesProvider = provider;\n      return this;\n    }\n```\n\njavadoc 中写的很清楚了。默认使用 Android 默认的数据库目录，如果要更改默认路径可以使用这个方法实现。最终修改如下：\n\n```java\nSqliteDatabaseDriver sqliteDriver = new SqliteDatabaseDriver(\n            getContextRC(),\n            new DatabaseFilesProvider() {\n                @Override\n                public List<File> getDatabaseFiles() {\n                    List<File> files = new ArrayList<File>();\n                    files.add(new File(getContextRC().getFilesDir() + \"/user/abc.db\")); // files/user/abc.db\n                    files.add(new File(getContextRC().getFilesDir() + \"/settings.db\")); // files/settings.db\n                    return files;\n                }\n            },\n            new DefaultDatabaseConnectionProvider());\nStetho.initialize(Stetho.newInitializerBuilder(this)\n        .enableDumpapp(Stetho.defaultDumperPluginsProvider(this))\n        .enableWebKitInspector(new InspectorModulesProvider() {\n            @Override\n            public Iterable<ChromeDevtoolsDomain> get() {\n                return new Stetho.DefaultInspectorModulesBuilder(getContextRC())\n                        .provideDatabaseDriver(sqliteDriver)\n                        .finish();\n            }\n        })\n        .build());\n```\n\n就可以使用 Chrome 浏览数据库了。\n\n\n","source":"_posts/Stetho-自定义-databases-目录.md","raw":"---\ntitle: Stetho 自定义 databases 目录\ndate: 2017-03-17 20:33:47\ntags: [Stetho, 修改默认databases目录]\ncategories: Android\nblog: true\n---\n\n\n\n以前做小项目，特别懒，数据存储直接放在 SharePreferences 中，开发的时候，使用 Stetho 直接在 Chrome 中修改存储的数据。现在的项目就不一样了，数据都存在数据库中。\n\n今天想修改一下数据，测试一下显示效果，结果傻眼了。公司项目里没有加入 Stetho 库，使用其他方式需要破解手机，太麻烦了。然后就在公司项目中加入了 Stetho，然后踩了一天的坑。\n\n加入 Stetho 之后，在 Chrome 中不显示数据库，网上搜了一下，有说更新 Stetho 之后不显示的，以为是 Stetho 版本问题，1.4.2; 1.4.0; 1.3.1 都试了，还是没效果。。\n\n然后自己写一个 test 数据库放在 databases 目录下，居然显示了。再把我们项目的数据库从 files 目录下拷贝到 databases 目录中，也显示了。。\n\nStetho 默认只读取内部存储中 databases 中的数据库，然而我们的项目把数据库文件放在 files 文件夹下。网上没有找到如何配置 databases 的方法。于是乎下载了 Stetho 源代码。\n\n<!-- more -->\n\n目的是修改默认 databases 目录，有目标之后就简单了。全局找 database，找到 DatabaesFileProvider 类，这个类包含 getDatabaseFiles() 方法，基本可以肯定是需要找的类了。再找这个类的使用，可以找到 DefaultDatabaseFilesProvider，其 getDatabseFiles() 的实现是，读取内部存储的 databases 文件夹下的所有文件。\n\n替换这个类，应该就能达到自己的目标了。然后查找这个类的使用。有两个地方创建这个对象，一个在 SqliteDatabaseDriver 构造方法中，一个在 Stetho 类中。Stetho 中的当 hasSqliteDatabaseDriver 为 false 才创建 DefaultDatabaseFilesProvider 对象。先替换 SqliteDatabaseDriver 中的 DefaultDatabaseFilesProvider 吧，再全局查找一下。发现只有 javadoc 中有 new SqliteDatabaseDriver 对象。如下：\n\n```java\n    /**\n     * Customize the location of database files that Stetho will propogate in the UI.  Android's\n     * {@link Context#getDatabasePath} method will be used by default if not overridden here.\n     *\n     * <p>This method is deprecated and instead it is recommended that you explicitly\n     * configure the {@link SqliteDatabaseDriver} as with:</p>\n     * <pre>\n     *   provideDatabaseDriver(\n     *     new SqliteDatabaseDriver(\n     *       context,\n     *       new MyDatabaseFilesProvider(...),\n     *       new DefaultDatabaseConnectionProvider(...)))\n     * </pre>\n     *\n     * @deprecated See example alternative above.\n     */\n    @Deprecated\n    public DefaultInspectorModulesBuilder databaseFiles(DatabaseFilesProvider provider) {\n      mDatabaseFilesProvider = provider;\n      return this;\n    }\n```\n\njavadoc 中写的很清楚了。默认使用 Android 默认的数据库目录，如果要更改默认路径可以使用这个方法实现。最终修改如下：\n\n```java\nSqliteDatabaseDriver sqliteDriver = new SqliteDatabaseDriver(\n            getContextRC(),\n            new DatabaseFilesProvider() {\n                @Override\n                public List<File> getDatabaseFiles() {\n                    List<File> files = new ArrayList<File>();\n                    files.add(new File(getContextRC().getFilesDir() + \"/user/abc.db\")); // files/user/abc.db\n                    files.add(new File(getContextRC().getFilesDir() + \"/settings.db\")); // files/settings.db\n                    return files;\n                }\n            },\n            new DefaultDatabaseConnectionProvider());\nStetho.initialize(Stetho.newInitializerBuilder(this)\n        .enableDumpapp(Stetho.defaultDumperPluginsProvider(this))\n        .enableWebKitInspector(new InspectorModulesProvider() {\n            @Override\n            public Iterable<ChromeDevtoolsDomain> get() {\n                return new Stetho.DefaultInspectorModulesBuilder(getContextRC())\n                        .provideDatabaseDriver(sqliteDriver)\n                        .finish();\n            }\n        })\n        .build());\n```\n\n就可以使用 Chrome 浏览数据库了。\n\n\n","slug":"Stetho-自定义-databases-目录","published":1,"updated":"2019-03-07T15:01:19.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64deb000jha9kgycx79lp","content":"<p>以前做小项目，特别懒，数据存储直接放在 SharePreferences 中，开发的时候，使用 Stetho 直接在 Chrome 中修改存储的数据。现在的项目就不一样了，数据都存在数据库中。</p>\n<p>今天想修改一下数据，测试一下显示效果，结果傻眼了。公司项目里没有加入 Stetho 库，使用其他方式需要破解手机，太麻烦了。然后就在公司项目中加入了 Stetho，然后踩了一天的坑。</p>\n<p>加入 Stetho 之后，在 Chrome 中不显示数据库，网上搜了一下，有说更新 Stetho 之后不显示的，以为是 Stetho 版本问题，1.4.2; 1.4.0; 1.3.1 都试了，还是没效果。。</p>\n<p>然后自己写一个 test 数据库放在 databases 目录下，居然显示了。再把我们项目的数据库从 files 目录下拷贝到 databases 目录中，也显示了。。</p>\n<p>Stetho 默认只读取内部存储中 databases 中的数据库，然而我们的项目把数据库文件放在 files 文件夹下。网上没有找到如何配置 databases 的方法。于是乎下载了 Stetho 源代码。</p>\n<a id=\"more\"></a>\n<p>目的是修改默认 databases 目录，有目标之后就简单了。全局找 database，找到 DatabaesFileProvider 类，这个类包含 getDatabaseFiles() 方法，基本可以肯定是需要找的类了。再找这个类的使用，可以找到 DefaultDatabaseFilesProvider，其 getDatabseFiles() 的实现是，读取内部存储的 databases 文件夹下的所有文件。</p>\n<p>替换这个类，应该就能达到自己的目标了。然后查找这个类的使用。有两个地方创建这个对象，一个在 SqliteDatabaseDriver 构造方法中，一个在 Stetho 类中。Stetho 中的当 hasSqliteDatabaseDriver 为 false 才创建 DefaultDatabaseFilesProvider 对象。先替换 SqliteDatabaseDriver 中的 DefaultDatabaseFilesProvider 吧，再全局查找一下。发现只有 javadoc 中有 new SqliteDatabaseDriver 对象。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Customize the location of database files that Stetho will propogate in the UI.  Android's</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> Context#getDatabasePath&#125; method will be used by default if not overridden here.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;This method is deprecated and instead it is recommended that you explicitly</span></span><br><span class=\"line\"><span class=\"comment\"> * configure the &#123;<span class=\"doctag\">@link</span> SqliteDatabaseDriver&#125; as with:&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   provideDatabaseDriver(</span></span><br><span class=\"line\"><span class=\"comment\"> *     new SqliteDatabaseDriver(</span></span><br><span class=\"line\"><span class=\"comment\"> *       context,</span></span><br><span class=\"line\"><span class=\"comment\"> *       new MyDatabaseFilesProvider(...),</span></span><br><span class=\"line\"><span class=\"comment\"> *       new DefaultDatabaseConnectionProvider(...)))</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@deprecated</span> See example alternative above.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Deprecated</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> DefaultInspectorModulesBuilder <span class=\"title\">databaseFiles</span><span class=\"params\">(DatabaseFilesProvider provider)</span> </span>&#123;</span><br><span class=\"line\">  mDatabaseFilesProvider = provider;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>javadoc 中写的很清楚了。默认使用 Android 默认的数据库目录，如果要更改默认路径可以使用这个方法实现。最终修改如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SqliteDatabaseDriver sqliteDriver = <span class=\"keyword\">new</span> SqliteDatabaseDriver(</span><br><span class=\"line\">            getContextRC(),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> DatabaseFilesProvider() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> List&lt;File&gt; <span class=\"title\">getDatabaseFiles</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    List&lt;File&gt; files = <span class=\"keyword\">new</span> ArrayList&lt;File&gt;();</span><br><span class=\"line\">                    files.add(<span class=\"keyword\">new</span> File(getContextRC().getFilesDir() + <span class=\"string\">\"/user/abc.db\"</span>)); <span class=\"comment\">// files/user/abc.db</span></span><br><span class=\"line\">                    files.add(<span class=\"keyword\">new</span> File(getContextRC().getFilesDir() + <span class=\"string\">\"/settings.db\"</span>)); <span class=\"comment\">// files/settings.db</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> files;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> DefaultDatabaseConnectionProvider());</span><br><span class=\"line\">Stetho.initialize(Stetho.newInitializerBuilder(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        .enableDumpapp(Stetho.defaultDumperPluginsProvider(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">        .enableWebKitInspector(<span class=\"keyword\">new</span> InspectorModulesProvider() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;ChromeDevtoolsDomain&gt; <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Stetho.DefaultInspectorModulesBuilder(getContextRC())</span><br><span class=\"line\">                        .provideDatabaseDriver(sqliteDriver)</span><br><span class=\"line\">                        .finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .build());</span><br></pre></td></tr></table></figure>\n<p>就可以使用 Chrome 浏览数据库了。</p>\n","site":{"data":{}},"excerpt":"<p>以前做小项目，特别懒，数据存储直接放在 SharePreferences 中，开发的时候，使用 Stetho 直接在 Chrome 中修改存储的数据。现在的项目就不一样了，数据都存在数据库中。</p>\n<p>今天想修改一下数据，测试一下显示效果，结果傻眼了。公司项目里没有加入 Stetho 库，使用其他方式需要破解手机，太麻烦了。然后就在公司项目中加入了 Stetho，然后踩了一天的坑。</p>\n<p>加入 Stetho 之后，在 Chrome 中不显示数据库，网上搜了一下，有说更新 Stetho 之后不显示的，以为是 Stetho 版本问题，1.4.2; 1.4.0; 1.3.1 都试了，还是没效果。。</p>\n<p>然后自己写一个 test 数据库放在 databases 目录下，居然显示了。再把我们项目的数据库从 files 目录下拷贝到 databases 目录中，也显示了。。</p>\n<p>Stetho 默认只读取内部存储中 databases 中的数据库，然而我们的项目把数据库文件放在 files 文件夹下。网上没有找到如何配置 databases 的方法。于是乎下载了 Stetho 源代码。</p>","more":"<p>目的是修改默认 databases 目录，有目标之后就简单了。全局找 database，找到 DatabaesFileProvider 类，这个类包含 getDatabaseFiles() 方法，基本可以肯定是需要找的类了。再找这个类的使用，可以找到 DefaultDatabaseFilesProvider，其 getDatabseFiles() 的实现是，读取内部存储的 databases 文件夹下的所有文件。</p>\n<p>替换这个类，应该就能达到自己的目标了。然后查找这个类的使用。有两个地方创建这个对象，一个在 SqliteDatabaseDriver 构造方法中，一个在 Stetho 类中。Stetho 中的当 hasSqliteDatabaseDriver 为 false 才创建 DefaultDatabaseFilesProvider 对象。先替换 SqliteDatabaseDriver 中的 DefaultDatabaseFilesProvider 吧，再全局查找一下。发现只有 javadoc 中有 new SqliteDatabaseDriver 对象。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Customize the location of database files that Stetho will propogate in the UI.  Android's</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> Context#getDatabasePath&#125; method will be used by default if not overridden here.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;This method is deprecated and instead it is recommended that you explicitly</span></span><br><span class=\"line\"><span class=\"comment\"> * configure the &#123;<span class=\"doctag\">@link</span> SqliteDatabaseDriver&#125; as with:&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   provideDatabaseDriver(</span></span><br><span class=\"line\"><span class=\"comment\"> *     new SqliteDatabaseDriver(</span></span><br><span class=\"line\"><span class=\"comment\"> *       context,</span></span><br><span class=\"line\"><span class=\"comment\"> *       new MyDatabaseFilesProvider(...),</span></span><br><span class=\"line\"><span class=\"comment\"> *       new DefaultDatabaseConnectionProvider(...)))</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@deprecated</span> See example alternative above.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Deprecated</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> DefaultInspectorModulesBuilder <span class=\"title\">databaseFiles</span><span class=\"params\">(DatabaseFilesProvider provider)</span> </span>&#123;</span><br><span class=\"line\">  mDatabaseFilesProvider = provider;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>javadoc 中写的很清楚了。默认使用 Android 默认的数据库目录，如果要更改默认路径可以使用这个方法实现。最终修改如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SqliteDatabaseDriver sqliteDriver = <span class=\"keyword\">new</span> SqliteDatabaseDriver(</span><br><span class=\"line\">            getContextRC(),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> DatabaseFilesProvider() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> List&lt;File&gt; <span class=\"title\">getDatabaseFiles</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    List&lt;File&gt; files = <span class=\"keyword\">new</span> ArrayList&lt;File&gt;();</span><br><span class=\"line\">                    files.add(<span class=\"keyword\">new</span> File(getContextRC().getFilesDir() + <span class=\"string\">\"/user/abc.db\"</span>)); <span class=\"comment\">// files/user/abc.db</span></span><br><span class=\"line\">                    files.add(<span class=\"keyword\">new</span> File(getContextRC().getFilesDir() + <span class=\"string\">\"/settings.db\"</span>)); <span class=\"comment\">// files/settings.db</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> files;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> DefaultDatabaseConnectionProvider());</span><br><span class=\"line\">Stetho.initialize(Stetho.newInitializerBuilder(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        .enableDumpapp(Stetho.defaultDumperPluginsProvider(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">        .enableWebKitInspector(<span class=\"keyword\">new</span> InspectorModulesProvider() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;ChromeDevtoolsDomain&gt; <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Stetho.DefaultInspectorModulesBuilder(getContextRC())</span><br><span class=\"line\">                        .provideDatabaseDriver(sqliteDriver)</span><br><span class=\"line\">                        .finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .build());</span><br></pre></td></tr></table></figure>\n<p>就可以使用 Chrome 浏览数据库了。</p>"},{"title":"wordpress需要访问您网页服务器的权限","date":"2018-09-28T13:08:44.000Z","blog":true,"_content":"\n\n\n昨天玩弄了一下 Wordpress, 安装都挺简单的。但是安装主题的时候，出了点问题，花了一点时间。记录一下这个 bug。\n\n安装主题的时候，出现错误 **wordpress需要访问您网页服务器的权限** 的提示框，Google 一下，挺多人都遇到过这个问题，解决方法也是简单暴力，直接把所有文件属性设置为所有人可读写，我肯定是不会使用这种方法的。有一些人把文件的所有者改成 www，我检查了我的文件系统的所有者是正确的，为啥还有这个提示框呢？\n\n快睡觉的时候分析了一下原因: 提示这个问题，肯定是没权限，安装主题要把文件写入到 wp-content/theme 目录下，而这个目录的所有者，跟运行的 apache 服务是同一个，理论上应该有权限。再想想，写入应该是要可执行的程序做的事，应该是 PHP 没有权限。然后查了一下 PHP 的启动用户，果然发现问题，PHP  的默认用户是 www-data。修改 PHP 启动用户之后，杀死 PHP 进程主进程(有多个子进程)，重启 apache，解决问题。\n","source":"_posts/wordpress需要访问您网页服务器的权限.md","raw":"---\ntitle: wordpress需要访问您网页服务器的权限\ndate: 2018-9-28 21:08:44\ncategories: Wordpress\ntags: [Wordpress, php]\nblog: true\n---\n\n\n\n昨天玩弄了一下 Wordpress, 安装都挺简单的。但是安装主题的时候，出了点问题，花了一点时间。记录一下这个 bug。\n\n安装主题的时候，出现错误 **wordpress需要访问您网页服务器的权限** 的提示框，Google 一下，挺多人都遇到过这个问题，解决方法也是简单暴力，直接把所有文件属性设置为所有人可读写，我肯定是不会使用这种方法的。有一些人把文件的所有者改成 www，我检查了我的文件系统的所有者是正确的，为啥还有这个提示框呢？\n\n快睡觉的时候分析了一下原因: 提示这个问题，肯定是没权限，安装主题要把文件写入到 wp-content/theme 目录下，而这个目录的所有者，跟运行的 apache 服务是同一个，理论上应该有权限。再想想，写入应该是要可执行的程序做的事，应该是 PHP 没有权限。然后查了一下 PHP 的启动用户，果然发现问题，PHP  的默认用户是 www-data。修改 PHP 启动用户之后，杀死 PHP 进程主进程(有多个子进程)，重启 apache，解决问题。\n","slug":"wordpress需要访问您网页服务器的权限","published":1,"updated":"2019-03-07T15:01:19.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64deb000kha9k7jrcwtpd","content":"<p>昨天玩弄了一下 Wordpress, 安装都挺简单的。但是安装主题的时候，出了点问题，花了一点时间。记录一下这个 bug。</p>\n<p>安装主题的时候，出现错误 <strong>wordpress需要访问您网页服务器的权限</strong> 的提示框，Google 一下，挺多人都遇到过这个问题，解决方法也是简单暴力，直接把所有文件属性设置为所有人可读写，我肯定是不会使用这种方法的。有一些人把文件的所有者改成 www，我检查了我的文件系统的所有者是正确的，为啥还有这个提示框呢？</p>\n<p>快睡觉的时候分析了一下原因: 提示这个问题，肯定是没权限，安装主题要把文件写入到 wp-content/theme 目录下，而这个目录的所有者，跟运行的 apache 服务是同一个，理论上应该有权限。再想想，写入应该是要可执行的程序做的事，应该是 PHP 没有权限。然后查了一下 PHP 的启动用户，果然发现问题，PHP  的默认用户是 www-data。修改 PHP 启动用户之后，杀死 PHP 进程主进程(有多个子进程)，重启 apache，解决问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天玩弄了一下 Wordpress, 安装都挺简单的。但是安装主题的时候，出了点问题，花了一点时间。记录一下这个 bug。</p>\n<p>安装主题的时候，出现错误 <strong>wordpress需要访问您网页服务器的权限</strong> 的提示框，Google 一下，挺多人都遇到过这个问题，解决方法也是简单暴力，直接把所有文件属性设置为所有人可读写，我肯定是不会使用这种方法的。有一些人把文件的所有者改成 www，我检查了我的文件系统的所有者是正确的，为啥还有这个提示框呢？</p>\n<p>快睡觉的时候分析了一下原因: 提示这个问题，肯定是没权限，安装主题要把文件写入到 wp-content/theme 目录下，而这个目录的所有者，跟运行的 apache 服务是同一个，理论上应该有权限。再想想，写入应该是要可执行的程序做的事，应该是 PHP 没有权限。然后查了一下 PHP 的启动用户，果然发现问题，PHP  的默认用户是 www-data。修改 PHP 启动用户之后，杀死 PHP 进程主进程(有多个子进程)，重启 apache，解决问题。</p>\n"},{"title":"Sublime Text 3 编译并运行 Kotlin","date":"2018-02-08T13:48:25.000Z","blog":true,"_content":"\n\n\nKotlin 是一门年轻的语言，由 JetBrains 开源，去年 Android 已经把 kotlin 作为官方语言了，可以在 JetBrains 和 Android Studio 中编写和运行 kotlin 语言。但是对于对于初学者，使用这两个工具练习 kotlin，真是大材小用，于是找了个轻量级的，自己熟悉的 Sublime Text 来编写和运行 kotlin。\n\n首先，需要配置编译环境， Tools > Build System > New Build System，复制下面内容，保存名称为 kotlin_cmd.sublime-build\n\n```json\n{  \n    \"cmd\": [\"kotlinc $file_name -include-runtime -d ${file_base_name}.jar && java -jar ${file_base_name}.jar && rm ${file_base_name}.jar\"],  \n    \"working_dir\": \"${file_path}\",\n    \"selector\": \"source.kotlin\",  \n    \"shell\": true  \n}\n```\n\n首先通过 kotlinc 编译出 jar 文件，然后使用 java 运行 jar 文件，最后删除 jar 文件，不留下任何垃圾。\n\n新建一个 kotlin 文件 Test.kt, 编写代码\n\n```kotlin\nfun main(args: Array<String>) {\n   println(\"hello Justin Wu!\")\n}\n```\n\n选择编译工具 Tools > Build System > kotlin_cmd\n\n编译并运行代码 Tools > Build 或者使用快捷键 `command + B`\n\nReferences:\n\n1. <https://kotlinlang.org/docs/tutorials/command-line.html>\n2. <http://www.cnblogs.com/final/p/5348350.html>","source":"_posts/Sublime-Text-3-编译并运行-Kotlin.md","raw":"---\ntitle: Sublime Text 3 编译并运行 Kotlin\ndate: 2018-02-08 21:48:25\ntags: [Kotlin, Sublime Text 3]\ncategories: 小工具\nblog: true\n---\n\n\n\nKotlin 是一门年轻的语言，由 JetBrains 开源，去年 Android 已经把 kotlin 作为官方语言了，可以在 JetBrains 和 Android Studio 中编写和运行 kotlin 语言。但是对于对于初学者，使用这两个工具练习 kotlin，真是大材小用，于是找了个轻量级的，自己熟悉的 Sublime Text 来编写和运行 kotlin。\n\n首先，需要配置编译环境， Tools > Build System > New Build System，复制下面内容，保存名称为 kotlin_cmd.sublime-build\n\n```json\n{  \n    \"cmd\": [\"kotlinc $file_name -include-runtime -d ${file_base_name}.jar && java -jar ${file_base_name}.jar && rm ${file_base_name}.jar\"],  \n    \"working_dir\": \"${file_path}\",\n    \"selector\": \"source.kotlin\",  \n    \"shell\": true  \n}\n```\n\n首先通过 kotlinc 编译出 jar 文件，然后使用 java 运行 jar 文件，最后删除 jar 文件，不留下任何垃圾。\n\n新建一个 kotlin 文件 Test.kt, 编写代码\n\n```kotlin\nfun main(args: Array<String>) {\n   println(\"hello Justin Wu!\")\n}\n```\n\n选择编译工具 Tools > Build System > kotlin_cmd\n\n编译并运行代码 Tools > Build 或者使用快捷键 `command + B`\n\nReferences:\n\n1. <https://kotlinlang.org/docs/tutorials/command-line.html>\n2. <http://www.cnblogs.com/final/p/5348350.html>","slug":"Sublime-Text-3-编译并运行-Kotlin","published":1,"updated":"2020-01-18T11:08:00.599Z","_id":"ck5j64dep000lha9kbmqjhphf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Kotlin 是一门年轻的语言，由 JetBrains 开源，去年 Android 已经把 kotlin 作为官方语言了，可以在 JetBrains 和 Android Studio 中编写和运行 kotlin 语言。但是对于对于初学者，使用这两个工具练习 kotlin，真是大材小用，于是找了个轻量级的，自己熟悉的 Sublime Text 来编写和运行 kotlin。</p>\n<p>首先，需要配置编译环境， Tools &gt; Build System &gt; New Build System，复制下面内容，保存名称为 kotlin_cmd.sublime-build</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"kotlinc $file_name -include-runtime -d $&#123;file_base_name&#125;.jar &amp;&amp; java -jar $&#123;file_base_name&#125;.jar &amp;&amp; rm $&#123;file_base_name&#125;.jar\"</span>],  </span><br><span class=\"line\">    <span class=\"attr\">\"working_dir\"</span>: <span class=\"string\">\"$&#123;file_path&#125;\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"selector\"</span>: <span class=\"string\">\"source.kotlin\"</span>,  </span><br><span class=\"line\">    <span class=\"attr\">\"shell\"</span>: <span class=\"literal\">true</span>  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先通过 kotlinc 编译出 jar 文件，然后使用 java 运行 jar 文件，最后删除 jar 文件，不留下任何垃圾。</p>\n<p>新建一个 kotlin 文件 Test.kt, 编写代码</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">   println(<span class=\"string\">\"hello Justin Wu!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>选择编译工具 Tools &gt; Build System &gt; kotlin_cmd</p>\n<p>编译并运行代码 Tools &gt; Build 或者使用快捷键 <code>command + B</code></p>\n<p>References:</p>\n<ol>\n<li><a href=\"https://kotlinlang.org/docs/tutorials/command-line.html\" target=\"_blank\" rel=\"noopener\">https://kotlinlang.org/docs/tutorials/command-line.html</a></li>\n<li><a href=\"http://www.cnblogs.com/final/p/5348350.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/final/p/5348350.html</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>Kotlin 是一门年轻的语言，由 JetBrains 开源，去年 Android 已经把 kotlin 作为官方语言了，可以在 JetBrains 和 Android Studio 中编写和运行 kotlin 语言。但是对于对于初学者，使用这两个工具练习 kotlin，真是大材小用，于是找了个轻量级的，自己熟悉的 Sublime Text 来编写和运行 kotlin。</p>\n<p>首先，需要配置编译环境， Tools &gt; Build System &gt; New Build System，复制下面内容，保存名称为 kotlin_cmd.sublime-build</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"kotlinc $file_name -include-runtime -d $&#123;file_base_name&#125;.jar &amp;&amp; java -jar $&#123;file_base_name&#125;.jar &amp;&amp; rm $&#123;file_base_name&#125;.jar\"</span>],  </span><br><span class=\"line\">    <span class=\"attr\">\"working_dir\"</span>: <span class=\"string\">\"$&#123;file_path&#125;\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"selector\"</span>: <span class=\"string\">\"source.kotlin\"</span>,  </span><br><span class=\"line\">    <span class=\"attr\">\"shell\"</span>: <span class=\"literal\">true</span>  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先通过 kotlinc 编译出 jar 文件，然后使用 java 运行 jar 文件，最后删除 jar 文件，不留下任何垃圾。</p>\n<p>新建一个 kotlin 文件 Test.kt, 编写代码</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">   println(<span class=\"string\">\"hello Justin Wu!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>选择编译工具 Tools &gt; Build System &gt; kotlin_cmd</p>\n<p>编译并运行代码 Tools &gt; Build 或者使用快捷键 <code>command + B</code></p>\n<p>References:</p>\n<ol>\n<li><a href=\"https://kotlinlang.org/docs/tutorials/command-line.html\" target=\"_blank\" rel=\"noopener\">https://kotlinlang.org/docs/tutorials/command-line.html</a></li>\n<li><a href=\"http://www.cnblogs.com/final/p/5348350.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/final/p/5348350.html</a></li>\n</ol>\n"},{"title":"Unexpected error while obtaining UI hierarchy","date":"2018-04-28T05:58:37.000Z","blog":true,"_content":"\n\n\n使用 uiautomatorview 截屏的时候遇到错误，Unexpected error while obtaining UI hierarchy。\n\n原因是 SDK 的 tools 没有更新到最新，Android Studio 更新到 3.0 之后，就不能直接从 Android Studio 中打开 SDK Manager 了。\nAndroid studio 自带的 Android SDK 不包括对 uiautomatorviewer-26.0.0-dev.jar 的更新，所以这个文件一直是 uiautomatorviewer-25.xx.jar，不支持 Android 8.1 的系统是理所当然的。\n\n<!-- more -->\n\n使用命令行运行 `sdkmanager` 会提示 sdkmanager 的使用方式。然后更新一下 SDK `sdkmanager --update`，再运行 uiautomatorview，就能正常工作了。\n\n更新之后，再次运行 `sdkmanager` 发现不提示使用方式了。\n\n```\n$ sdkmanager\n[=======================================] 100% Computing updates...\n```\n\n记录一下 sdkmanager 更新前的使用方式：\n\n```\n$ sdkmanager\nUsage: \n  sdkmanager [--uninstall] [<common args>] [--package_file <file>] [<packages>...]\n  sdkmanager --update [<common args>]\n  sdkmanager --list [<common args>]\n  sdkmanager --licenses [<common args>]\n\nIn its first form, installs, or uninstalls, or updates packages.\n    By default, the listed packages are installed or (if already installed)\n    updated to the latest version.\n\n    --uninstall: uninstalled listed packages.\n\n    <package> is a sdk-style path (e.g. \"build-tools;23.0.0\" or\n             \"platforms;android-23\").\n    <package-file> is a text file where each line is a sdk-style path\n                   of a package to install or uninstall.\n    Multiple --package_file arguments may be specified in combination\n    with explicit paths.\n\nIn its second form (with --update), all installed packages are\n    updated to the latest version.\n\nIn its third form, all installed and available packages are printed\n    out.\n\nIn its fourth form (with --licenses), show and offer the option to\n     accept licenses for all available packages that have not already been\n     accepted.\n\nCommon Arguments:\n    --sdk_root=<sdkRootPath>: Use the specified SDK root instead of the SDK \n                              containing this tool\n\n    --channel=<channelId>: Include packages in channels up to <channelId>.\n                           Common channels are:\n                           0 (Stable), 1 (Beta), 2 (Dev), and 3 (Canary).\n\n    --include_obsolete: With --list, show obsolete packages in the\n                        package listing. With --update, update obsolete\n                        packages as well as non-obsolete.\n\n    --no_https: Force all connections to use http rather than https.\n\n    --proxy=<http | socks>: Connect via a proxy of the given type.\n\n    --proxy_host=<IP or DNS address>: IP or DNS address of the proxy to use.\n\n    --proxy_port=<port #>: Proxy port to connect to.\n\n* If the env var REPO_OS_OVERRIDE is set to \"windows\",\n  \"macosx\", or \"linux\", packages will be downloaded for that OS.\n\n```\n","source":"_posts/Unexpected_error_while_obtaining_UI_hierarchy.md","raw":"---\ntitle: Unexpected error while obtaining UI hierarchy\ndate: 2018-04-28 13:58:37\ncategories: Android\ntags: [uiautomatorview, Android, sdkmanager]\nblog: true\n---\n\n\n\n使用 uiautomatorview 截屏的时候遇到错误，Unexpected error while obtaining UI hierarchy。\n\n原因是 SDK 的 tools 没有更新到最新，Android Studio 更新到 3.0 之后，就不能直接从 Android Studio 中打开 SDK Manager 了。\nAndroid studio 自带的 Android SDK 不包括对 uiautomatorviewer-26.0.0-dev.jar 的更新，所以这个文件一直是 uiautomatorviewer-25.xx.jar，不支持 Android 8.1 的系统是理所当然的。\n\n<!-- more -->\n\n使用命令行运行 `sdkmanager` 会提示 sdkmanager 的使用方式。然后更新一下 SDK `sdkmanager --update`，再运行 uiautomatorview，就能正常工作了。\n\n更新之后，再次运行 `sdkmanager` 发现不提示使用方式了。\n\n```\n$ sdkmanager\n[=======================================] 100% Computing updates...\n```\n\n记录一下 sdkmanager 更新前的使用方式：\n\n```\n$ sdkmanager\nUsage: \n  sdkmanager [--uninstall] [<common args>] [--package_file <file>] [<packages>...]\n  sdkmanager --update [<common args>]\n  sdkmanager --list [<common args>]\n  sdkmanager --licenses [<common args>]\n\nIn its first form, installs, or uninstalls, or updates packages.\n    By default, the listed packages are installed or (if already installed)\n    updated to the latest version.\n\n    --uninstall: uninstalled listed packages.\n\n    <package> is a sdk-style path (e.g. \"build-tools;23.0.0\" or\n             \"platforms;android-23\").\n    <package-file> is a text file where each line is a sdk-style path\n                   of a package to install or uninstall.\n    Multiple --package_file arguments may be specified in combination\n    with explicit paths.\n\nIn its second form (with --update), all installed packages are\n    updated to the latest version.\n\nIn its third form, all installed and available packages are printed\n    out.\n\nIn its fourth form (with --licenses), show and offer the option to\n     accept licenses for all available packages that have not already been\n     accepted.\n\nCommon Arguments:\n    --sdk_root=<sdkRootPath>: Use the specified SDK root instead of the SDK \n                              containing this tool\n\n    --channel=<channelId>: Include packages in channels up to <channelId>.\n                           Common channels are:\n                           0 (Stable), 1 (Beta), 2 (Dev), and 3 (Canary).\n\n    --include_obsolete: With --list, show obsolete packages in the\n                        package listing. With --update, update obsolete\n                        packages as well as non-obsolete.\n\n    --no_https: Force all connections to use http rather than https.\n\n    --proxy=<http | socks>: Connect via a proxy of the given type.\n\n    --proxy_host=<IP or DNS address>: IP or DNS address of the proxy to use.\n\n    --proxy_port=<port #>: Proxy port to connect to.\n\n* If the env var REPO_OS_OVERRIDE is set to \"windows\",\n  \"macosx\", or \"linux\", packages will be downloaded for that OS.\n\n```\n","slug":"Unexpected_error_while_obtaining_UI_hierarchy","published":1,"updated":"2019-03-07T15:01:19.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64deq000mha9kpx89w0w1","content":"<p>使用 uiautomatorview 截屏的时候遇到错误，Unexpected error while obtaining UI hierarchy。</p>\n<p>原因是 SDK 的 tools 没有更新到最新，Android Studio 更新到 3.0 之后，就不能直接从 Android Studio 中打开 SDK Manager 了。<br>Android studio 自带的 Android SDK 不包括对 uiautomatorviewer-26.0.0-dev.jar 的更新，所以这个文件一直是 uiautomatorviewer-25.xx.jar，不支持 Android 8.1 的系统是理所当然的。</p>\n<a id=\"more\"></a>\n<p>使用命令行运行 <code>sdkmanager</code> 会提示 sdkmanager 的使用方式。然后更新一下 SDK <code>sdkmanager --update</code>，再运行 uiautomatorview，就能正常工作了。</p>\n<p>更新之后，再次运行 <code>sdkmanager</code> 发现不提示使用方式了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sdkmanager</span><br><span class=\"line\">[=======================================] 100% Computing updates...</span><br></pre></td></tr></table></figure>\n<p>记录一下 sdkmanager 更新前的使用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sdkmanager</span><br><span class=\"line\">Usage: </span><br><span class=\"line\">  sdkmanager [--uninstall] [&lt;common args&gt;] [--package_file &lt;file&gt;] [&lt;packages&gt;...]</span><br><span class=\"line\">  sdkmanager --update [&lt;common args&gt;]</span><br><span class=\"line\">  sdkmanager --list [&lt;common args&gt;]</span><br><span class=\"line\">  sdkmanager --licenses [&lt;common args&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">In its first form, installs, or uninstalls, or updates packages.</span><br><span class=\"line\">    By default, the listed packages are installed or (if already installed)</span><br><span class=\"line\">    updated to the latest version.</span><br><span class=\"line\"></span><br><span class=\"line\">    --uninstall: uninstalled listed packages.</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;package&gt; is a sdk-style path (e.g. &quot;build-tools;23.0.0&quot; or</span><br><span class=\"line\">             &quot;platforms;android-23&quot;).</span><br><span class=\"line\">    &lt;package-file&gt; is a text file where each line is a sdk-style path</span><br><span class=\"line\">                   of a package to install or uninstall.</span><br><span class=\"line\">    Multiple --package_file arguments may be specified in combination</span><br><span class=\"line\">    with explicit paths.</span><br><span class=\"line\"></span><br><span class=\"line\">In its second form (with --update), all installed packages are</span><br><span class=\"line\">    updated to the latest version.</span><br><span class=\"line\"></span><br><span class=\"line\">In its third form, all installed and available packages are printed</span><br><span class=\"line\">    out.</span><br><span class=\"line\"></span><br><span class=\"line\">In its fourth form (with --licenses), show and offer the option to</span><br><span class=\"line\">     accept licenses for all available packages that have not already been</span><br><span class=\"line\">     accepted.</span><br><span class=\"line\"></span><br><span class=\"line\">Common Arguments:</span><br><span class=\"line\">    --sdk_root=&lt;sdkRootPath&gt;: Use the specified SDK root instead of the SDK </span><br><span class=\"line\">                              containing this tool</span><br><span class=\"line\"></span><br><span class=\"line\">    --channel=&lt;channelId&gt;: Include packages in channels up to &lt;channelId&gt;.</span><br><span class=\"line\">                           Common channels are:</span><br><span class=\"line\">                           0 (Stable), 1 (Beta), 2 (Dev), and 3 (Canary).</span><br><span class=\"line\"></span><br><span class=\"line\">    --include_obsolete: With --list, show obsolete packages in the</span><br><span class=\"line\">                        package listing. With --update, update obsolete</span><br><span class=\"line\">                        packages as well as non-obsolete.</span><br><span class=\"line\"></span><br><span class=\"line\">    --no_https: Force all connections to use http rather than https.</span><br><span class=\"line\"></span><br><span class=\"line\">    --proxy=&lt;http | socks&gt;: Connect via a proxy of the given type.</span><br><span class=\"line\"></span><br><span class=\"line\">    --proxy_host=&lt;IP or DNS address&gt;: IP or DNS address of the proxy to use.</span><br><span class=\"line\"></span><br><span class=\"line\">    --proxy_port=&lt;port #&gt;: Proxy port to connect to.</span><br><span class=\"line\"></span><br><span class=\"line\">* If the env var REPO_OS_OVERRIDE is set to &quot;windows&quot;,</span><br><span class=\"line\">  &quot;macosx&quot;, or &quot;linux&quot;, packages will be downloaded for that OS.</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>使用 uiautomatorview 截屏的时候遇到错误，Unexpected error while obtaining UI hierarchy。</p>\n<p>原因是 SDK 的 tools 没有更新到最新，Android Studio 更新到 3.0 之后，就不能直接从 Android Studio 中打开 SDK Manager 了。<br>Android studio 自带的 Android SDK 不包括对 uiautomatorviewer-26.0.0-dev.jar 的更新，所以这个文件一直是 uiautomatorviewer-25.xx.jar，不支持 Android 8.1 的系统是理所当然的。</p>","more":"<p>使用命令行运行 <code>sdkmanager</code> 会提示 sdkmanager 的使用方式。然后更新一下 SDK <code>sdkmanager --update</code>，再运行 uiautomatorview，就能正常工作了。</p>\n<p>更新之后，再次运行 <code>sdkmanager</code> 发现不提示使用方式了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sdkmanager</span><br><span class=\"line\">[=======================================] 100% Computing updates...</span><br></pre></td></tr></table></figure>\n<p>记录一下 sdkmanager 更新前的使用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sdkmanager</span><br><span class=\"line\">Usage: </span><br><span class=\"line\">  sdkmanager [--uninstall] [&lt;common args&gt;] [--package_file &lt;file&gt;] [&lt;packages&gt;...]</span><br><span class=\"line\">  sdkmanager --update [&lt;common args&gt;]</span><br><span class=\"line\">  sdkmanager --list [&lt;common args&gt;]</span><br><span class=\"line\">  sdkmanager --licenses [&lt;common args&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">In its first form, installs, or uninstalls, or updates packages.</span><br><span class=\"line\">    By default, the listed packages are installed or (if already installed)</span><br><span class=\"line\">    updated to the latest version.</span><br><span class=\"line\"></span><br><span class=\"line\">    --uninstall: uninstalled listed packages.</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;package&gt; is a sdk-style path (e.g. &quot;build-tools;23.0.0&quot; or</span><br><span class=\"line\">             &quot;platforms;android-23&quot;).</span><br><span class=\"line\">    &lt;package-file&gt; is a text file where each line is a sdk-style path</span><br><span class=\"line\">                   of a package to install or uninstall.</span><br><span class=\"line\">    Multiple --package_file arguments may be specified in combination</span><br><span class=\"line\">    with explicit paths.</span><br><span class=\"line\"></span><br><span class=\"line\">In its second form (with --update), all installed packages are</span><br><span class=\"line\">    updated to the latest version.</span><br><span class=\"line\"></span><br><span class=\"line\">In its third form, all installed and available packages are printed</span><br><span class=\"line\">    out.</span><br><span class=\"line\"></span><br><span class=\"line\">In its fourth form (with --licenses), show and offer the option to</span><br><span class=\"line\">     accept licenses for all available packages that have not already been</span><br><span class=\"line\">     accepted.</span><br><span class=\"line\"></span><br><span class=\"line\">Common Arguments:</span><br><span class=\"line\">    --sdk_root=&lt;sdkRootPath&gt;: Use the specified SDK root instead of the SDK </span><br><span class=\"line\">                              containing this tool</span><br><span class=\"line\"></span><br><span class=\"line\">    --channel=&lt;channelId&gt;: Include packages in channels up to &lt;channelId&gt;.</span><br><span class=\"line\">                           Common channels are:</span><br><span class=\"line\">                           0 (Stable), 1 (Beta), 2 (Dev), and 3 (Canary).</span><br><span class=\"line\"></span><br><span class=\"line\">    --include_obsolete: With --list, show obsolete packages in the</span><br><span class=\"line\">                        package listing. With --update, update obsolete</span><br><span class=\"line\">                        packages as well as non-obsolete.</span><br><span class=\"line\"></span><br><span class=\"line\">    --no_https: Force all connections to use http rather than https.</span><br><span class=\"line\"></span><br><span class=\"line\">    --proxy=&lt;http | socks&gt;: Connect via a proxy of the given type.</span><br><span class=\"line\"></span><br><span class=\"line\">    --proxy_host=&lt;IP or DNS address&gt;: IP or DNS address of the proxy to use.</span><br><span class=\"line\"></span><br><span class=\"line\">    --proxy_port=&lt;port #&gt;: Proxy port to connect to.</span><br><span class=\"line\"></span><br><span class=\"line\">* If the env var REPO_OS_OVERRIDE is set to &quot;windows&quot;,</span><br><span class=\"line\">  &quot;macosx&quot;, or &quot;linux&quot;, packages will be downloaded for that OS.</span><br></pre></td></tr></table></figure>"},{"title":"Android Accessibility (3) —— Talkback 源码解析","date":"2018-10-22T06:45:24.000Z","blog":true,"_content":"\n\n\n下图是 AccessibilityManagerService 把 AccessibilityEvent 发送给 TalkBackService 之后的流程。TalkBackService 对于每一个收到的事件，都会使用各种处理器去处理。这里我们只把焦点处理(Focus)和语音输出(Speech)两种处理器的处理流程画出来了。\n\n```puml\n@startuml\n(*) --> \"AndroidSystem\"\n\"AndroidSystem\" --> \"TalkBackService\"\n\"TalkBackService\" --> \"AccessibilityEventProcessor\"\npartition Focus {\n    \"AccessibilityEventProcessor\" --> \"TouchExplorationInterpreter\"\n    \"TouchExplorationInterpreter\" --> \"AccessibilityFocusManager\" \n    \"AccessibilityFocusManager\" --> \"FocusManagerInternal\"\n    \"FocusManagerInternal\" --> \"PerformActionUtils\"\n    \"PerformActionUtils\" --> \"AccessibilityManagerService\"\n    \"AccessibilityManagerService\" --> \"App.View\"\n}\npartition Speech {\n    \"AccessibilityEventProcessor\" --> \"ProcessorEventQueue\"\n    \"ProcessorEventQueue\" --> \"EventFilter\"\n    \"EventFilter\" --> \"TextEventInterpreter\"\n    \"TextEventInterpreter\" --> \"Compositor\"\n    \"Compositor\" --> \"SpeechControllerImpl\"\n    \"SpeechControllerImpl\" --> \"FailoverTextToSpeech\"\n    \"FailoverTextToSpeech\" --> \"TextToSpeech\"\n}\n\"AccessibilityEventProcessor\" --> \"TextExercise\"\n\"AccessibilityEventProcessor\" --> \"KeyboardSearchManager\"\n\"AccessibilityEventProcessor\" --> \"ScrollEventInterpreter\"\n@enduml\n```\n\n当 TalkBackService 收到 AccessibilityEvent 的时候，直接交给 AccessibilityEventProcessor 处理。AccessibilityEventProcessor 是用来收集 AccessibilityEventListener 的容器，它会调用每一个 AccessibilityEventListener 去处理这个这个 Event。\n\n<!-- more -->\n\n## 源码解析\n\n\n从 {% post_link 建立自己的_Accessibility_Service %}，我知道 AccessibilityService 的入口函数是 onAccessibilityEvent，因此我们从 TalkBackService 的这个方法开始。\n\n1. TalkBackService.onAccessibilityEvent()\n\n    ```java\n    @Override\n    public void onAccessibilityEvent(AccessibilityEvent event) {\n        Performance perf = Performance.getInstance();\n        EventId eventId = perf.onEventReceived(event);\n        mAccessibilityEventProcessor.onAccessibilityEvent(event, eventId);\n        perf.onHandlerDone(eventId);\n    }\n    ```\n\n    这里的 Performance 跟事件记录统计有关，可以从 TalkBack -> Settings -> Developer Settings -> Enable performance statistics 打开，但是没找到怎么样把数据打印出来😳。谁知道的麻烦告诉我一下。\n\n    然后直接调用 AccessibilityEventProcessor 的 onAccessibilityEvent 方法。\n\n2. AccessibilityEventProcessor.onAccessibilityEvent()\n\n    ```java\n    public void onAccessibilityEvent(AccessibilityEvent event, EventId eventId) {\n      ...\n      if (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {\n        mLastWindowStateChanged = SystemClock.uptimeMillis();\n      }\n      if (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED\n          || event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED\n          || event.getEventType() == AccessibilityEvent.TYPE_WINDOWS_CHANGED) {\n        mService.setRootDirty(true);\n      }\n      // We need to save the last focused event so that we can filter out related selected events.\n      if (event.getEventType() == AccessibilityEvent.TYPE_VIEW_FOCUSED) {\n        if (mLastFocusedEvent != null) {\n          mLastFocusedEvent.recycle();\n        }\n        mLastFocusedEvent = AccessibilityEvent.obtain(event);\n      }\n      if (AccessibilityEventUtils.eventMatchesAnyType(event, MASK_DELAYED_EVENT_TYPES)) {\n        mHandler.postProcessEvent(event, eventId);\n      } else {\n        processEvent(event, eventId);\n      }\n      if (mTestingListener != null) {\n        mTestingListener.afterAccessibilityEvent(event);\n      }\n    }\n    private void processEvent(AccessibilityEvent event, EventId eventId) {\n      // Send events to the only those processors which handle them.\n      for (AccessibilityEventListener eventProcessor : mAccessibilityEventListeners) {\n        int eventTypesHandled = eventProcessor.getEventTypes();\n        if (AccessibilityEventUtils.eventMatchesAnyType(event, eventTypesHandled)) {\n          eventProcessor.onAccessibilityEvent(event, eventId);\n        }\n      }\n    }\n    ```\n\n    如果收到 TYPE_WINDOW_CONTENT_CHANGED，TYPE_WINDOW_STATE_CHANGED，TYPE_WINDOWS_CHANGED 事件，会将 mRootNode 设置为已过期，下次调用 getRootInActiveWindow() 时，重新获取 mRootNode。\n\n    记录最后一个 focused 的事件。\n\n    然后调用 AccessibilityEventListener 对象对事件进行处理，实现这个接口的对象很多，有 AccessibilityFocusManager、FocusProcessor、ProcessorEventQueue 等，我们先来看看这个接口\n\n3. AccessibilityEventListener\n\n    ```java\n    public interface AccessibilityEventListener {\n      /** @return mask of the events to be handled. */\n      int getEventTypes();\n      /**\n       * <b>Note:</b> This method receives the events that are specified in the mask returned by {@link\n       * #getEventTypes()} method.\n       */\n      void onAccessibilityEvent(AccessibilityEvent event, EventId eventId);\n    }\n    ```\n\n    这个接口有个 getEventTypes() 方法，说明这个 Listener 能够处理的 Event 类型的集合。当传入的 AccessibilityEvent 的类型包含在 EventTypes 集合中，才会调用它的 onAccessibilityEvent() 方法。\n\n后面的博客中将会分析 ProcessorEventQueue 和 TouchExplorationInterpreter 这两个 listener，这两个处理器的作用分别是控制语音的输出和焦点的控制。\n\n\n\n","source":"_posts/Talkback_源码解析.md","raw":"---\ntitle: Android Accessibility (3) —— Talkback 源码解析\ndate: 2018-10-22 14:45:24\ncategories: Android\ntags: [Talkback, 辅助, 源码]\nblog: true\n---\n\n\n\n下图是 AccessibilityManagerService 把 AccessibilityEvent 发送给 TalkBackService 之后的流程。TalkBackService 对于每一个收到的事件，都会使用各种处理器去处理。这里我们只把焦点处理(Focus)和语音输出(Speech)两种处理器的处理流程画出来了。\n\n```puml\n@startuml\n(*) --> \"AndroidSystem\"\n\"AndroidSystem\" --> \"TalkBackService\"\n\"TalkBackService\" --> \"AccessibilityEventProcessor\"\npartition Focus {\n    \"AccessibilityEventProcessor\" --> \"TouchExplorationInterpreter\"\n    \"TouchExplorationInterpreter\" --> \"AccessibilityFocusManager\" \n    \"AccessibilityFocusManager\" --> \"FocusManagerInternal\"\n    \"FocusManagerInternal\" --> \"PerformActionUtils\"\n    \"PerformActionUtils\" --> \"AccessibilityManagerService\"\n    \"AccessibilityManagerService\" --> \"App.View\"\n}\npartition Speech {\n    \"AccessibilityEventProcessor\" --> \"ProcessorEventQueue\"\n    \"ProcessorEventQueue\" --> \"EventFilter\"\n    \"EventFilter\" --> \"TextEventInterpreter\"\n    \"TextEventInterpreter\" --> \"Compositor\"\n    \"Compositor\" --> \"SpeechControllerImpl\"\n    \"SpeechControllerImpl\" --> \"FailoverTextToSpeech\"\n    \"FailoverTextToSpeech\" --> \"TextToSpeech\"\n}\n\"AccessibilityEventProcessor\" --> \"TextExercise\"\n\"AccessibilityEventProcessor\" --> \"KeyboardSearchManager\"\n\"AccessibilityEventProcessor\" --> \"ScrollEventInterpreter\"\n@enduml\n```\n\n当 TalkBackService 收到 AccessibilityEvent 的时候，直接交给 AccessibilityEventProcessor 处理。AccessibilityEventProcessor 是用来收集 AccessibilityEventListener 的容器，它会调用每一个 AccessibilityEventListener 去处理这个这个 Event。\n\n<!-- more -->\n\n## 源码解析\n\n\n从 {% post_link 建立自己的_Accessibility_Service %}，我知道 AccessibilityService 的入口函数是 onAccessibilityEvent，因此我们从 TalkBackService 的这个方法开始。\n\n1. TalkBackService.onAccessibilityEvent()\n\n    ```java\n    @Override\n    public void onAccessibilityEvent(AccessibilityEvent event) {\n        Performance perf = Performance.getInstance();\n        EventId eventId = perf.onEventReceived(event);\n        mAccessibilityEventProcessor.onAccessibilityEvent(event, eventId);\n        perf.onHandlerDone(eventId);\n    }\n    ```\n\n    这里的 Performance 跟事件记录统计有关，可以从 TalkBack -> Settings -> Developer Settings -> Enable performance statistics 打开，但是没找到怎么样把数据打印出来😳。谁知道的麻烦告诉我一下。\n\n    然后直接调用 AccessibilityEventProcessor 的 onAccessibilityEvent 方法。\n\n2. AccessibilityEventProcessor.onAccessibilityEvent()\n\n    ```java\n    public void onAccessibilityEvent(AccessibilityEvent event, EventId eventId) {\n      ...\n      if (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {\n        mLastWindowStateChanged = SystemClock.uptimeMillis();\n      }\n      if (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED\n          || event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED\n          || event.getEventType() == AccessibilityEvent.TYPE_WINDOWS_CHANGED) {\n        mService.setRootDirty(true);\n      }\n      // We need to save the last focused event so that we can filter out related selected events.\n      if (event.getEventType() == AccessibilityEvent.TYPE_VIEW_FOCUSED) {\n        if (mLastFocusedEvent != null) {\n          mLastFocusedEvent.recycle();\n        }\n        mLastFocusedEvent = AccessibilityEvent.obtain(event);\n      }\n      if (AccessibilityEventUtils.eventMatchesAnyType(event, MASK_DELAYED_EVENT_TYPES)) {\n        mHandler.postProcessEvent(event, eventId);\n      } else {\n        processEvent(event, eventId);\n      }\n      if (mTestingListener != null) {\n        mTestingListener.afterAccessibilityEvent(event);\n      }\n    }\n    private void processEvent(AccessibilityEvent event, EventId eventId) {\n      // Send events to the only those processors which handle them.\n      for (AccessibilityEventListener eventProcessor : mAccessibilityEventListeners) {\n        int eventTypesHandled = eventProcessor.getEventTypes();\n        if (AccessibilityEventUtils.eventMatchesAnyType(event, eventTypesHandled)) {\n          eventProcessor.onAccessibilityEvent(event, eventId);\n        }\n      }\n    }\n    ```\n\n    如果收到 TYPE_WINDOW_CONTENT_CHANGED，TYPE_WINDOW_STATE_CHANGED，TYPE_WINDOWS_CHANGED 事件，会将 mRootNode 设置为已过期，下次调用 getRootInActiveWindow() 时，重新获取 mRootNode。\n\n    记录最后一个 focused 的事件。\n\n    然后调用 AccessibilityEventListener 对象对事件进行处理，实现这个接口的对象很多，有 AccessibilityFocusManager、FocusProcessor、ProcessorEventQueue 等，我们先来看看这个接口\n\n3. AccessibilityEventListener\n\n    ```java\n    public interface AccessibilityEventListener {\n      /** @return mask of the events to be handled. */\n      int getEventTypes();\n      /**\n       * <b>Note:</b> This method receives the events that are specified in the mask returned by {@link\n       * #getEventTypes()} method.\n       */\n      void onAccessibilityEvent(AccessibilityEvent event, EventId eventId);\n    }\n    ```\n\n    这个接口有个 getEventTypes() 方法，说明这个 Listener 能够处理的 Event 类型的集合。当传入的 AccessibilityEvent 的类型包含在 EventTypes 集合中，才会调用它的 onAccessibilityEvent() 方法。\n\n后面的博客中将会分析 ProcessorEventQueue 和 TouchExplorationInterpreter 这两个 listener，这两个处理器的作用分别是控制语音的输出和焦点的控制。\n\n\n\n","slug":"Talkback_源码解析","published":1,"updated":"2019-03-07T15:01:19.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64df2000nha9k4j9oobr9","content":"<p>下图是 AccessibilityManagerService 把 AccessibilityEvent 发送给 TalkBackService 之后的流程。TalkBackService 对于每一个收到的事件，都会使用各种处理器去处理。这里我们只把焦点处理(Focus)和语音输出(Speech)两种处理器的处理流程画出来了。</p>\n<p><img src=\"https://www.plantuml.com/plantuml/svg/ZLFTJi8m5BxVKooxKXDy10CIJ8mnmGozBzrHJkXwcjCE8OPtTrqxcD0WkrZIx-VyjcFh1BkcLjdDtMq-6ZtanKHNJ5YLE-kWBhAJSz0iX5e_2hakWJSeeLMT8Z6Mb60jBb6XsyqseDsSoKF4HMRQpEYGTFv4ih7vJvQttqLFp4wDNCssHX4Bxt_M3jWmjFyYnBYaI5JMvNyLMdnvFb76Nq4NO0XruRLGCNkI2guvy2TnFP6-gdU7oaPFWaWK6eCUndvUwOaYnZ3c_WFXkyZsWwcN1a2khX_xuTonRmqqVGKf9dWwu0dLSJL39AuJjgv34tjCKS4rfTgGHKUzTW04HUXlIjenATMkeZRzXf9KtAj0HHjWdtf1GTZlDKKTUpYgzzarjzZtjWMMQFq3-j_m0hib2QvA42nN_MsynbbAt-RvZCUWg_Rj_m80\"></p>\n<p>当 TalkBackService 收到 AccessibilityEvent 的时候，直接交给 AccessibilityEventProcessor 处理。AccessibilityEventProcessor 是用来收集 AccessibilityEventListener 的容器，它会调用每一个 AccessibilityEventListener 去处理这个这个 Event。</p>\n<a id=\"more\"></a>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><p>从 <a href=\"/2018/10/07/建立自己的_Accessibility_Service/\" title=\"Android Accessibility (2) —— 创建自己的 Accessibility Service\">Android Accessibility (2) —— 创建自己的 Accessibility Service</a>，我知道 AccessibilityService 的入口函数是 onAccessibilityEvent，因此我们从 TalkBackService 的这个方法开始。</p>\n<ol>\n<li><p>TalkBackService.onAccessibilityEvent()</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAccessibilityEvent</span><span class=\"params\">(AccessibilityEvent event)</span> </span>&#123;</span><br><span class=\"line\">    Performance perf = Performance.getInstance();</span><br><span class=\"line\">    EventId eventId = perf.onEventReceived(event);</span><br><span class=\"line\">    mAccessibilityEventProcessor.onAccessibilityEvent(event, eventId);</span><br><span class=\"line\">    perf.onHandlerDone(eventId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 这里的 Performance 跟事件记录统计有关，可以从 TalkBack -&gt; Settings -&gt; Developer Settings -&gt; Enable performance statistics 打开，但是没找到怎么样把数据打印出来😳。谁知道的麻烦告诉我一下。</p>\n<p> 然后直接调用 AccessibilityEventProcessor 的 onAccessibilityEvent 方法。</p>\n</li>\n<li><p>AccessibilityEventProcessor.onAccessibilityEvent()</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAccessibilityEvent</span><span class=\"params\">(AccessibilityEvent event, EventId eventId)</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) &#123;</span><br><span class=\"line\">    mLastWindowStateChanged = SystemClock.uptimeMillis();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED</span><br><span class=\"line\">      || event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED</span><br><span class=\"line\">      || event.getEventType() == AccessibilityEvent.TYPE_WINDOWS_CHANGED) &#123;</span><br><span class=\"line\">    mService.setRootDirty(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// We need to save the last focused event so that we can filter out related selected events.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.getEventType() == AccessibilityEvent.TYPE_VIEW_FOCUSED) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mLastFocusedEvent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      mLastFocusedEvent.recycle();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mLastFocusedEvent = AccessibilityEvent.obtain(event);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (AccessibilityEventUtils.eventMatchesAnyType(event, MASK_DELAYED_EVENT_TYPES)) &#123;</span><br><span class=\"line\">    mHandler.postProcessEvent(event, eventId);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    processEvent(event, eventId);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mTestingListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    mTestingListener.afterAccessibilityEvent(event);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processEvent</span><span class=\"params\">(AccessibilityEvent event, EventId eventId)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Send events to the only those processors which handle them.</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (AccessibilityEventListener eventProcessor : mAccessibilityEventListeners) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> eventTypesHandled = eventProcessor.getEventTypes();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (AccessibilityEventUtils.eventMatchesAnyType(event, eventTypesHandled)) &#123;</span><br><span class=\"line\">      eventProcessor.onAccessibilityEvent(event, eventId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 如果收到 TYPE_WINDOW_CONTENT_CHANGED，TYPE_WINDOW_STATE_CHANGED，TYPE_WINDOWS_CHANGED 事件，会将 mRootNode 设置为已过期，下次调用 getRootInActiveWindow() 时，重新获取 mRootNode。</p>\n<p> 记录最后一个 focused 的事件。</p>\n<p> 然后调用 AccessibilityEventListener 对象对事件进行处理，实现这个接口的对象很多，有 AccessibilityFocusManager、FocusProcessor、ProcessorEventQueue 等，我们先来看看这个接口</p>\n</li>\n<li><p>AccessibilityEventListener</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AccessibilityEventListener</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/** <span class=\"doctag\">@return</span> mask of the events to be handled. */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getEventTypes</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;b&gt;Note:&lt;/b&gt; This method receives the events that are specified in the mask returned by &#123;<span class=\"doctag\">@link</span></span></span><br><span class=\"line\"><span class=\"comment\">   * #getEventTypes()&#125; method.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAccessibilityEvent</span><span class=\"params\">(AccessibilityEvent event, EventId eventId)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 这个接口有个 getEventTypes() 方法，说明这个 Listener 能够处理的 Event 类型的集合。当传入的 AccessibilityEvent 的类型包含在 EventTypes 集合中，才会调用它的 onAccessibilityEvent() 方法。</p>\n</li>\n</ol>\n<p>后面的博客中将会分析 ProcessorEventQueue 和 TouchExplorationInterpreter 这两个 listener，这两个处理器的作用分别是控制语音的输出和焦点的控制。</p>\n","site":{"data":{}},"excerpt":"<p>下图是 AccessibilityManagerService 把 AccessibilityEvent 发送给 TalkBackService 之后的流程。TalkBackService 对于每一个收到的事件，都会使用各种处理器去处理。这里我们只把焦点处理(Focus)和语音输出(Speech)两种处理器的处理流程画出来了。</p>\n<p><img src=\"https://www.plantuml.com/plantuml/svg/ZLFTJi8m5BxVKooxKXDy10CIJ8mnmGozBzrHJkXwcjCE8OPtTrqxcD0WkrZIx-VyjcFh1BkcLjdDtMq-6ZtanKHNJ5YLE-kWBhAJSz0iX5e_2hakWJSeeLMT8Z6Mb60jBb6XsyqseDsSoKF4HMRQpEYGTFv4ih7vJvQttqLFp4wDNCssHX4Bxt_M3jWmjFyYnBYaI5JMvNyLMdnvFb76Nq4NO0XruRLGCNkI2guvy2TnFP6-gdU7oaPFWaWK6eCUndvUwOaYnZ3c_WFXkyZsWwcN1a2khX_xuTonRmqqVGKf9dWwu0dLSJL39AuJjgv34tjCKS4rfTgGHKUzTW04HUXlIjenATMkeZRzXf9KtAj0HHjWdtf1GTZlDKKTUpYgzzarjzZtjWMMQFq3-j_m0hib2QvA42nN_MsynbbAt-RvZCUWg_Rj_m80\"></p>\n<p>当 TalkBackService 收到 AccessibilityEvent 的时候，直接交给 AccessibilityEventProcessor 处理。AccessibilityEventProcessor 是用来收集 AccessibilityEventListener 的容器，它会调用每一个 AccessibilityEventListener 去处理这个这个 Event。</p>","more":"<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><p>从 <a href=\"/2018/10/07/建立自己的_Accessibility_Service/\" title=\"Android Accessibility (2) —— 创建自己的 Accessibility Service\">Android Accessibility (2) —— 创建自己的 Accessibility Service</a>，我知道 AccessibilityService 的入口函数是 onAccessibilityEvent，因此我们从 TalkBackService 的这个方法开始。</p>\n<ol>\n<li><p>TalkBackService.onAccessibilityEvent()</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAccessibilityEvent</span><span class=\"params\">(AccessibilityEvent event)</span> </span>&#123;</span><br><span class=\"line\">    Performance perf = Performance.getInstance();</span><br><span class=\"line\">    EventId eventId = perf.onEventReceived(event);</span><br><span class=\"line\">    mAccessibilityEventProcessor.onAccessibilityEvent(event, eventId);</span><br><span class=\"line\">    perf.onHandlerDone(eventId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 这里的 Performance 跟事件记录统计有关，可以从 TalkBack -&gt; Settings -&gt; Developer Settings -&gt; Enable performance statistics 打开，但是没找到怎么样把数据打印出来😳。谁知道的麻烦告诉我一下。</p>\n<p> 然后直接调用 AccessibilityEventProcessor 的 onAccessibilityEvent 方法。</p>\n</li>\n<li><p>AccessibilityEventProcessor.onAccessibilityEvent()</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAccessibilityEvent</span><span class=\"params\">(AccessibilityEvent event, EventId eventId)</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) &#123;</span><br><span class=\"line\">    mLastWindowStateChanged = SystemClock.uptimeMillis();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED</span><br><span class=\"line\">      || event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED</span><br><span class=\"line\">      || event.getEventType() == AccessibilityEvent.TYPE_WINDOWS_CHANGED) &#123;</span><br><span class=\"line\">    mService.setRootDirty(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// We need to save the last focused event so that we can filter out related selected events.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.getEventType() == AccessibilityEvent.TYPE_VIEW_FOCUSED) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mLastFocusedEvent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      mLastFocusedEvent.recycle();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mLastFocusedEvent = AccessibilityEvent.obtain(event);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (AccessibilityEventUtils.eventMatchesAnyType(event, MASK_DELAYED_EVENT_TYPES)) &#123;</span><br><span class=\"line\">    mHandler.postProcessEvent(event, eventId);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    processEvent(event, eventId);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mTestingListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    mTestingListener.afterAccessibilityEvent(event);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processEvent</span><span class=\"params\">(AccessibilityEvent event, EventId eventId)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Send events to the only those processors which handle them.</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (AccessibilityEventListener eventProcessor : mAccessibilityEventListeners) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> eventTypesHandled = eventProcessor.getEventTypes();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (AccessibilityEventUtils.eventMatchesAnyType(event, eventTypesHandled)) &#123;</span><br><span class=\"line\">      eventProcessor.onAccessibilityEvent(event, eventId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 如果收到 TYPE_WINDOW_CONTENT_CHANGED，TYPE_WINDOW_STATE_CHANGED，TYPE_WINDOWS_CHANGED 事件，会将 mRootNode 设置为已过期，下次调用 getRootInActiveWindow() 时，重新获取 mRootNode。</p>\n<p> 记录最后一个 focused 的事件。</p>\n<p> 然后调用 AccessibilityEventListener 对象对事件进行处理，实现这个接口的对象很多，有 AccessibilityFocusManager、FocusProcessor、ProcessorEventQueue 等，我们先来看看这个接口</p>\n</li>\n<li><p>AccessibilityEventListener</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AccessibilityEventListener</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/** <span class=\"doctag\">@return</span> mask of the events to be handled. */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getEventTypes</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;b&gt;Note:&lt;/b&gt; This method receives the events that are specified in the mask returned by &#123;<span class=\"doctag\">@link</span></span></span><br><span class=\"line\"><span class=\"comment\">   * #getEventTypes()&#125; method.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAccessibilityEvent</span><span class=\"params\">(AccessibilityEvent event, EventId eventId)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 这个接口有个 getEventTypes() 方法，说明这个 Listener 能够处理的 Event 类型的集合。当传入的 AccessibilityEvent 的类型包含在 EventTypes 集合中，才会调用它的 onAccessibilityEvent() 方法。</p>\n</li>\n</ol>\n<p>后面的博客中将会分析 ProcessorEventQueue 和 TouchExplorationInterpreter 这两个 listener，这两个处理器的作用分别是控制语音的输出和焦点的控制。</p>"},{"date":"2015-11-03T15:31:31.000Z","title":"gradle编译和运行Java程序","blog":true,"_content":"\n\n\ngradle代码\n\n```groovy\napply plugin: 'java'  \napply plugin: 'application'  \n  \nmainClassName = 'com.binwin20.testjava.Main' // main() 的路径  \n```\n\n<!-- more -->\n\n在src/main/java/com/binwin20/testjava中\n\n```java\npackage com.binwin20.testjava;  \n  \npublic class Main {  \n    public static void main(String[] args) {  \n        System.out.println(\"Hello World.\");  \n    }\n}\n```\n\n运行java（要提前配置grdle环境）\n\n```bash\ngradle -q run\n```\n","source":"_posts/gradle_编译和运行_Java_程序.md","raw":"---\ndate: 2015-11-03 23:31:31\ntitle: gradle编译和运行Java程序\ncategories: Java\ntags: [gradle]\nblog: true\n---\n\n\n\ngradle代码\n\n```groovy\napply plugin: 'java'  \napply plugin: 'application'  \n  \nmainClassName = 'com.binwin20.testjava.Main' // main() 的路径  \n```\n\n<!-- more -->\n\n在src/main/java/com/binwin20/testjava中\n\n```java\npackage com.binwin20.testjava;  \n  \npublic class Main {  \n    public static void main(String[] args) {  \n        System.out.println(\"Hello World.\");  \n    }\n}\n```\n\n运行java（要提前配置grdle环境）\n\n```bash\ngradle -q run\n```\n","slug":"gradle_编译和运行_Java_程序","published":1,"updated":"2020-01-18T11:08:00.611Z","_id":"ck5j64df4000oha9k1sguw89z","comments":1,"layout":"post","photos":[],"link":"","content":"<p>gradle代码</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'java'</span>  </span><br><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'application'</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">mainClassName = <span class=\"string\">'com.binwin20.testjava.Main'</span> <span class=\"comment\">// main() 的路径</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p>在src/main/java/com/binwin20/testjava中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.binwin20.testjava;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello World.\"</span>);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行java（要提前配置grdle环境）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle -q run</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>gradle代码</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'java'</span>  </span><br><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'application'</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">mainClassName = <span class=\"string\">'com.binwin20.testjava.Main'</span> <span class=\"comment\">// main() 的路径</span></span><br></pre></td></tr></table></figure>","more":"<p>在src/main/java/com/binwin20/testjava中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.binwin20.testjava;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello World.\"</span>);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行java（要提前配置grdle环境）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle -q run</span><br></pre></td></tr></table></figure>"},{"title":"使用 Docker 搭建 Jupyter 环境","date":"2019-03-07T13:54:00.000Z","blog":true,"_content":"\n\n\n刚刚学完 Docker 容器，小试一下牛刀，使用 Docker 搭建一个 Jupyter 环境。\n\n只需要三步就能完成环境搭建\n\n1. 安装 Docker（网上一堆资料）\n2. 下载配置文件\n3. 启动创建并启动容器\n\n\n\n<!-- more -->\n\n## 1. 安装 Docker\n\n(略)\n\n## 2. 下载配置文件\n\n`git clone https://github.com/binwin20/Docker-Jupyter.git`\n\n## 3. 启动创建并启动容器\n\n```sh\ncd Docker-Jupyter\ndocker-compose up -d\n```\n\n首次启动时间有点长，需要下载 continuumio/anaconda3 镜像，然后安装 nbextension 插件。启动之后，打开 `http://localhost:8888` 就可以看到 Jupyter 页面了\n\n{% img \"/images/jupyter.png\" %}\n\n## 常用命令\n\n```sh\n# 创建并启动容器并放后台\ndocker-compose up -d\n# 停止容器\ndocker-compose stop\n# 再次启动容器\ndocker-compose start\n# 重启容器\ndocker-compose restart\n```\n","source":"_posts/使用_Docker_搭建_Jupyter_环境.md","raw":"---\ntitle: 使用 Docker 搭建 Jupyter 环境\ndate: 2019-03-07 21:54\ntags: [Docker, Jupyter]\ncategories: \nblog: true\n---\n\n\n\n刚刚学完 Docker 容器，小试一下牛刀，使用 Docker 搭建一个 Jupyter 环境。\n\n只需要三步就能完成环境搭建\n\n1. 安装 Docker（网上一堆资料）\n2. 下载配置文件\n3. 启动创建并启动容器\n\n\n\n<!-- more -->\n\n## 1. 安装 Docker\n\n(略)\n\n## 2. 下载配置文件\n\n`git clone https://github.com/binwin20/Docker-Jupyter.git`\n\n## 3. 启动创建并启动容器\n\n```sh\ncd Docker-Jupyter\ndocker-compose up -d\n```\n\n首次启动时间有点长，需要下载 continuumio/anaconda3 镜像，然后安装 nbextension 插件。启动之后，打开 `http://localhost:8888` 就可以看到 Jupyter 页面了\n\n{% img \"/images/jupyter.png\" %}\n\n## 常用命令\n\n```sh\n# 创建并启动容器并放后台\ndocker-compose up -d\n# 停止容器\ndocker-compose stop\n# 再次启动容器\ndocker-compose start\n# 重启容器\ndocker-compose restart\n```\n","slug":"使用_Docker_搭建_Jupyter_环境","published":1,"updated":"2019-03-07T15:01:19.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64df6000pha9ks8cfenuy","content":"<p>刚刚学完 Docker 容器，小试一下牛刀，使用 Docker 搭建一个 Jupyter 环境。</p>\n<p>只需要三步就能完成环境搭建</p>\n<ol>\n<li>安装 Docker（网上一堆资料）</li>\n<li>下载配置文件</li>\n<li>启动创建并启动容器</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"1-安装-Docker\"><a href=\"#1-安装-Docker\" class=\"headerlink\" title=\"1. 安装 Docker\"></a>1. 安装 Docker</h2><p>(略)</p>\n<h2 id=\"2-下载配置文件\"><a href=\"#2-下载配置文件\" class=\"headerlink\" title=\"2. 下载配置文件\"></a>2. 下载配置文件</h2><p><code>git clone https://github.com/binwin20/Docker-Jupyter.git</code></p>\n<h2 id=\"3-启动创建并启动容器\"><a href=\"#3-启动创建并启动容器\" class=\"headerlink\" title=\"3. 启动创建并启动容器\"></a>3. 启动创建并启动容器</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> Docker-Jupyter</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n<p>首次启动时间有点长，需要下载 continuumio/anaconda3 镜像，然后安装 nbextension 插件。启动之后，打开 <code>http://localhost:8888</code> 就可以看到 Jupyter 页面了</p>\n<img src=\"/images/jupyter.png\">\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建并启动容器并放后台</span></span><br><span class=\"line\">docker-compose up -d</span><br><span class=\"line\"><span class=\"comment\"># 停止容器</span></span><br><span class=\"line\">docker-compose stop</span><br><span class=\"line\"><span class=\"comment\"># 再次启动容器</span></span><br><span class=\"line\">docker-compose start</span><br><span class=\"line\"><span class=\"comment\"># 重启容器</span></span><br><span class=\"line\">docker-compose restart</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>刚刚学完 Docker 容器，小试一下牛刀，使用 Docker 搭建一个 Jupyter 环境。</p>\n<p>只需要三步就能完成环境搭建</p>\n<ol>\n<li>安装 Docker（网上一堆资料）</li>\n<li>下载配置文件</li>\n<li>启动创建并启动容器</li>\n</ol>","more":"<h2 id=\"1-安装-Docker\"><a href=\"#1-安装-Docker\" class=\"headerlink\" title=\"1. 安装 Docker\"></a>1. 安装 Docker</h2><p>(略)</p>\n<h2 id=\"2-下载配置文件\"><a href=\"#2-下载配置文件\" class=\"headerlink\" title=\"2. 下载配置文件\"></a>2. 下载配置文件</h2><p><code>git clone https://github.com/binwin20/Docker-Jupyter.git</code></p>\n<h2 id=\"3-启动创建并启动容器\"><a href=\"#3-启动创建并启动容器\" class=\"headerlink\" title=\"3. 启动创建并启动容器\"></a>3. 启动创建并启动容器</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> Docker-Jupyter</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n<p>首次启动时间有点长，需要下载 continuumio/anaconda3 镜像，然后安装 nbextension 插件。启动之后，打开 <code>http://localhost:8888</code> 就可以看到 Jupyter 页面了</p>\n<img src=\"/images/jupyter.png\">\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建并启动容器并放后台</span></span><br><span class=\"line\">docker-compose up -d</span><br><span class=\"line\"><span class=\"comment\"># 停止容器</span></span><br><span class=\"line\">docker-compose stop</span><br><span class=\"line\"><span class=\"comment\"># 再次启动容器</span></span><br><span class=\"line\">docker-compose start</span><br><span class=\"line\"><span class=\"comment\"># 重启容器</span></span><br><span class=\"line\">docker-compose restart</span><br></pre></td></tr></table></figure>"},{"title":"博客优化","date":"2018-04-27T14:25:27.000Z","blog":true,"_content":"\n\n\n从博客搭建完到现在，一年多了，写的博客特别少。其中一个原因是忙，另一个更重要的原因是，写博客和发布都比较繁琐，需要记很多命令。\n写博客使用 `hexo new title`, 博客写完之后，使用 `hexo g; hexo d` 生成和部署博客。之前没有使用 ssh-key 还需要输入密码，so 不想写博客是真的有原因的。\n\n最近两周，总算抽出点时间，把博客重新优化了一下。\n\n<!-- more -->\n\n### 写博客到发布流程对比\n\n博客优化前的博客生成流程是：\n\n- 本地用 markdown 写博客\n- 写完之后，本地使用 hexo 生成静态页面\n- 然后将静态页 push 到 VPS，VPS 只是简单的一个 apache 服务\n\n优化之后的博客生成流程是：\n\n- 本地使用 markdown 写博客\n- 直接 push 到 VPS 中的仓库中\n- VPS 每天从仓库中拉取最新内容，使用 hexo 生成静态页面\n- 将静态页面 mv 到 apache 目录\n\n操作明显简化了，不需要命令行，不需要关心发布流程，只要把 markdown 文件 push 到服务器，跟平常写代码一个样。\n\n##步骤\n\n1. 在 VPS 中创建 3 个用户，分别是：\n\n    - my_name: 用于登录\n    - apache: 用于部署 apache 服务\n    - gogs:  轻量级 gitlab\n\n2. 安装 apache\n\n    略\n\n3. 安装 gogs\n\n    https://gogs.io/docs/installation/install_from_binary\n\n    安装完成之后，创建仓库，创建用户，添加 rsa-key, 方便提交代码。\n\n4. 安装 hexo\n\n    参考: https://hexo.io/zh-cn/docs/\n\n5. 配置定时任务\n\n        # crontab -e\n        SHELL=/bin/bash\n        HOME=/\n        PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\n        MAILTO=\"my@email.com\"\n        00 22 * * * cd /home/apache/my_blog/; git pull; hexo clean; hexo g; cp -rf public/* /var/www/blog/\n        # 每天晚上 10 点部署博客\n\n6. 写博客\n\n    hexo 写博客时，文章顶部需要 Front-matter，`hexo new title` 的时候会自动生成。\n    但是我的习惯是，使用 Sublime 打开整个 blog 文件夹，用命令行 new 也是一件麻烦的事。\n    然后把 Front-matter 模版拷贝到 Dash 中，做成快捷键 `blog\\``。\n    @date @time 的格式是系统给的，可以在系统设置中改系统的格式。\n\n        ---\n        title: __placeholder__\n        date: @date @time\n        categories: Android\\Java\\NDK\\源码阅读\\小工具\\其他\\小游戏\n        tags: []\n        ---\n\n### 各种坑\n\n1. gogs 的 hook 有问题\n\n    花了几个小时没找出原因，然后忽略了。即使找到原因，hook 成功了，也没有权限把文件拷贝到 apache 用户下，即使拷过去了，还得考虑如何再哪个用户下运行 hexo 去生成静态页。最后的办法是，apache 中跑一个定时任务，任何问题都解决了。\n\n2. 同一台机器通过 http 方式下载 git 仓库，一直提示没权限\n\n    我的本地机器都能从 gogs 下载代码，同一个 VPS 下的不同用户 apache 使用 http 或者 ssh 的方式都下载不了仓库，一直报没权限。\n    这就比较坑了，花了好长时间也没找到原因。最后，试了一下使用绝对路径的方式，直接 `git clone /home/gogs/blog...` 居然成功了。\n\n\n","source":"_posts/博客优化.md","raw":"---\ntitle: 博客优化\ndate: 2018-04-27 22:25:27\ncategories: 小工具\ntags: [hexo, Gogs, Linux, Cron]\nblog: true\n---\n\n\n\n从博客搭建完到现在，一年多了，写的博客特别少。其中一个原因是忙，另一个更重要的原因是，写博客和发布都比较繁琐，需要记很多命令。\n写博客使用 `hexo new title`, 博客写完之后，使用 `hexo g; hexo d` 生成和部署博客。之前没有使用 ssh-key 还需要输入密码，so 不想写博客是真的有原因的。\n\n最近两周，总算抽出点时间，把博客重新优化了一下。\n\n<!-- more -->\n\n### 写博客到发布流程对比\n\n博客优化前的博客生成流程是：\n\n- 本地用 markdown 写博客\n- 写完之后，本地使用 hexo 生成静态页面\n- 然后将静态页 push 到 VPS，VPS 只是简单的一个 apache 服务\n\n优化之后的博客生成流程是：\n\n- 本地使用 markdown 写博客\n- 直接 push 到 VPS 中的仓库中\n- VPS 每天从仓库中拉取最新内容，使用 hexo 生成静态页面\n- 将静态页面 mv 到 apache 目录\n\n操作明显简化了，不需要命令行，不需要关心发布流程，只要把 markdown 文件 push 到服务器，跟平常写代码一个样。\n\n##步骤\n\n1. 在 VPS 中创建 3 个用户，分别是：\n\n    - my_name: 用于登录\n    - apache: 用于部署 apache 服务\n    - gogs:  轻量级 gitlab\n\n2. 安装 apache\n\n    略\n\n3. 安装 gogs\n\n    https://gogs.io/docs/installation/install_from_binary\n\n    安装完成之后，创建仓库，创建用户，添加 rsa-key, 方便提交代码。\n\n4. 安装 hexo\n\n    参考: https://hexo.io/zh-cn/docs/\n\n5. 配置定时任务\n\n        # crontab -e\n        SHELL=/bin/bash\n        HOME=/\n        PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\n        MAILTO=\"my@email.com\"\n        00 22 * * * cd /home/apache/my_blog/; git pull; hexo clean; hexo g; cp -rf public/* /var/www/blog/\n        # 每天晚上 10 点部署博客\n\n6. 写博客\n\n    hexo 写博客时，文章顶部需要 Front-matter，`hexo new title` 的时候会自动生成。\n    但是我的习惯是，使用 Sublime 打开整个 blog 文件夹，用命令行 new 也是一件麻烦的事。\n    然后把 Front-matter 模版拷贝到 Dash 中，做成快捷键 `blog\\``。\n    @date @time 的格式是系统给的，可以在系统设置中改系统的格式。\n\n        ---\n        title: __placeholder__\n        date: @date @time\n        categories: Android\\Java\\NDK\\源码阅读\\小工具\\其他\\小游戏\n        tags: []\n        ---\n\n### 各种坑\n\n1. gogs 的 hook 有问题\n\n    花了几个小时没找出原因，然后忽略了。即使找到原因，hook 成功了，也没有权限把文件拷贝到 apache 用户下，即使拷过去了，还得考虑如何再哪个用户下运行 hexo 去生成静态页。最后的办法是，apache 中跑一个定时任务，任何问题都解决了。\n\n2. 同一台机器通过 http 方式下载 git 仓库，一直提示没权限\n\n    我的本地机器都能从 gogs 下载代码，同一个 VPS 下的不同用户 apache 使用 http 或者 ssh 的方式都下载不了仓库，一直报没权限。\n    这就比较坑了，花了好长时间也没找到原因。最后，试了一下使用绝对路径的方式，直接 `git clone /home/gogs/blog...` 居然成功了。\n\n\n","slug":"博客优化","published":1,"updated":"2019-03-07T15:01:19.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64df7000qha9k8oaffb0v","content":"<p>从博客搭建完到现在，一年多了，写的博客特别少。其中一个原因是忙，另一个更重要的原因是，写博客和发布都比较繁琐，需要记很多命令。<br>写博客使用 <code>hexo new title</code>, 博客写完之后，使用 <code>hexo g; hexo d</code> 生成和部署博客。之前没有使用 ssh-key 还需要输入密码，so 不想写博客是真的有原因的。</p>\n<p>最近两周，总算抽出点时间，把博客重新优化了一下。</p>\n<a id=\"more\"></a>\n<h3 id=\"写博客到发布流程对比\"><a href=\"#写博客到发布流程对比\" class=\"headerlink\" title=\"写博客到发布流程对比\"></a>写博客到发布流程对比</h3><p>博客优化前的博客生成流程是：</p>\n<ul>\n<li>本地用 markdown 写博客</li>\n<li>写完之后，本地使用 hexo 生成静态页面</li>\n<li>然后将静态页 push 到 VPS，VPS 只是简单的一个 apache 服务</li>\n</ul>\n<p>优化之后的博客生成流程是：</p>\n<ul>\n<li>本地使用 markdown 写博客</li>\n<li>直接 push 到 VPS 中的仓库中</li>\n<li>VPS 每天从仓库中拉取最新内容，使用 hexo 生成静态页面</li>\n<li>将静态页面 mv 到 apache 目录</li>\n</ul>\n<p>操作明显简化了，不需要命令行，不需要关心发布流程，只要把 markdown 文件 push 到服务器，跟平常写代码一个样。</p>\n<p>##步骤</p>\n<ol>\n<li><p>在 VPS 中创建 3 个用户，分别是：</p>\n<ul>\n<li>my_name: 用于登录</li>\n<li>apache: 用于部署 apache 服务</li>\n<li>gogs:  轻量级 gitlab</li>\n</ul>\n</li>\n<li><p>安装 apache</p>\n<p> 略</p>\n</li>\n<li><p>安装 gogs</p>\n<p> <a href=\"https://gogs.io/docs/installation/install_from_binary\" target=\"_blank\" rel=\"noopener\">https://gogs.io/docs/installation/install_from_binary</a></p>\n<p> 安装完成之后，创建仓库，创建用户，添加 rsa-key, 方便提交代码。</p>\n</li>\n<li><p>安装 hexo</p>\n<p> 参考: <a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/</a></p>\n</li>\n<li><p>配置定时任务</p>\n<pre><code># crontab -e\nSHELL=/bin/bash\nHOME=/\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\nMAILTO=&quot;my@email.com&quot;\n00 22 * * * cd /home/apache/my_blog/; git pull; hexo clean; hexo g; cp -rf public/* /var/www/blog/\n# 每天晚上 10 点部署博客\n</code></pre></li>\n<li><p>写博客</p>\n<p> hexo 写博客时，文章顶部需要 Front-matter，<code>hexo new title</code> 的时候会自动生成。<br> 但是我的习惯是，使用 Sublime 打开整个 blog 文件夹，用命令行 new 也是一件麻烦的事。<br> 然后把 Front-matter 模版拷贝到 Dash 中，做成快捷键 <code>blog\\`</code>。<br> @date @time 的格式是系统给的，可以在系统设置中改系统的格式。</p>\n<pre><code>---\ntitle: __placeholder__\ndate: @date @time\ncategories: Android\\Java\\NDK\\源码阅读\\小工具\\其他\\小游戏\ntags: []\n---\n</code></pre></li>\n</ol>\n<h3 id=\"各种坑\"><a href=\"#各种坑\" class=\"headerlink\" title=\"各种坑\"></a>各种坑</h3><ol>\n<li><p>gogs 的 hook 有问题</p>\n<p> 花了几个小时没找出原因，然后忽略了。即使找到原因，hook 成功了，也没有权限把文件拷贝到 apache 用户下，即使拷过去了，还得考虑如何再哪个用户下运行 hexo 去生成静态页。最后的办法是，apache 中跑一个定时任务，任何问题都解决了。</p>\n</li>\n<li><p>同一台机器通过 http 方式下载 git 仓库，一直提示没权限</p>\n<p> 我的本地机器都能从 gogs 下载代码，同一个 VPS 下的不同用户 apache 使用 http 或者 ssh 的方式都下载不了仓库，一直报没权限。<br> 这就比较坑了，花了好长时间也没找到原因。最后，试了一下使用绝对路径的方式，直接 <code>git clone /home/gogs/blog...</code> 居然成功了。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>从博客搭建完到现在，一年多了，写的博客特别少。其中一个原因是忙，另一个更重要的原因是，写博客和发布都比较繁琐，需要记很多命令。<br>写博客使用 <code>hexo new title</code>, 博客写完之后，使用 <code>hexo g; hexo d</code> 生成和部署博客。之前没有使用 ssh-key 还需要输入密码，so 不想写博客是真的有原因的。</p>\n<p>最近两周，总算抽出点时间，把博客重新优化了一下。</p>","more":"<h3 id=\"写博客到发布流程对比\"><a href=\"#写博客到发布流程对比\" class=\"headerlink\" title=\"写博客到发布流程对比\"></a>写博客到发布流程对比</h3><p>博客优化前的博客生成流程是：</p>\n<ul>\n<li>本地用 markdown 写博客</li>\n<li>写完之后，本地使用 hexo 生成静态页面</li>\n<li>然后将静态页 push 到 VPS，VPS 只是简单的一个 apache 服务</li>\n</ul>\n<p>优化之后的博客生成流程是：</p>\n<ul>\n<li>本地使用 markdown 写博客</li>\n<li>直接 push 到 VPS 中的仓库中</li>\n<li>VPS 每天从仓库中拉取最新内容，使用 hexo 生成静态页面</li>\n<li>将静态页面 mv 到 apache 目录</li>\n</ul>\n<p>操作明显简化了，不需要命令行，不需要关心发布流程，只要把 markdown 文件 push 到服务器，跟平常写代码一个样。</p>\n<p>##步骤</p>\n<ol>\n<li><p>在 VPS 中创建 3 个用户，分别是：</p>\n<ul>\n<li>my_name: 用于登录</li>\n<li>apache: 用于部署 apache 服务</li>\n<li>gogs:  轻量级 gitlab</li>\n</ul>\n</li>\n<li><p>安装 apache</p>\n<p> 略</p>\n</li>\n<li><p>安装 gogs</p>\n<p> <a href=\"https://gogs.io/docs/installation/install_from_binary\" target=\"_blank\" rel=\"noopener\">https://gogs.io/docs/installation/install_from_binary</a></p>\n<p> 安装完成之后，创建仓库，创建用户，添加 rsa-key, 方便提交代码。</p>\n</li>\n<li><p>安装 hexo</p>\n<p> 参考: <a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/</a></p>\n</li>\n<li><p>配置定时任务</p>\n<pre><code># crontab -e\nSHELL=/bin/bash\nHOME=/\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\nMAILTO=&quot;my@email.com&quot;\n00 22 * * * cd /home/apache/my_blog/; git pull; hexo clean; hexo g; cp -rf public/* /var/www/blog/\n# 每天晚上 10 点部署博客\n</code></pre></li>\n<li><p>写博客</p>\n<p> hexo 写博客时，文章顶部需要 Front-matter，<code>hexo new title</code> 的时候会自动生成。<br> 但是我的习惯是，使用 Sublime 打开整个 blog 文件夹，用命令行 new 也是一件麻烦的事。<br> 然后把 Front-matter 模版拷贝到 Dash 中，做成快捷键 <code>blog\\`</code>。<br> @date @time 的格式是系统给的，可以在系统设置中改系统的格式。</p>\n<pre><code>---\ntitle: __placeholder__\ndate: @date @time\ncategories: Android\\Java\\NDK\\源码阅读\\小工具\\其他\\小游戏\ntags: []\n---\n</code></pre></li>\n</ol>\n<h3 id=\"各种坑\"><a href=\"#各种坑\" class=\"headerlink\" title=\"各种坑\"></a>各种坑</h3><ol>\n<li><p>gogs 的 hook 有问题</p>\n<p> 花了几个小时没找出原因，然后忽略了。即使找到原因，hook 成功了，也没有权限把文件拷贝到 apache 用户下，即使拷过去了，还得考虑如何再哪个用户下运行 hexo 去生成静态页。最后的办法是，apache 中跑一个定时任务，任何问题都解决了。</p>\n</li>\n<li><p>同一台机器通过 http 方式下载 git 仓库，一直提示没权限</p>\n<p> 我的本地机器都能从 gogs 下载代码，同一个 VPS 下的不同用户 apache 使用 http 或者 ssh 的方式都下载不了仓库，一直报没权限。<br> 这就比较坑了，花了好长时间也没找到原因。最后，试了一下使用绝对路径的方式，直接 <code>git clone /home/gogs/blog...</code> 居然成功了。</p>\n</li>\n</ol>"},{"title":"依赖包不更新的 bug","date":"2018-06-27T23:30:52.000Z","blog":true,"_content":"\n\n\n### bug 描述\n\nbuild.gradle 文件中依赖包改成了新的，但是侧边栏 Project 的 External Libraries 中使用的依旧是老的依赖包。不管 Rebuild, Clean Project, 重启 Android Studio，External Libraries 依旧不更新。\n\n### 解决方案\n\n点击 Sync Profile with Gradle File,  第三个按钮就是。\n\n{% img \"/images/Sync-Profile-with-Gradle-File.png\" %}\n\n\n","source":"_posts/依赖包不更新的_bug.md","raw":"---\ntitle: 依赖包不更新的 bug\ndate: 2018-6-28 07:30:52\ncategories: Android\ntags: [bug, 依赖包]\nblog: true\n---\n\n\n\n### bug 描述\n\nbuild.gradle 文件中依赖包改成了新的，但是侧边栏 Project 的 External Libraries 中使用的依旧是老的依赖包。不管 Rebuild, Clean Project, 重启 Android Studio，External Libraries 依旧不更新。\n\n### 解决方案\n\n点击 Sync Profile with Gradle File,  第三个按钮就是。\n\n{% img \"/images/Sync-Profile-with-Gradle-File.png\" %}\n\n\n","slug":"依赖包不更新的_bug","published":1,"updated":"2019-03-07T15:01:19.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64df8000rha9kjufal6lx","content":"<h3 id=\"bug-描述\"><a href=\"#bug-描述\" class=\"headerlink\" title=\"bug 描述\"></a>bug 描述</h3><p>build.gradle 文件中依赖包改成了新的，但是侧边栏 Project 的 External Libraries 中使用的依旧是老的依赖包。不管 Rebuild, Clean Project, 重启 Android Studio，External Libraries 依旧不更新。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>点击 Sync Profile with Gradle File,  第三个按钮就是。</p>\n<img src=\"/images/Sync-Profile-with-Gradle-File.png\">\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"bug-描述\"><a href=\"#bug-描述\" class=\"headerlink\" title=\"bug 描述\"></a>bug 描述</h3><p>build.gradle 文件中依赖包改成了新的，但是侧边栏 Project 的 External Libraries 中使用的依旧是老的依赖包。不管 Rebuild, Clean Project, 重启 Android Studio，External Libraries 依旧不更新。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>点击 Sync Profile with Gradle File,  第三个按钮就是。</p>\n<img src=\"/images/Sync-Profile-with-Gradle-File.png\">\n"},{"title":"博客搭建","date":"2016-08-26T12:20:31.000Z","blog":true,"_content":"\n\n\n使用 hexo + next 主题搭建博客需要以下几个步骤：\n\n1. 创建 Hexo 工程和下载 next 主题\n2. 配置 Hexo 工程和 next 主题\n3. 生成静态博客并 push 到服务器\n4. 配置 nginx 指向到静态网页目录\n\n## 创建 Hexo 工程和下载 next 主题\n<!-- more -->\n\n如果没有安装 Hexo, 需要先安装安装\n\n```sh\nnpm install hexo-cli -g\n```\n\n安装 Hexo 之后，生成 Hexo 工程\n\n```sh\nhexo init blog\n```\n\n再下载 next 主题\n\n```sh\ncd blog\ngit clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n\nnext 主题下载之后，再配置博客\n\n## 配置 Hexo 工程和 next 主题\n\n### 配置 Hexo\n\n修改 blog/_config.yml 中的配置，我的配置如下：\n\n```text\ntitle: Justin Wu's Blog\nsubtitle:\nkeywords: Android\ndescription: 人一能之，己百之；人十能之，己千之。虽愚必明，虽柔必强。\nauthor: Justin Wu\nlanguage: zh-Hans\ntimezone: Asia/Shanghai\nurl: https://www.realjustinwu.com\ntheme: next\n```\n\n因为我用的是 Rsync 方式把博客部署到服务器，因此需要安装并配置 Deployment\n\n```text\ndeploy:\n  type: rsync\n  host: your server address\n  user: your server user name\n  root: <root>\n  port: [port]\n  delete: true\n  verbose: true\n  ignore_errors: false\n```\n\nhexo 工程配置完成之后，配置 next 主题\n\n### 配置 next 主题\n\n## 生成静态博客并 push 到服务器\n\n```sh\nhexo d\n```\n\n## 配置 nginx 指向到静态网页目录\n\n```test\nserver {\n    listen 80;\n    server_name  blog.realjustinwu.com www.realjustinwu.com;\n\n    root /var/www/html;\n    location / {\n        index  index.html index.htm;\n    }\n}\n```\n","source":"_posts/博客搭建.md","raw":"---\ntitle: 博客搭建\ndate: 2016-08-26 20:20:31\ncategories: 其他\ntags: [Hexo]\nblog: true\n---\n\n\n\n使用 hexo + next 主题搭建博客需要以下几个步骤：\n\n1. 创建 Hexo 工程和下载 next 主题\n2. 配置 Hexo 工程和 next 主题\n3. 生成静态博客并 push 到服务器\n4. 配置 nginx 指向到静态网页目录\n\n## 创建 Hexo 工程和下载 next 主题\n<!-- more -->\n\n如果没有安装 Hexo, 需要先安装安装\n\n```sh\nnpm install hexo-cli -g\n```\n\n安装 Hexo 之后，生成 Hexo 工程\n\n```sh\nhexo init blog\n```\n\n再下载 next 主题\n\n```sh\ncd blog\ngit clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n\nnext 主题下载之后，再配置博客\n\n## 配置 Hexo 工程和 next 主题\n\n### 配置 Hexo\n\n修改 blog/_config.yml 中的配置，我的配置如下：\n\n```text\ntitle: Justin Wu's Blog\nsubtitle:\nkeywords: Android\ndescription: 人一能之，己百之；人十能之，己千之。虽愚必明，虽柔必强。\nauthor: Justin Wu\nlanguage: zh-Hans\ntimezone: Asia/Shanghai\nurl: https://www.realjustinwu.com\ntheme: next\n```\n\n因为我用的是 Rsync 方式把博客部署到服务器，因此需要安装并配置 Deployment\n\n```text\ndeploy:\n  type: rsync\n  host: your server address\n  user: your server user name\n  root: <root>\n  port: [port]\n  delete: true\n  verbose: true\n  ignore_errors: false\n```\n\nhexo 工程配置完成之后，配置 next 主题\n\n### 配置 next 主题\n\n## 生成静态博客并 push 到服务器\n\n```sh\nhexo d\n```\n\n## 配置 nginx 指向到静态网页目录\n\n```test\nserver {\n    listen 80;\n    server_name  blog.realjustinwu.com www.realjustinwu.com;\n\n    root /var/www/html;\n    location / {\n        index  index.html index.htm;\n    }\n}\n```\n","slug":"博客搭建","published":1,"updated":"2020-01-18T11:08:00.608Z","_id":"ck5j64df9000sha9kmrib2jot","comments":1,"layout":"post","photos":[],"link":"","content":"<p>使用 hexo + next 主题搭建博客需要以下几个步骤：</p>\n<ol>\n<li>创建 Hexo 工程和下载 next 主题</li>\n<li>配置 Hexo 工程和 next 主题</li>\n<li>生成静态博客并 push 到服务器</li>\n<li>配置 nginx 指向到静态网页目录</li>\n</ol>\n<h2 id=\"创建-Hexo-工程和下载-next-主题\"><a href=\"#创建-Hexo-工程和下载-next-主题\" class=\"headerlink\" title=\"创建 Hexo 工程和下载 next 主题\"></a>创建 Hexo 工程和下载 next 主题</h2><a id=\"more\"></a>\n\n<p>如果没有安装 Hexo, 需要先安装安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>安装 Hexo 之后，生成 Hexo 工程</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure>\n\n<p>再下载 next 主题</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>next 主题下载之后，再配置博客</p>\n<h2 id=\"配置-Hexo-工程和-next-主题\"><a href=\"#配置-Hexo-工程和-next-主题\" class=\"headerlink\" title=\"配置 Hexo 工程和 next 主题\"></a>配置 Hexo 工程和 next 主题</h2><h3 id=\"配置-Hexo\"><a href=\"#配置-Hexo\" class=\"headerlink\" title=\"配置 Hexo\"></a>配置 Hexo</h3><p>修改 blog/_config.yml 中的配置，我的配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Justin Wu&#39;s Blog</span><br><span class=\"line\">subtitle:</span><br><span class=\"line\">keywords: Android</span><br><span class=\"line\">description: 人一能之，己百之；人十能之，己千之。虽愚必明，虽柔必强。</span><br><span class=\"line\">author: Justin Wu</span><br><span class=\"line\">language: zh-Hans</span><br><span class=\"line\">timezone: Asia&#x2F;Shanghai</span><br><span class=\"line\">url: https:&#x2F;&#x2F;www.realjustinwu.com</span><br><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<p>因为我用的是 Rsync 方式把博客部署到服务器，因此需要安装并配置 Deployment</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: rsync</span><br><span class=\"line\">  host: your server address</span><br><span class=\"line\">  user: your server user name</span><br><span class=\"line\">  root: &lt;root&gt;</span><br><span class=\"line\">  port: [port]</span><br><span class=\"line\">  delete: true</span><br><span class=\"line\">  verbose: true</span><br><span class=\"line\">  ignore_errors: false</span><br></pre></td></tr></table></figure>\n\n<p>hexo 工程配置完成之后，配置 next 主题</p>\n<h3 id=\"配置-next-主题\"><a href=\"#配置-next-主题\" class=\"headerlink\" title=\"配置 next 主题\"></a>配置 next 主题</h3><h2 id=\"生成静态博客并-push-到服务器\"><a href=\"#生成静态博客并-push-到服务器\" class=\"headerlink\" title=\"生成静态博客并 push 到服务器\"></a>生成静态博客并 push 到服务器</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-nginx-指向到静态网页目录\"><a href=\"#配置-nginx-指向到静态网页目录\" class=\"headerlink\" title=\"配置 nginx 指向到静态网页目录\"></a>配置 nginx 指向到静态网页目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name  blog.realjustinwu.com www.realjustinwu.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    root &#x2F;var&#x2F;www&#x2F;html;</span><br><span class=\"line\">    location &#x2F; &#123;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>使用 hexo + next 主题搭建博客需要以下几个步骤：</p>\n<ol>\n<li>创建 Hexo 工程和下载 next 主题</li>\n<li>配置 Hexo 工程和 next 主题</li>\n<li>生成静态博客并 push 到服务器</li>\n<li>配置 nginx 指向到静态网页目录</li>\n</ol>\n<h2 id=\"创建-Hexo-工程和下载-next-主题\"><a href=\"#创建-Hexo-工程和下载-next-主题\" class=\"headerlink\" title=\"创建 Hexo 工程和下载 next 主题\"></a>创建 Hexo 工程和下载 next 主题</h2>","more":"<p>如果没有安装 Hexo, 需要先安装安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>安装 Hexo 之后，生成 Hexo 工程</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure>\n\n<p>再下载 next 主题</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>next 主题下载之后，再配置博客</p>\n<h2 id=\"配置-Hexo-工程和-next-主题\"><a href=\"#配置-Hexo-工程和-next-主题\" class=\"headerlink\" title=\"配置 Hexo 工程和 next 主题\"></a>配置 Hexo 工程和 next 主题</h2><h3 id=\"配置-Hexo\"><a href=\"#配置-Hexo\" class=\"headerlink\" title=\"配置 Hexo\"></a>配置 Hexo</h3><p>修改 blog/_config.yml 中的配置，我的配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Justin Wu&#39;s Blog</span><br><span class=\"line\">subtitle:</span><br><span class=\"line\">keywords: Android</span><br><span class=\"line\">description: 人一能之，己百之；人十能之，己千之。虽愚必明，虽柔必强。</span><br><span class=\"line\">author: Justin Wu</span><br><span class=\"line\">language: zh-Hans</span><br><span class=\"line\">timezone: Asia&#x2F;Shanghai</span><br><span class=\"line\">url: https:&#x2F;&#x2F;www.realjustinwu.com</span><br><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<p>因为我用的是 Rsync 方式把博客部署到服务器，因此需要安装并配置 Deployment</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: rsync</span><br><span class=\"line\">  host: your server address</span><br><span class=\"line\">  user: your server user name</span><br><span class=\"line\">  root: &lt;root&gt;</span><br><span class=\"line\">  port: [port]</span><br><span class=\"line\">  delete: true</span><br><span class=\"line\">  verbose: true</span><br><span class=\"line\">  ignore_errors: false</span><br></pre></td></tr></table></figure>\n\n<p>hexo 工程配置完成之后，配置 next 主题</p>\n<h3 id=\"配置-next-主题\"><a href=\"#配置-next-主题\" class=\"headerlink\" title=\"配置 next 主题\"></a>配置 next 主题</h3><h2 id=\"生成静态博客并-push-到服务器\"><a href=\"#生成静态博客并-push-到服务器\" class=\"headerlink\" title=\"生成静态博客并 push 到服务器\"></a>生成静态博客并 push 到服务器</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-nginx-指向到静态网页目录\"><a href=\"#配置-nginx-指向到静态网页目录\" class=\"headerlink\" title=\"配置 nginx 指向到静态网页目录\"></a>配置 nginx 指向到静态网页目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name  blog.realjustinwu.com www.realjustinwu.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    root &#x2F;var&#x2F;www&#x2F;html;</span><br><span class=\"line\">    location &#x2F; &#123;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"搭建 Android Framework 源码阅读环境","date":"2017-02-24T15:18:30.000Z","blog":true,"_content":"\n\n\n电脑磁盘太小，放不下整个 Android 源码。\n以前要看代码都是把Android源代码下载到移动硬盘中，然后用 Sublime 或者 Android Studio 看。\n每次看都要插硬盘，看完之后要推出硬盘，真是麻烦。\n\n后面在网上找到了在线的 Android 源码 [Androidxref][]，可以搜索代码，跳转等。在这里看代码真心不错，如果网络好的话，但是有时候网络不好，速度太慢，甚至打不开，不能忍。\n\n现在想想，对于我这个渣渣，又不是搞 Framework 开发的，更不是系统开发的，要整个 Android 源码有啥用？只要 Framework 代码就够了，偶尔可能还会看一下 Java 代码，再加一个 libcore 代码就足够了。接下来就简单了。\n\n<!-- more -->\n\n把 libcore 和 frameworks 目录拷贝到电脑，然后用 Sublime 打开，使用 CTag 建立索引，就可以看代码了。\n\n看代码的时候经常要跳转，\ncommand + 鼠标左键跳转到方法定义，\nctrl + 减号回退到上一次光标位置，\nctrl + shift + 减号返回前进到上一次光标位置。也可以自定义\n\nPreferences -> Key Bindings 在 User 配置中添加:\n\n```json\n[\n    { \"keys\": [\"ctrl+alt+left\"], \"command\": \"jump_back\" },\n    { \"keys\": [\"ctrl+alt++right\"], \"command\": \"jump_forward\" }\n]\n```\n\n就可以 ctrl+alt+left 返回 ctrl+alt++right 前进了。\n\n[Androidxref]: http://androidxref.com/\n","source":"_posts/搭建-Android-Framework-源码阅读环境.md","raw":"---\ntitle: 搭建 Android Framework 源码阅读环境\ndate: 2017-02-24 23:18:30\ntags: [Sublime, 源码]\ncategories: 源码阅读\nblog: true\n---\n\n\n\n电脑磁盘太小，放不下整个 Android 源码。\n以前要看代码都是把Android源代码下载到移动硬盘中，然后用 Sublime 或者 Android Studio 看。\n每次看都要插硬盘，看完之后要推出硬盘，真是麻烦。\n\n后面在网上找到了在线的 Android 源码 [Androidxref][]，可以搜索代码，跳转等。在这里看代码真心不错，如果网络好的话，但是有时候网络不好，速度太慢，甚至打不开，不能忍。\n\n现在想想，对于我这个渣渣，又不是搞 Framework 开发的，更不是系统开发的，要整个 Android 源码有啥用？只要 Framework 代码就够了，偶尔可能还会看一下 Java 代码，再加一个 libcore 代码就足够了。接下来就简单了。\n\n<!-- more -->\n\n把 libcore 和 frameworks 目录拷贝到电脑，然后用 Sublime 打开，使用 CTag 建立索引，就可以看代码了。\n\n看代码的时候经常要跳转，\ncommand + 鼠标左键跳转到方法定义，\nctrl + 减号回退到上一次光标位置，\nctrl + shift + 减号返回前进到上一次光标位置。也可以自定义\n\nPreferences -> Key Bindings 在 User 配置中添加:\n\n```json\n[\n    { \"keys\": [\"ctrl+alt+left\"], \"command\": \"jump_back\" },\n    { \"keys\": [\"ctrl+alt++right\"], \"command\": \"jump_forward\" }\n]\n```\n\n就可以 ctrl+alt+left 返回 ctrl+alt++right 前进了。\n\n[Androidxref]: http://androidxref.com/\n","slug":"搭建-Android-Framework-源码阅读环境","published":1,"updated":"2020-01-18T11:08:00.610Z","_id":"ck5j64df9000tha9kxll4k7xp","comments":1,"layout":"post","photos":[],"link":"","content":"<p>电脑磁盘太小，放不下整个 Android 源码。<br>以前要看代码都是把Android源代码下载到移动硬盘中，然后用 Sublime 或者 Android Studio 看。<br>每次看都要插硬盘，看完之后要推出硬盘，真是麻烦。</p>\n<p>后面在网上找到了在线的 Android 源码 <a href=\"http://androidxref.com/\" target=\"_blank\" rel=\"noopener\">Androidxref</a>，可以搜索代码，跳转等。在这里看代码真心不错，如果网络好的话，但是有时候网络不好，速度太慢，甚至打不开，不能忍。</p>\n<p>现在想想，对于我这个渣渣，又不是搞 Framework 开发的，更不是系统开发的，要整个 Android 源码有啥用？只要 Framework 代码就够了，偶尔可能还会看一下 Java 代码，再加一个 libcore 代码就足够了。接下来就简单了。</p>\n<a id=\"more\"></a>\n\n<p>把 libcore 和 frameworks 目录拷贝到电脑，然后用 Sublime 打开，使用 CTag 建立索引，就可以看代码了。</p>\n<p>看代码的时候经常要跳转，<br>command + 鼠标左键跳转到方法定义，<br>ctrl + 减号回退到上一次光标位置，<br>ctrl + shift + 减号返回前进到上一次光标位置。也可以自定义</p>\n<p>Preferences -&gt; Key Bindings 在 User 配置中添加:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"ctrl+alt+left\"</span>], <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"jump_back\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"ctrl+alt++right\"</span>], <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"jump_forward\"</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>就可以 ctrl+alt+left 返回 ctrl+alt++right 前进了。</p>\n","site":{"data":{}},"excerpt":"<p>电脑磁盘太小，放不下整个 Android 源码。<br>以前要看代码都是把Android源代码下载到移动硬盘中，然后用 Sublime 或者 Android Studio 看。<br>每次看都要插硬盘，看完之后要推出硬盘，真是麻烦。</p>\n<p>后面在网上找到了在线的 Android 源码 <a href=\"http://androidxref.com/\" target=\"_blank\" rel=\"noopener\">Androidxref</a>，可以搜索代码，跳转等。在这里看代码真心不错，如果网络好的话，但是有时候网络不好，速度太慢，甚至打不开，不能忍。</p>\n<p>现在想想，对于我这个渣渣，又不是搞 Framework 开发的，更不是系统开发的，要整个 Android 源码有啥用？只要 Framework 代码就够了，偶尔可能还会看一下 Java 代码，再加一个 libcore 代码就足够了。接下来就简单了。</p>","more":"<p>把 libcore 和 frameworks 目录拷贝到电脑，然后用 Sublime 打开，使用 CTag 建立索引，就可以看代码了。</p>\n<p>看代码的时候经常要跳转，<br>command + 鼠标左键跳转到方法定义，<br>ctrl + 减号回退到上一次光标位置，<br>ctrl + shift + 减号返回前进到上一次光标位置。也可以自定义</p>\n<p>Preferences -&gt; Key Bindings 在 User 配置中添加:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"ctrl+alt+left\"</span>], <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"jump_back\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"ctrl+alt++right\"</span>], <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"jump_forward\"</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>就可以 ctrl+alt+left 返回 ctrl+alt++right 前进了。</p>"},{"title":"树莓派3 安装 AndroidThings","date":"2018-05-06T03:14:31.000Z","blog":true,"_content":"\n\n\n树莓派 3 安装 Android Things, 参考 https://developer.android.com/things/hardware/raspberrypi\n\n1. 下载安装工具\n\n    打开 https://partner.android.com/things/console/u/0/#/tools 在侧边栏中点击 Tools，然后点击 Download 下载安装工具\n    下载完成之后解压，可以看到 4 个文件，分别是\n\n    - android-things-setup-utility-linux\n    - android-things-setup-utility-macos\n    - android-things-setup-utility-windows.exe\n    - README.md\n\n<!-- more -->\n\n2. image 写入到 sd 卡\n\n    跳转到解压目录，运行 `sudo android-things-setup-utility-macos`, 然后依次选择，\n\n    - What do you want to do?: 1 - Install Android Things and optionally set up Wi-Fi\n    - What hardware are you using?: 1 - Raspberry Pi 3\n    - Do you want to use the default image or a custom image?: 1 - Default image:\n    \n    全部下载完成之后，插入 sd 卡，然后按回车。等待镜像写入到 sd 卡，需要挺长一段时间。\n\n3. 连接网络\n\n    将 SD 卡插入到树莓派，连接鼠标、屏幕和电源。然后连接网络（图形界面操作）\n\n4. Android studio 连接 AndroidThings\n\n    通过 wifi 连接 AndroidThings 设备\n\n        adb connect Android.local:5555\n        # 成功之后提示 connected to Android.local:5555\n\n    Android Studio 写完代码之后，点 Run 按钮，可以选择 AndroidThings 设备\n\n\n\n\n","source":"_posts/树莓派3_安装_AndroidThings.md","raw":"---\ntitle: 树莓派3 安装 AndroidThings\ndate: 2018-05-06 11:14:31\ncategories: AndroidThings\ntags: [树莓派, AndroidThings]\nblog: true\n---\n\n\n\n树莓派 3 安装 Android Things, 参考 https://developer.android.com/things/hardware/raspberrypi\n\n1. 下载安装工具\n\n    打开 https://partner.android.com/things/console/u/0/#/tools 在侧边栏中点击 Tools，然后点击 Download 下载安装工具\n    下载完成之后解压，可以看到 4 个文件，分别是\n\n    - android-things-setup-utility-linux\n    - android-things-setup-utility-macos\n    - android-things-setup-utility-windows.exe\n    - README.md\n\n<!-- more -->\n\n2. image 写入到 sd 卡\n\n    跳转到解压目录，运行 `sudo android-things-setup-utility-macos`, 然后依次选择，\n\n    - What do you want to do?: 1 - Install Android Things and optionally set up Wi-Fi\n    - What hardware are you using?: 1 - Raspberry Pi 3\n    - Do you want to use the default image or a custom image?: 1 - Default image:\n    \n    全部下载完成之后，插入 sd 卡，然后按回车。等待镜像写入到 sd 卡，需要挺长一段时间。\n\n3. 连接网络\n\n    将 SD 卡插入到树莓派，连接鼠标、屏幕和电源。然后连接网络（图形界面操作）\n\n4. Android studio 连接 AndroidThings\n\n    通过 wifi 连接 AndroidThings 设备\n\n        adb connect Android.local:5555\n        # 成功之后提示 connected to Android.local:5555\n\n    Android Studio 写完代码之后，点 Run 按钮，可以选择 AndroidThings 设备\n\n\n\n\n","slug":"树莓派3_安装_AndroidThings","published":1,"updated":"2019-03-07T15:01:19.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64dfa000uha9kjmytttks","content":"<p>树莓派 3 安装 Android Things, 参考 <a href=\"https://developer.android.com/things/hardware/raspberrypi\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/things/hardware/raspberrypi</a></p>\n<ol>\n<li><p>下载安装工具</p>\n<p> 打开 <a href=\"https://partner.android.com/things/console/u/0/#/tools\" target=\"_blank\" rel=\"noopener\">https://partner.android.com/things/console/u/0/#/tools</a> 在侧边栏中点击 Tools，然后点击 Download 下载安装工具<br> 下载完成之后解压，可以看到 4 个文件，分别是</p>\n<ul>\n<li>android-things-setup-utility-linux</li>\n<li>android-things-setup-utility-macos</li>\n<li>android-things-setup-utility-windows.exe</li>\n<li>README.md</li>\n</ul>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li><p>image 写入到 sd 卡</p>\n<p> 跳转到解压目录，运行 <code>sudo android-things-setup-utility-macos</code>, 然后依次选择，</p>\n<ul>\n<li>What do you want to do?: 1 - Install Android Things and optionally set up Wi-Fi</li>\n<li>What hardware are you using?: 1 - Raspberry Pi 3</li>\n<li><p>Do you want to use the default image or a custom image?: 1 - Default image:</p>\n<p>全部下载完成之后，插入 sd 卡，然后按回车。等待镜像写入到 sd 卡，需要挺长一段时间。</p>\n</li>\n</ul>\n</li>\n<li><p>连接网络</p>\n<p> 将 SD 卡插入到树莓派，连接鼠标、屏幕和电源。然后连接网络（图形界面操作）</p>\n</li>\n<li><p>Android studio 连接 AndroidThings</p>\n<p> 通过 wifi 连接 AndroidThings 设备</p>\n<pre><code>adb connect Android.local:5555\n# 成功之后提示 connected to Android.local:5555\n</code></pre><p> Android Studio 写完代码之后，点 Run 按钮，可以选择 AndroidThings 设备</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>树莓派 3 安装 Android Things, 参考 <a href=\"https://developer.android.com/things/hardware/raspberrypi\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/things/hardware/raspberrypi</a></p>\n<ol>\n<li><p>下载安装工具</p>\n<p> 打开 <a href=\"https://partner.android.com/things/console/u/0/#/tools\" target=\"_blank\" rel=\"noopener\">https://partner.android.com/things/console/u/0/#/tools</a> 在侧边栏中点击 Tools，然后点击 Download 下载安装工具<br> 下载完成之后解压，可以看到 4 个文件，分别是</p>\n<ul>\n<li>android-things-setup-utility-linux</li>\n<li>android-things-setup-utility-macos</li>\n<li>android-things-setup-utility-windows.exe</li>\n<li>README.md</li>\n</ul>\n</li>\n</ol>","more":"<ol start=\"2\">\n<li><p>image 写入到 sd 卡</p>\n<p> 跳转到解压目录，运行 <code>sudo android-things-setup-utility-macos</code>, 然后依次选择，</p>\n<ul>\n<li>What do you want to do?: 1 - Install Android Things and optionally set up Wi-Fi</li>\n<li>What hardware are you using?: 1 - Raspberry Pi 3</li>\n<li><p>Do you want to use the default image or a custom image?: 1 - Default image:</p>\n<p>全部下载完成之后，插入 sd 卡，然后按回车。等待镜像写入到 sd 卡，需要挺长一段时间。</p>\n</li>\n</ul>\n</li>\n<li><p>连接网络</p>\n<p> 将 SD 卡插入到树莓派，连接鼠标、屏幕和电源。然后连接网络（图形界面操作）</p>\n</li>\n<li><p>Android studio 连接 AndroidThings</p>\n<p> 通过 wifi 连接 AndroidThings 设备</p>\n<pre><code>adb connect Android.local:5555\n# 成功之后提示 connected to Android.local:5555\n</code></pre><p> Android Studio 写完代码之后，点 Run 按钮，可以选择 AndroidThings 设备</p>\n</li>\n</ol>"},{"title":"树莓派3 安装 Raspbian 镜像","date":"2018-05-06T11:36:33.000Z","blog":true,"_content":"\n\n\n1. 下载 Raspbian 镜像\n\n    到[官网](https://www.raspberrypi.org/downloads/) 选择适合的镜像并下载，下载之后解压得到 img 文件\n\n2. 刻录到 SD 卡\n    \n    下载 SD 卡写入工具 [Etcher](https://etcher.io/)，运行之后，选择刚刚下载的 img 文件，然后选择需要刻的目标 SD 卡\n\n3. 设置 ssh 登录\n\n    在 SD 卡根目录创建空文件 ssh，参考 https://howchoo.com/g/ote0ywmzywj/how-to-enable-ssh-on-raspbian-without-a-screen\n\n        $ cd /Volumes/boot\n        $ touch ssh\n\n<!-- more -->\n\n4. 设置 wifi 密码 https://howchoo.com/g/ndy1zte2yjn/how-to-set-up-wifi-on-your-raspberry-pi-without-ethernet\n\n    在 SD 卡根目录创建文件 wpa_supplicant.conf\n\n        $ cd /Volumes/boot\n        $ vim wpa_supplicant.conf\n        ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\n        network={\n            ssid=\"YOUR_NETWORK_NAME\"\n            psk=\"YOUR_PASSWORD\"\n            key_mgmt=WPA-PSK\n        }\n\n5. 启动 Raspberry\n\n    将 SD 卡装回到树莓派中，连接显示器和键盘，接通电源\n\n","source":"_posts/树莓派3_安装_Raspbian_镜像.md","raw":"---\ntitle: 树莓派3 安装 Raspbian 镜像\ndate: 2018-05-06 19:36:33\ncategories: 树莓派\ntags: [树莓派]\nblog: true\n---\n\n\n\n1. 下载 Raspbian 镜像\n\n    到[官网](https://www.raspberrypi.org/downloads/) 选择适合的镜像并下载，下载之后解压得到 img 文件\n\n2. 刻录到 SD 卡\n    \n    下载 SD 卡写入工具 [Etcher](https://etcher.io/)，运行之后，选择刚刚下载的 img 文件，然后选择需要刻的目标 SD 卡\n\n3. 设置 ssh 登录\n\n    在 SD 卡根目录创建空文件 ssh，参考 https://howchoo.com/g/ote0ywmzywj/how-to-enable-ssh-on-raspbian-without-a-screen\n\n        $ cd /Volumes/boot\n        $ touch ssh\n\n<!-- more -->\n\n4. 设置 wifi 密码 https://howchoo.com/g/ndy1zte2yjn/how-to-set-up-wifi-on-your-raspberry-pi-without-ethernet\n\n    在 SD 卡根目录创建文件 wpa_supplicant.conf\n\n        $ cd /Volumes/boot\n        $ vim wpa_supplicant.conf\n        ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\n        network={\n            ssid=\"YOUR_NETWORK_NAME\"\n            psk=\"YOUR_PASSWORD\"\n            key_mgmt=WPA-PSK\n        }\n\n5. 启动 Raspberry\n\n    将 SD 卡装回到树莓派中，连接显示器和键盘，接通电源\n\n","slug":"树莓派3_安装_Raspbian_镜像","published":1,"updated":"2019-03-07T15:01:19.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64dfi000vha9k043qet1l","content":"<ol>\n<li><p>下载 Raspbian 镜像</p>\n<p> 到<a href=\"https://www.raspberrypi.org/downloads/\" target=\"_blank\" rel=\"noopener\">官网</a> 选择适合的镜像并下载，下载之后解压得到 img 文件</p>\n</li>\n<li><p>刻录到 SD 卡</p>\n<p> 下载 SD 卡写入工具 <a href=\"https://etcher.io/\" target=\"_blank\" rel=\"noopener\">Etcher</a>，运行之后，选择刚刚下载的 img 文件，然后选择需要刻的目标 SD 卡</p>\n</li>\n<li><p>设置 ssh 登录</p>\n<p> 在 SD 卡根目录创建空文件 ssh，参考 <a href=\"https://howchoo.com/g/ote0ywmzywj/how-to-enable-ssh-on-raspbian-without-a-screen\" target=\"_blank\" rel=\"noopener\">https://howchoo.com/g/ote0ywmzywj/how-to-enable-ssh-on-raspbian-without-a-screen</a></p>\n<pre><code>$ cd /Volumes/boot\n$ touch ssh\n</code></pre></li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"4\">\n<li><p>设置 wifi 密码 <a href=\"https://howchoo.com/g/ndy1zte2yjn/how-to-set-up-wifi-on-your-raspberry-pi-without-ethernet\" target=\"_blank\" rel=\"noopener\">https://howchoo.com/g/ndy1zte2yjn/how-to-set-up-wifi-on-your-raspberry-pi-without-ethernet</a></p>\n<p> 在 SD 卡根目录创建文件 wpa_supplicant.conf</p>\n<pre><code>$ cd /Volumes/boot\n$ vim wpa_supplicant.conf\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nnetwork={\n    ssid=&quot;YOUR_NETWORK_NAME&quot;\n    psk=&quot;YOUR_PASSWORD&quot;\n    key_mgmt=WPA-PSK\n}\n</code></pre></li>\n<li><p>启动 Raspberry</p>\n<p> 将 SD 卡装回到树莓派中，连接显示器和键盘，接通电源</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<ol>\n<li><p>下载 Raspbian 镜像</p>\n<p> 到<a href=\"https://www.raspberrypi.org/downloads/\" target=\"_blank\" rel=\"noopener\">官网</a> 选择适合的镜像并下载，下载之后解压得到 img 文件</p>\n</li>\n<li><p>刻录到 SD 卡</p>\n<p> 下载 SD 卡写入工具 <a href=\"https://etcher.io/\" target=\"_blank\" rel=\"noopener\">Etcher</a>，运行之后，选择刚刚下载的 img 文件，然后选择需要刻的目标 SD 卡</p>\n</li>\n<li><p>设置 ssh 登录</p>\n<p> 在 SD 卡根目录创建空文件 ssh，参考 <a href=\"https://howchoo.com/g/ote0ywmzywj/how-to-enable-ssh-on-raspbian-without-a-screen\" target=\"_blank\" rel=\"noopener\">https://howchoo.com/g/ote0ywmzywj/how-to-enable-ssh-on-raspbian-without-a-screen</a></p>\n<pre><code>$ cd /Volumes/boot\n$ touch ssh\n</code></pre></li>\n</ol>","more":"<ol start=\"4\">\n<li><p>设置 wifi 密码 <a href=\"https://howchoo.com/g/ndy1zte2yjn/how-to-set-up-wifi-on-your-raspberry-pi-without-ethernet\" target=\"_blank\" rel=\"noopener\">https://howchoo.com/g/ndy1zte2yjn/how-to-set-up-wifi-on-your-raspberry-pi-without-ethernet</a></p>\n<p> 在 SD 卡根目录创建文件 wpa_supplicant.conf</p>\n<pre><code>$ cd /Volumes/boot\n$ vim wpa_supplicant.conf\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nnetwork={\n    ssid=&quot;YOUR_NETWORK_NAME&quot;\n    psk=&quot;YOUR_PASSWORD&quot;\n    key_mgmt=WPA-PSK\n}\n</code></pre></li>\n<li><p>启动 Raspberry</p>\n<p> 将 SD 卡装回到树莓派中，连接显示器和键盘，接通电源</p>\n</li>\n</ol>"},{"title":"Android Accessibility (1) —— 让 APP 具有辅助功能","date":"2018-09-17T13:03:25.000Z","blog":true,"_content":"\n\n\nAndroid Accessibility 目标是让所有的人都能使用 App，包括盲人、色弱患者、聋人等，还有一些正常人，如正在做饭，没有第三只手来操作 APP 的人。\n\n为了让我们的 APP 更好地支持 Accessibility，需要在 App 中进行一些处理，如一些 ImageButton 添加 label，当获取焦点的时候，Talkback  读的不仅仅是 “unlabeled, button, Double-tap to activate” 而是 “Sigin in, button, ouble-tap to activate”。\n\n让 App 支持 Accessibility，需要下面 9 个步骤\n\n<!-- more -->\n\n## 1. 为 UI 元素添加 Label\n\n给元素添加 label 之后，当元素获取焦点时，Talkback 读的内容是 “label + 元素类型 + 当前状态”，默认情况下，TextView 和 Button 的 label 就是其中的文字，通常不需要更改。其他的 UI 元素，如果能被选中，一般都需要为他添加 label。给元素添加 label 有两种方式\n\n1. 在 XML 中添加 label\n\n    在 XML 中添加 label，通常是给不会在运行过程中改变的元素。如登录按钮，返回按钮等。可以在 XML 中添加 `android:contentDescription=\"@string/back\"`\n\n2. 在 Java 代码中添加 label\n\n    如果运行过程中内容会更改的元素，如 ListView 中的其中一个 Itam，可以在代码中获得这个 View 然后 `itemView.setContentDescription(itemTitle + \" \" + itemDescription)`\n\n对于 EditText，当内容为空的时候，会吧 hint 当成 label，当内容不为空是，把内容当成 label。\n\n如果不想让元素读 ”Double-tap to activate” 或者 “Double-tap And hold to long press”，可以分布设置 clickable 和 longClickable 属性。\n\n## 2. 把多个元素当成一个组\n\n一个 ListView 中的一个 item 通常有好几个 UI 元素，比如联系人列表，会包含 姓名，电话，还有一个呼叫按钮。正常情况下，我们希望整个 item 获取焦点，右滑一次就可以进入下一个 item，而不是先 focus 到姓名，然后 focus 到电话，最后 focus 到呼叫按钮。这时候需要把整个 item 当成一个组。如何一整个 item 当成一个组呢？可以在根元素 ViewGroup 中添加 `android:focusable=\"true\"`，如下\n\n```xml\n<LinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:layout_below=\"@id/header\"\n    android:orientation=\"horizontal\"\n    android:focusable=\"true\">\n\n    <LinearLayout\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_below=\"@id/header\"\n        android:layout_weight=\"1\"\n        android:orientation=\"vertical\">\n\n        <TextView\n            android:id=\"@+id/contact_name\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Name\">\n\n        <TextView\n            android:id=\"@+id/phone_number\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"10086\">\n\n    </LinearLayout>\n\n    <ImageButton\n        android:id=\"@+id/call_button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:src=\"@drawable/call_icon\">\n</LinearLayout>\n```\n\n## 3. 自定义提示语\n\n有时候一些提示语并不是因为元素获取焦点才发出的，比如发送消息时，需要读 “sending”，发送成功之后读 \"sent\"，发送失败读 \"sent failed\"。可以通过一些 UI 元素来发送提示语，如\n\n```kotlin\nval sendBtn = this.findViewById(R.id.send_button)\nsendBtn.setOnClickListener {\n    sendBtn.announceForAccessibility(getText(R.string.sending))\n}\n```\n\n或者\n\n```kotlin\nval event = AccessibilityEvent.obtain(AccessibilityEvent.TYPE_ANNOUNCEMENT)\nevent.packageName = view.getContext().getPackageName()\nevent.className = view.getClass().getName()\nevent.source = view\nevent.text.add(getText(R.string.sending))\nview.parent.requestSendAccessibilityEvent(view, event)\n```\n\n## 4. 启用焦点导航\n\n1. 默认 Button, CheckBox, Clickable 对象都可以自动获得 Accessibility 焦点\n\n2. 如果要为一个特殊的 View 设置 Accessibility 焦点\n    - xml 中设置: `android:importantForAccessibility=\"yes\"`，可以设置 no, auto, noHideDescendants(不能获取焦点，子 View 也不行)\n    - 代码中设置 ViewCompat.setImportantForAccessibility(targetView, ViewCompat.IMPORTANT_FOR_ACCESSIBILITY_YES);\n\n3. 可以控制焦点顺序\n    - nextFocusDown\n    - nextFocusUp\n    - nextFocusLeft\n    - nextFocusRight\n\n4. 自动给某个 View 获取 Accessibility 焦点\n\n    ```kotlin\n    view.postDelayed(() -> {\n        view.sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_HOVER_ENTER)\n    }, 1000)\n    ```\n\n## 5. 易于理解的导航\n\n1. 可以使用键盘或者手势进行跳转\n2. 避免让 UI 元素淡出，或者在某个时刻改变 UI 元素\n3. 对于用户的每一次交互都应该给予反馈\n\n## 6. 增大控件的触摸区域\n\nUI 元素的触摸区域不应该小于 48dp，可以使用 padding，或者 TouchDelegate 来增加触摸区域\n\n## 7. 提高对比度\n\n可以使用 [Accessibility Scanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor&hl=zh-cn) 来检查对比度\n\n1. 对于大于等于 18pt 的正常字体，或者大于等于 14pt 的正常字体，对比度应该在 3.0/1 以上\n2. 对于小于 18pt 的正常字体，或者小于 14pt 的正常字体，对比度应该在 4.5/1 以上\n\n## 8. 使用其他提示信息帮助识别元素\n\n使用颜色 + 符号 + 文字标识一个按钮，而不仅仅是一个文字，或者颜色\n\n## 9. 对于多媒体\n\n- 提供给用户暂停、停止、修改音量等操作\n- 如果视频很重要，应该提供其他格式的内容\n\n通过上面 9 个步骤，基本上能完成大多数对 Accessibility 支持的需求。然而有一些不是很规范的，需要修改 UI 布局。还有一些自定义的 View 比较麻烦一点，比如 ListView 中添加了 Header View 和 footer View，系统默认的 Talkback 会包含这两个 View，读成 “showing item 1 to 10 of 100”，其实 1 是一个 隐藏的 header View，当然此时总数也不对，应该是 98 个。\n\n还有一些是自定义的 View，需要重写 Accessibility API 的接口才能支持 accessibility。这个会在后面的文章中提到。\n\n**参考**: <https://developer.android.com/guide/topics/ui/accessibility/apps>\n","source":"_posts/让_APP_具有辅助功能.md","raw":"---\ntitle: Android Accessibility (1) —— 让 APP 具有辅助功能\ndate: 2018-9-17 21:03:25\ncategories: Android\ntags: [Accessibility, 辅助]\nblog: true\n---\n\n\n\nAndroid Accessibility 目标是让所有的人都能使用 App，包括盲人、色弱患者、聋人等，还有一些正常人，如正在做饭，没有第三只手来操作 APP 的人。\n\n为了让我们的 APP 更好地支持 Accessibility，需要在 App 中进行一些处理，如一些 ImageButton 添加 label，当获取焦点的时候，Talkback  读的不仅仅是 “unlabeled, button, Double-tap to activate” 而是 “Sigin in, button, ouble-tap to activate”。\n\n让 App 支持 Accessibility，需要下面 9 个步骤\n\n<!-- more -->\n\n## 1. 为 UI 元素添加 Label\n\n给元素添加 label 之后，当元素获取焦点时，Talkback 读的内容是 “label + 元素类型 + 当前状态”，默认情况下，TextView 和 Button 的 label 就是其中的文字，通常不需要更改。其他的 UI 元素，如果能被选中，一般都需要为他添加 label。给元素添加 label 有两种方式\n\n1. 在 XML 中添加 label\n\n    在 XML 中添加 label，通常是给不会在运行过程中改变的元素。如登录按钮，返回按钮等。可以在 XML 中添加 `android:contentDescription=\"@string/back\"`\n\n2. 在 Java 代码中添加 label\n\n    如果运行过程中内容会更改的元素，如 ListView 中的其中一个 Itam，可以在代码中获得这个 View 然后 `itemView.setContentDescription(itemTitle + \" \" + itemDescription)`\n\n对于 EditText，当内容为空的时候，会吧 hint 当成 label，当内容不为空是，把内容当成 label。\n\n如果不想让元素读 ”Double-tap to activate” 或者 “Double-tap And hold to long press”，可以分布设置 clickable 和 longClickable 属性。\n\n## 2. 把多个元素当成一个组\n\n一个 ListView 中的一个 item 通常有好几个 UI 元素，比如联系人列表，会包含 姓名，电话，还有一个呼叫按钮。正常情况下，我们希望整个 item 获取焦点，右滑一次就可以进入下一个 item，而不是先 focus 到姓名，然后 focus 到电话，最后 focus 到呼叫按钮。这时候需要把整个 item 当成一个组。如何一整个 item 当成一个组呢？可以在根元素 ViewGroup 中添加 `android:focusable=\"true\"`，如下\n\n```xml\n<LinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:layout_below=\"@id/header\"\n    android:orientation=\"horizontal\"\n    android:focusable=\"true\">\n\n    <LinearLayout\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_below=\"@id/header\"\n        android:layout_weight=\"1\"\n        android:orientation=\"vertical\">\n\n        <TextView\n            android:id=\"@+id/contact_name\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Name\">\n\n        <TextView\n            android:id=\"@+id/phone_number\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"10086\">\n\n    </LinearLayout>\n\n    <ImageButton\n        android:id=\"@+id/call_button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:src=\"@drawable/call_icon\">\n</LinearLayout>\n```\n\n## 3. 自定义提示语\n\n有时候一些提示语并不是因为元素获取焦点才发出的，比如发送消息时，需要读 “sending”，发送成功之后读 \"sent\"，发送失败读 \"sent failed\"。可以通过一些 UI 元素来发送提示语，如\n\n```kotlin\nval sendBtn = this.findViewById(R.id.send_button)\nsendBtn.setOnClickListener {\n    sendBtn.announceForAccessibility(getText(R.string.sending))\n}\n```\n\n或者\n\n```kotlin\nval event = AccessibilityEvent.obtain(AccessibilityEvent.TYPE_ANNOUNCEMENT)\nevent.packageName = view.getContext().getPackageName()\nevent.className = view.getClass().getName()\nevent.source = view\nevent.text.add(getText(R.string.sending))\nview.parent.requestSendAccessibilityEvent(view, event)\n```\n\n## 4. 启用焦点导航\n\n1. 默认 Button, CheckBox, Clickable 对象都可以自动获得 Accessibility 焦点\n\n2. 如果要为一个特殊的 View 设置 Accessibility 焦点\n    - xml 中设置: `android:importantForAccessibility=\"yes\"`，可以设置 no, auto, noHideDescendants(不能获取焦点，子 View 也不行)\n    - 代码中设置 ViewCompat.setImportantForAccessibility(targetView, ViewCompat.IMPORTANT_FOR_ACCESSIBILITY_YES);\n\n3. 可以控制焦点顺序\n    - nextFocusDown\n    - nextFocusUp\n    - nextFocusLeft\n    - nextFocusRight\n\n4. 自动给某个 View 获取 Accessibility 焦点\n\n    ```kotlin\n    view.postDelayed(() -> {\n        view.sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_HOVER_ENTER)\n    }, 1000)\n    ```\n\n## 5. 易于理解的导航\n\n1. 可以使用键盘或者手势进行跳转\n2. 避免让 UI 元素淡出，或者在某个时刻改变 UI 元素\n3. 对于用户的每一次交互都应该给予反馈\n\n## 6. 增大控件的触摸区域\n\nUI 元素的触摸区域不应该小于 48dp，可以使用 padding，或者 TouchDelegate 来增加触摸区域\n\n## 7. 提高对比度\n\n可以使用 [Accessibility Scanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor&hl=zh-cn) 来检查对比度\n\n1. 对于大于等于 18pt 的正常字体，或者大于等于 14pt 的正常字体，对比度应该在 3.0/1 以上\n2. 对于小于 18pt 的正常字体，或者小于 14pt 的正常字体，对比度应该在 4.5/1 以上\n\n## 8. 使用其他提示信息帮助识别元素\n\n使用颜色 + 符号 + 文字标识一个按钮，而不仅仅是一个文字，或者颜色\n\n## 9. 对于多媒体\n\n- 提供给用户暂停、停止、修改音量等操作\n- 如果视频很重要，应该提供其他格式的内容\n\n通过上面 9 个步骤，基本上能完成大多数对 Accessibility 支持的需求。然而有一些不是很规范的，需要修改 UI 布局。还有一些自定义的 View 比较麻烦一点，比如 ListView 中添加了 Header View 和 footer View，系统默认的 Talkback 会包含这两个 View，读成 “showing item 1 to 10 of 100”，其实 1 是一个 隐藏的 header View，当然此时总数也不对，应该是 98 个。\n\n还有一些是自定义的 View，需要重写 Accessibility API 的接口才能支持 accessibility。这个会在后面的文章中提到。\n\n**参考**: <https://developer.android.com/guide/topics/ui/accessibility/apps>\n","slug":"让_APP_具有辅助功能","published":1,"updated":"2019-03-07T15:01:19.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64dfk000wha9k56fdq1uf","content":"<p>Android Accessibility 目标是让所有的人都能使用 App，包括盲人、色弱患者、聋人等，还有一些正常人，如正在做饭，没有第三只手来操作 APP 的人。</p>\n<p>为了让我们的 APP 更好地支持 Accessibility，需要在 App 中进行一些处理，如一些 ImageButton 添加 label，当获取焦点的时候，Talkback  读的不仅仅是 “unlabeled, button, Double-tap to activate” 而是 “Sigin in, button, ouble-tap to activate”。</p>\n<p>让 App 支持 Accessibility，需要下面 9 个步骤</p>\n<a id=\"more\"></a>\n<h2 id=\"1-为-UI-元素添加-Label\"><a href=\"#1-为-UI-元素添加-Label\" class=\"headerlink\" title=\"1. 为 UI 元素添加 Label\"></a>1. 为 UI 元素添加 Label</h2><p>给元素添加 label 之后，当元素获取焦点时，Talkback 读的内容是 “label + 元素类型 + 当前状态”，默认情况下，TextView 和 Button 的 label 就是其中的文字，通常不需要更改。其他的 UI 元素，如果能被选中，一般都需要为他添加 label。给元素添加 label 有两种方式</p>\n<ol>\n<li><p>在 XML 中添加 label</p>\n<p> 在 XML 中添加 label，通常是给不会在运行过程中改变的元素。如登录按钮，返回按钮等。可以在 XML 中添加 <code>android:contentDescription=&quot;@string/back&quot;</code></p>\n</li>\n<li><p>在 Java 代码中添加 label</p>\n<p> 如果运行过程中内容会更改的元素，如 ListView 中的其中一个 Itam，可以在代码中获得这个 View 然后 <code>itemView.setContentDescription(itemTitle + &quot; &quot; + itemDescription)</code></p>\n</li>\n</ol>\n<p>对于 EditText，当内容为空的时候，会吧 hint 当成 label，当内容不为空是，把内容当成 label。</p>\n<p>如果不想让元素读 ”Double-tap to activate” 或者 “Double-tap And hold to long press”，可以分布设置 clickable 和 longClickable 属性。</p>\n<h2 id=\"2-把多个元素当成一个组\"><a href=\"#2-把多个元素当成一个组\" class=\"headerlink\" title=\"2. 把多个元素当成一个组\"></a>2. 把多个元素当成一个组</h2><p>一个 ListView 中的一个 item 通常有好几个 UI 元素，比如联系人列表，会包含 姓名，电话，还有一个呼叫按钮。正常情况下，我们希望整个 item 获取焦点，右滑一次就可以进入下一个 item，而不是先 focus 到姓名，然后 focus 到电话，最后 focus 到呼叫按钮。这时候需要把整个 item 当成一个组。如何一整个 item 当成一个组呢？可以在根元素 ViewGroup 中添加 <code>android:focusable=&quot;true&quot;</code>，如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/header\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:focusable</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/header\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/contact_name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"Name\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/phone_number\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"10086\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/call_button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/call_icon\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-自定义提示语\"><a href=\"#3-自定义提示语\" class=\"headerlink\" title=\"3. 自定义提示语\"></a>3. 自定义提示语</h2><p>有时候一些提示语并不是因为元素获取焦点才发出的，比如发送消息时，需要读 “sending”，发送成功之后读 “sent”，发送失败读 “sent failed”。可以通过一些 UI 元素来发送提示语，如</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> sendBtn = <span class=\"keyword\">this</span>.findViewById(R.id.send_button)</span><br><span class=\"line\">sendBtn.setOnClickListener &#123;</span><br><span class=\"line\">    sendBtn.announceForAccessibility(getText(R.string.sending))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> event = AccessibilityEvent.obtain(AccessibilityEvent.TYPE_ANNOUNCEMENT)</span><br><span class=\"line\">event.packageName = view.getContext().getPackageName()</span><br><span class=\"line\">event.className = view.getClass().getName()</span><br><span class=\"line\">event.source = view</span><br><span class=\"line\">event.text.add(getText(R.string.sending))</span><br><span class=\"line\">view.parent.requestSendAccessibilityEvent(view, event)</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-启用焦点导航\"><a href=\"#4-启用焦点导航\" class=\"headerlink\" title=\"4. 启用焦点导航\"></a>4. 启用焦点导航</h2><ol>\n<li><p>默认 Button, CheckBox, Clickable 对象都可以自动获得 Accessibility 焦点</p>\n</li>\n<li><p>如果要为一个特殊的 View 设置 Accessibility 焦点</p>\n<ul>\n<li>xml 中设置: <code>android:importantForAccessibility=&quot;yes&quot;</code>，可以设置 no, auto, noHideDescendants(不能获取焦点，子 View 也不行)</li>\n<li>代码中设置 ViewCompat.setImportantForAccessibility(targetView, ViewCompat.IMPORTANT_FOR_ACCESSIBILITY_YES);</li>\n</ul>\n</li>\n<li><p>可以控制焦点顺序</p>\n<ul>\n<li>nextFocusDown</li>\n<li>nextFocusUp</li>\n<li>nextFocusLeft</li>\n<li>nextFocusRight</li>\n</ul>\n</li>\n<li><p>自动给某个 View 获取 Accessibility 焦点</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.postDelayed(() -&gt; &#123;</span><br><span class=\"line\">    view.sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_HOVER_ENTER)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"5-易于理解的导航\"><a href=\"#5-易于理解的导航\" class=\"headerlink\" title=\"5. 易于理解的导航\"></a>5. 易于理解的导航</h2><ol>\n<li>可以使用键盘或者手势进行跳转</li>\n<li>避免让 UI 元素淡出，或者在某个时刻改变 UI 元素</li>\n<li>对于用户的每一次交互都应该给予反馈</li>\n</ol>\n<h2 id=\"6-增大控件的触摸区域\"><a href=\"#6-增大控件的触摸区域\" class=\"headerlink\" title=\"6. 增大控件的触摸区域\"></a>6. 增大控件的触摸区域</h2><p>UI 元素的触摸区域不应该小于 48dp，可以使用 padding，或者 TouchDelegate 来增加触摸区域</p>\n<h2 id=\"7-提高对比度\"><a href=\"#7-提高对比度\" class=\"headerlink\" title=\"7. 提高对比度\"></a>7. 提高对比度</h2><p>可以使用 <a href=\"https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor&amp;hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Accessibility Scanner</a> 来检查对比度</p>\n<ol>\n<li>对于大于等于 18pt 的正常字体，或者大于等于 14pt 的正常字体，对比度应该在 3.0/1 以上</li>\n<li>对于小于 18pt 的正常字体，或者小于 14pt 的正常字体，对比度应该在 4.5/1 以上</li>\n</ol>\n<h2 id=\"8-使用其他提示信息帮助识别元素\"><a href=\"#8-使用其他提示信息帮助识别元素\" class=\"headerlink\" title=\"8. 使用其他提示信息帮助识别元素\"></a>8. 使用其他提示信息帮助识别元素</h2><p>使用颜色 + 符号 + 文字标识一个按钮，而不仅仅是一个文字，或者颜色</p>\n<h2 id=\"9-对于多媒体\"><a href=\"#9-对于多媒体\" class=\"headerlink\" title=\"9. 对于多媒体\"></a>9. 对于多媒体</h2><ul>\n<li>提供给用户暂停、停止、修改音量等操作</li>\n<li>如果视频很重要，应该提供其他格式的内容</li>\n</ul>\n<p>通过上面 9 个步骤，基本上能完成大多数对 Accessibility 支持的需求。然而有一些不是很规范的，需要修改 UI 布局。还有一些自定义的 View 比较麻烦一点，比如 ListView 中添加了 Header View 和 footer View，系统默认的 Talkback 会包含这两个 View，读成 “showing item 1 to 10 of 100”，其实 1 是一个 隐藏的 header View，当然此时总数也不对，应该是 98 个。</p>\n<p>还有一些是自定义的 View，需要重写 Accessibility API 的接口才能支持 accessibility。这个会在后面的文章中提到。</p>\n<p><strong>参考</strong>: <a href=\"https://developer.android.com/guide/topics/ui/accessibility/apps\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/guide/topics/ui/accessibility/apps</a></p>\n","site":{"data":{}},"excerpt":"<p>Android Accessibility 目标是让所有的人都能使用 App，包括盲人、色弱患者、聋人等，还有一些正常人，如正在做饭，没有第三只手来操作 APP 的人。</p>\n<p>为了让我们的 APP 更好地支持 Accessibility，需要在 App 中进行一些处理，如一些 ImageButton 添加 label，当获取焦点的时候，Talkback  读的不仅仅是 “unlabeled, button, Double-tap to activate” 而是 “Sigin in, button, ouble-tap to activate”。</p>\n<p>让 App 支持 Accessibility，需要下面 9 个步骤</p>","more":"<h2 id=\"1-为-UI-元素添加-Label\"><a href=\"#1-为-UI-元素添加-Label\" class=\"headerlink\" title=\"1. 为 UI 元素添加 Label\"></a>1. 为 UI 元素添加 Label</h2><p>给元素添加 label 之后，当元素获取焦点时，Talkback 读的内容是 “label + 元素类型 + 当前状态”，默认情况下，TextView 和 Button 的 label 就是其中的文字，通常不需要更改。其他的 UI 元素，如果能被选中，一般都需要为他添加 label。给元素添加 label 有两种方式</p>\n<ol>\n<li><p>在 XML 中添加 label</p>\n<p> 在 XML 中添加 label，通常是给不会在运行过程中改变的元素。如登录按钮，返回按钮等。可以在 XML 中添加 <code>android:contentDescription=&quot;@string/back&quot;</code></p>\n</li>\n<li><p>在 Java 代码中添加 label</p>\n<p> 如果运行过程中内容会更改的元素，如 ListView 中的其中一个 Itam，可以在代码中获得这个 View 然后 <code>itemView.setContentDescription(itemTitle + &quot; &quot; + itemDescription)</code></p>\n</li>\n</ol>\n<p>对于 EditText，当内容为空的时候，会吧 hint 当成 label，当内容不为空是，把内容当成 label。</p>\n<p>如果不想让元素读 ”Double-tap to activate” 或者 “Double-tap And hold to long press”，可以分布设置 clickable 和 longClickable 属性。</p>\n<h2 id=\"2-把多个元素当成一个组\"><a href=\"#2-把多个元素当成一个组\" class=\"headerlink\" title=\"2. 把多个元素当成一个组\"></a>2. 把多个元素当成一个组</h2><p>一个 ListView 中的一个 item 通常有好几个 UI 元素，比如联系人列表，会包含 姓名，电话，还有一个呼叫按钮。正常情况下，我们希望整个 item 获取焦点，右滑一次就可以进入下一个 item，而不是先 focus 到姓名，然后 focus 到电话，最后 focus 到呼叫按钮。这时候需要把整个 item 当成一个组。如何一整个 item 当成一个组呢？可以在根元素 ViewGroup 中添加 <code>android:focusable=&quot;true&quot;</code>，如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/header\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:focusable</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/header\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/contact_name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"Name\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/phone_number\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"10086\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/call_button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/call_icon\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-自定义提示语\"><a href=\"#3-自定义提示语\" class=\"headerlink\" title=\"3. 自定义提示语\"></a>3. 自定义提示语</h2><p>有时候一些提示语并不是因为元素获取焦点才发出的，比如发送消息时，需要读 “sending”，发送成功之后读 “sent”，发送失败读 “sent failed”。可以通过一些 UI 元素来发送提示语，如</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> sendBtn = <span class=\"keyword\">this</span>.findViewById(R.id.send_button)</span><br><span class=\"line\">sendBtn.setOnClickListener &#123;</span><br><span class=\"line\">    sendBtn.announceForAccessibility(getText(R.string.sending))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> event = AccessibilityEvent.obtain(AccessibilityEvent.TYPE_ANNOUNCEMENT)</span><br><span class=\"line\">event.packageName = view.getContext().getPackageName()</span><br><span class=\"line\">event.className = view.getClass().getName()</span><br><span class=\"line\">event.source = view</span><br><span class=\"line\">event.text.add(getText(R.string.sending))</span><br><span class=\"line\">view.parent.requestSendAccessibilityEvent(view, event)</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-启用焦点导航\"><a href=\"#4-启用焦点导航\" class=\"headerlink\" title=\"4. 启用焦点导航\"></a>4. 启用焦点导航</h2><ol>\n<li><p>默认 Button, CheckBox, Clickable 对象都可以自动获得 Accessibility 焦点</p>\n</li>\n<li><p>如果要为一个特殊的 View 设置 Accessibility 焦点</p>\n<ul>\n<li>xml 中设置: <code>android:importantForAccessibility=&quot;yes&quot;</code>，可以设置 no, auto, noHideDescendants(不能获取焦点，子 View 也不行)</li>\n<li>代码中设置 ViewCompat.setImportantForAccessibility(targetView, ViewCompat.IMPORTANT_FOR_ACCESSIBILITY_YES);</li>\n</ul>\n</li>\n<li><p>可以控制焦点顺序</p>\n<ul>\n<li>nextFocusDown</li>\n<li>nextFocusUp</li>\n<li>nextFocusLeft</li>\n<li>nextFocusRight</li>\n</ul>\n</li>\n<li><p>自动给某个 View 获取 Accessibility 焦点</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.postDelayed(() -&gt; &#123;</span><br><span class=\"line\">    view.sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_HOVER_ENTER)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"5-易于理解的导航\"><a href=\"#5-易于理解的导航\" class=\"headerlink\" title=\"5. 易于理解的导航\"></a>5. 易于理解的导航</h2><ol>\n<li>可以使用键盘或者手势进行跳转</li>\n<li>避免让 UI 元素淡出，或者在某个时刻改变 UI 元素</li>\n<li>对于用户的每一次交互都应该给予反馈</li>\n</ol>\n<h2 id=\"6-增大控件的触摸区域\"><a href=\"#6-增大控件的触摸区域\" class=\"headerlink\" title=\"6. 增大控件的触摸区域\"></a>6. 增大控件的触摸区域</h2><p>UI 元素的触摸区域不应该小于 48dp，可以使用 padding，或者 TouchDelegate 来增加触摸区域</p>\n<h2 id=\"7-提高对比度\"><a href=\"#7-提高对比度\" class=\"headerlink\" title=\"7. 提高对比度\"></a>7. 提高对比度</h2><p>可以使用 <a href=\"https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor&amp;hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Accessibility Scanner</a> 来检查对比度</p>\n<ol>\n<li>对于大于等于 18pt 的正常字体，或者大于等于 14pt 的正常字体，对比度应该在 3.0/1 以上</li>\n<li>对于小于 18pt 的正常字体，或者小于 14pt 的正常字体，对比度应该在 4.5/1 以上</li>\n</ol>\n<h2 id=\"8-使用其他提示信息帮助识别元素\"><a href=\"#8-使用其他提示信息帮助识别元素\" class=\"headerlink\" title=\"8. 使用其他提示信息帮助识别元素\"></a>8. 使用其他提示信息帮助识别元素</h2><p>使用颜色 + 符号 + 文字标识一个按钮，而不仅仅是一个文字，或者颜色</p>\n<h2 id=\"9-对于多媒体\"><a href=\"#9-对于多媒体\" class=\"headerlink\" title=\"9. 对于多媒体\"></a>9. 对于多媒体</h2><ul>\n<li>提供给用户暂停、停止、修改音量等操作</li>\n<li>如果视频很重要，应该提供其他格式的内容</li>\n</ul>\n<p>通过上面 9 个步骤，基本上能完成大多数对 Accessibility 支持的需求。然而有一些不是很规范的，需要修改 UI 布局。还有一些自定义的 View 比较麻烦一点，比如 ListView 中添加了 Header View 和 footer View，系统默认的 Talkback 会包含这两个 View，读成 “showing item 1 to 10 of 100”，其实 1 是一个 隐藏的 header View，当然此时总数也不对，应该是 98 个。</p>\n<p>还有一些是自定义的 View，需要重写 Accessibility API 的接口才能支持 accessibility。这个会在后面的文章中提到。</p>\n<p><strong>参考</strong>: <a href=\"https://developer.android.com/guide/topics/ui/accessibility/apps\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/guide/topics/ui/accessibility/apps</a></p>"},{"title":"跳一跳","date":"2018-01-09T12:09:29.000Z","blog":true,"_content":"\n\n\n前段时间下载了一个小游戏 Find A Way, 挺简单的一个游戏, 总共有 640 关可以玩. 很多人都看不上这种小游戏, 我却特别喜欢这种类型的游戏(老年痴呆了, 总得找点乐子嘛). \n\n玩了几关之后, 感觉好无聊啊, 太简单了, 完全不是我这种智商的人玩的游戏. 作为一个入门的程序员, 怎么浪费那么多时间来玩这游戏呢? 于是想写一个外挂...\n\n然后开始规划每一步该怎么做: adb 截图, 对象识别 or 通过颜色判断, 搜索大法 + 剪枝, 发送触摸事件,,, 图像识别难倒我了.\n\n这时候, 微信跳一跳火了, 看那界面纯净的, 简直是练手外挂的最好小白鼠啊, 直接颜色之别就可以了. 于是写了一个小外挂, [Jumper](https://github.com/binwin20/jumper). \n\n<!-- more -->\n\n<video src=\"/images/jump-jump.mp4\" controls=\"controls\" width=\"300\" height=\"500\">Jump-Jump</video>\n\n外挂的执行过程: ADB 截图 -> 图片下载 -> 图片缩放到 640xH -> 查找下一个跳跃点和棋子位置 -> 计算触摸时间 -> ADB 模拟触摸事件\n\n找棋子: 从下到上找棋子颜色相同的点, (棋子的脚)\n找跳跃点: 从上到下, 找跟背景不一样颜色的点(注意可能找到的是棋子, 避开一下), 然后调整一下位置找中点.\n\n踩坑: 不要使用 adb sendevent, 误差太大, 要命.\n\n外挂写完, 可以跳到 1k 左右, 看了一下排行榜, 发现只有我一个人使用外挂刷分... \n","source":"_posts/跳一跳.md","raw":"---\ntitle: 跳一跳\ndate: 2018-01-09 20:09:29\ntags: [微信,跳一跳]\ncategories: 小游戏\nblog: true\n---\n\n\n\n前段时间下载了一个小游戏 Find A Way, 挺简单的一个游戏, 总共有 640 关可以玩. 很多人都看不上这种小游戏, 我却特别喜欢这种类型的游戏(老年痴呆了, 总得找点乐子嘛). \n\n玩了几关之后, 感觉好无聊啊, 太简单了, 完全不是我这种智商的人玩的游戏. 作为一个入门的程序员, 怎么浪费那么多时间来玩这游戏呢? 于是想写一个外挂...\n\n然后开始规划每一步该怎么做: adb 截图, 对象识别 or 通过颜色判断, 搜索大法 + 剪枝, 发送触摸事件,,, 图像识别难倒我了.\n\n这时候, 微信跳一跳火了, 看那界面纯净的, 简直是练手外挂的最好小白鼠啊, 直接颜色之别就可以了. 于是写了一个小外挂, [Jumper](https://github.com/binwin20/jumper). \n\n<!-- more -->\n\n<video src=\"/images/jump-jump.mp4\" controls=\"controls\" width=\"300\" height=\"500\">Jump-Jump</video>\n\n外挂的执行过程: ADB 截图 -> 图片下载 -> 图片缩放到 640xH -> 查找下一个跳跃点和棋子位置 -> 计算触摸时间 -> ADB 模拟触摸事件\n\n找棋子: 从下到上找棋子颜色相同的点, (棋子的脚)\n找跳跃点: 从上到下, 找跟背景不一样颜色的点(注意可能找到的是棋子, 避开一下), 然后调整一下位置找中点.\n\n踩坑: 不要使用 adb sendevent, 误差太大, 要命.\n\n外挂写完, 可以跳到 1k 左右, 看了一下排行榜, 发现只有我一个人使用外挂刷分... \n","slug":"跳一跳","published":1,"updated":"2019-03-07T15:01:19.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64dfm000xha9kn0fjotc3","content":"<p>前段时间下载了一个小游戏 Find A Way, 挺简单的一个游戏, 总共有 640 关可以玩. 很多人都看不上这种小游戏, 我却特别喜欢这种类型的游戏(老年痴呆了, 总得找点乐子嘛). </p>\n<p>玩了几关之后, 感觉好无聊啊, 太简单了, 完全不是我这种智商的人玩的游戏. 作为一个入门的程序员, 怎么浪费那么多时间来玩这游戏呢? 于是想写一个外挂…</p>\n<p>然后开始规划每一步该怎么做: adb 截图, 对象识别 or 通过颜色判断, 搜索大法 + 剪枝, 发送触摸事件,,, 图像识别难倒我了.</p>\n<p>这时候, 微信跳一跳火了, 看那界面纯净的, 简直是练手外挂的最好小白鼠啊, 直接颜色之别就可以了. 于是写了一个小外挂, <a href=\"https://github.com/binwin20/jumper\" target=\"_blank\" rel=\"noopener\">Jumper</a>. </p>\n<a id=\"more\"></a>\n<video src=\"/images/jump-jump.mp4\" controls=\"controls\" width=\"300\" height=\"500\">Jump-Jump</video>\n\n<p>外挂的执行过程: ADB 截图 -&gt; 图片下载 -&gt; 图片缩放到 640xH -&gt; 查找下一个跳跃点和棋子位置 -&gt; 计算触摸时间 -&gt; ADB 模拟触摸事件</p>\n<p>找棋子: 从下到上找棋子颜色相同的点, (棋子的脚)<br>找跳跃点: 从上到下, 找跟背景不一样颜色的点(注意可能找到的是棋子, 避开一下), 然后调整一下位置找中点.</p>\n<p>踩坑: 不要使用 adb sendevent, 误差太大, 要命.</p>\n<p>外挂写完, 可以跳到 1k 左右, 看了一下排行榜, 发现只有我一个人使用外挂刷分… </p>\n","site":{"data":{}},"excerpt":"<p>前段时间下载了一个小游戏 Find A Way, 挺简单的一个游戏, 总共有 640 关可以玩. 很多人都看不上这种小游戏, 我却特别喜欢这种类型的游戏(老年痴呆了, 总得找点乐子嘛). </p>\n<p>玩了几关之后, 感觉好无聊啊, 太简单了, 完全不是我这种智商的人玩的游戏. 作为一个入门的程序员, 怎么浪费那么多时间来玩这游戏呢? 于是想写一个外挂…</p>\n<p>然后开始规划每一步该怎么做: adb 截图, 对象识别 or 通过颜色判断, 搜索大法 + 剪枝, 发送触摸事件,,, 图像识别难倒我了.</p>\n<p>这时候, 微信跳一跳火了, 看那界面纯净的, 简直是练手外挂的最好小白鼠啊, 直接颜色之别就可以了. 于是写了一个小外挂, <a href=\"https://github.com/binwin20/jumper\" target=\"_blank\" rel=\"noopener\">Jumper</a>. </p>","more":"<video src=\"/images/jump-jump.mp4\" controls=\"controls\" width=\"300\" height=\"500\">Jump-Jump</video>\n\n<p>外挂的执行过程: ADB 截图 -&gt; 图片下载 -&gt; 图片缩放到 640xH -&gt; 查找下一个跳跃点和棋子位置 -&gt; 计算触摸时间 -&gt; ADB 模拟触摸事件</p>\n<p>找棋子: 从下到上找棋子颜色相同的点, (棋子的脚)<br>找跳跃点: 从上到下, 找跟背景不一样颜色的点(注意可能找到的是棋子, 避开一下), 然后调整一下位置找中点.</p>\n<p>踩坑: 不要使用 adb sendevent, 误差太大, 要命.</p>\n<p>外挂写完, 可以跳到 1k 左右, 看了一下排行榜, 发现只有我一个人使用外挂刷分… </p>"},{"title":"Android Jetpack - Navigation","date":"2018-11-08T05:24:10.000Z","blog":true,"_content":"\n\n\nNavigation 目的是为了简化 APP 目的地之间的导航。可视化导航，让页面间的导航一目了然。可以给页面跳转添加过度效果，让页面跳转携带的数据跟简洁。\n\n刚开始看到这个名字的时候，以为可以用它来管理 Activity 之间的跳转，看完之后发现不是这样的，只能管理 Fragment 的跳转。\n\nNavigation 需要在 Activity 中添加一个 NavHostFragment，所有的跳转都在由这个 Fragment 管理，也就是根本出不了 Activity。当然也可以跳到其他的 Activity，跳出去之后就不归 Navigation 管了。\n\n如果要更好的使用 Navigation，需要把多 Activity 的运用，简化成单个 Activity 的运用😢。\n\n<!-- more -->\n\n## 原则\n\n1. 有一个固定的起始位置，退出的时候也应该从这个页面退出\n    > 登录页不能作为起始位置\n\n2. 用栈来表示运用的“导航状态”\n\n3. “向上”按钮永远不会退出应用\n    > 起点界面中不应该出现向上按钮。\n    > 当应用是通过其他应用使用 deeplink 的方式启动时，向上按钮应该将用户带回上层界面而不是当时启动此应用的其他应用。\n\n4. Up和Back在应用程序任务中是等效的\n    > 当前用户不处于起点界面，这个时候系统返回键就不会退出应用。\n\n5. DeepLink或者Navigate至相同界面生成相同的堆栈\n    > deeplink 启动之后，清除已有导航栈，取而代之的是deeplink的导航栈。\n    > 1. 如果 destination 是 start destination，则栈中只有 start destination\n    > 2. 如果 destination 不是 start destination，则栈是 start destination + 目标 destination\n\n## 使用Navigation架构组件实现导航\n\n1. Navigation架构组件的目标类型：\n    - Fragment - 通常是 Fragment\n    - Activity\n    - 导航图和子图 - 当目标是导航图或子图时，导航到该图或子图的起始目标\n    - 自定义目标类型\n\n2. 配置\n\n    1. Android Studio 必须是 3.2 版本以上，Settings > Experimental > Enable Navigation Editor\n    2. 添加依赖\n\n        ```gradle\n        // module build.gradle\n        dependencies {\n            implementation \"android.arch.navigation:navigation-fragment-ktx:$nav_version\"\n            implementation \"android.arch.navigation:navigation-ui-ktx:$nav_version\"\n            androidTestImplementation \"android.arch.navigation:navigation-testing-ktx:$nav_version\"\n        }\n        // ## For safe arguments ##\n        // project build.gradle\n        buildscript{\n            dependencies{\n                classpath 'android.arch.navigation:navigation-safe-args-gradle-plugin:1.0.0-alpha06'\n            }\n        }\n        // module build.gradle\n        apply plugin: \"androidx.navigation.safeargs\"\n        ```\n\n3. 配置 navigation 资源文件\n\n    1. 在 res 目录上， New > Android Resource File > 输入文件名 > 选择文件类型 Navigation\n\n    2. 添加目的地: 视图编辑器 > + 号 > Create blank destination; 或者选择已有的 Fragent& Activity\n\n    3. 在试图编辑器中选中目标之后，可以修改属性\n        - Type: 类型 Activity/Fragment 不可改\n        - id: 用于指定一个目的地\n        - Class: 目的地的 class 类型\n        - label: 定义名称\n        - layout: 用于目的地的预览显示\n\n    4. 建立目的地之间的链接\n\n        选中目标，拖动右侧的线，可以建立链接\n\n    5. 选中链接线或者目的地，可以修改跳转的动画等\n\n    6. 选中目的地，在右侧面板，可以设置为“起始目的地”\n\n    7. 把多个 destinations 合并成一个 navigation graph\n\n        ctrl + 点击多个，右击 =》 Move to Nested Graph\n\n    8. 把上面的 Nested Graph 移动到另一个文件，使用 `<include>` 引入\n\n4. 让 Activity 管理 Navigation\n\n    Activity 需要在布局文件中添加 NavHost 的实现类，如 NavHostFragment 去管理导航，如下布局\n\n    ```xml\n    <fragment\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/my_nav_host_fragment\"\n        android:name=\"androidx.navigation.fragment.NavHostFragment\"\n        app:navGraph=\"@navigation/nav_graph\"\n        app:defaultNavHost=\"true\" // 会重写返回行为，也可以从写 onSupportNavigateUp() 自己实现\n                                  // findNavController(R.id.nav_host_fragment).navigateUp()\n        />\n    ```\n\n    代码中创建 NavHostFragment\n\n    ```kotlin\n    val finalHost = NavHostFragment.create(R.navigation.example_graph)\n    supportFragmentManager.beginTransaction()\n        .replace(R.id.nav_host, finalHost)\n        .setPrimaryNavigationFragment(finalHost) // 相当于设置 app:defaultNavHost=\"true\"\n        .commit()\n    ```\n\n5. 获取 NavController，并进行跳转\n\n    1. 获取 NavController，可以通过下面的 3 中方式\n\n        1. NavHostFragment.findNavController(Fragment)\n        2. Navigation.findNavController(Activity, @IdRes int viewId)\n        3. Navigation.findNavController(View)  // 从父容器中查找\n\n        Kotlin 中给 View 添加了一个方法 finNavController() 同第 3 种方式\n\n    2. 页面跳转\n\n        使用 NavController.navigete(id) 跳转，Navigation 是一个工具类，封装了一些好用的方法，如下\n\n        `button.setOnclickListener(Navigation.createNavigationOnClickLisntener(R.id.next_fragment_action, null))`\n\n    3. 使用 bundle 传递数据\n\n        ```kotlin\n        // 携带数据\n        var bundle = bundleOf(\"amount\" to amount)\n        view.findNavController().navigate(R.id.confirmationAction, bundle)\n        // 获取数据\n        val tv = view.findViewById(R.id.textViewAmount)\n        tv.text = arguments.getString(\"amount\")\n        ```\n\n    4. 使用类型安全的方式传递数据\n\n        需要添加插件 `apply plugin: 'androidx.navigation.safeargs'`\n\n        ```kotlin\n        /// ???  use ConfirmationFragmentArgs.Builder() ?\n        override fun onClick(v: View?) {\n            val amountTv: EditText = view!!.findViewById(R.id.editTextAmount)\n            val amount = amountTv.text.toString().toInt()\n            val action = SpecifyAmountFragmentDirections.confirmationAction(amount)\n            action.amount = amount\n            v.findNavController().navigate(action)\n        }\n        override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n            val tv: TextView = view.findViewById(R.id.textViewAmount)\n            val amount = ConfirmationFragmentArgs.fromBundle(arguments).amount\n            tv.text = amount.toString()\n        }\n        ```\n\n6. Deep link 到一个目的地\n\n    在 Android Studio 3.1 一下，需要自己在 manifest.xml 中添加 intent-filter 标签。3.2 以后添加下面的标签\n\n    ```xml\n    <activity name=\".MainActivity\">\n        <nav-graph androdi:value=\"@navigation/main_nav\" />\n    </activity>\n    // main_nav\n    <fragment\n        android:id=\"@+id/deeplink_dest\"\n        android:name=\"com.example.android.codelabs.navigation.DeepLinkFragment\"\n        tools:layout=\"@layout/deeplink_fragment\">\n        <argument\n            android:name=\"myarg\"\n            android:defaultValue=\"Android!\"/>\n        <deepLink app:uri=\"www.example.com/{myarg}\" />\n    </fragment>\n    ```\n\n    通过 NavController 创建 deeplinkIntent，他会找到 nav-graph 对应的 Activity，然后使用 destination 找到对应的目的地。\n    也可以使用 NavDeepLinkBuilder 直接创建 intent\n\n    ```kotlin\n    // 创建一个 pending Intent\n    val deeplink = findNavController().createDeepLink()\n            //.setGraph(R.id.mobile_navigation)  如果没有设置，就查找当前的\n            .setDestination(R.id.deeplink_dest)\n            .setArguments(args)\n            .createPendingIntent()\n    // 或者直接跳转到目的地\n    findNavController().createDeepLink()\n                    .setDestination(R.id.home_dest)\n                    .setArguments(args)\n                    .createTaskStackBuilder().startActivities()\n    // 通过 NavDeepLinkBuilder deeplink\n    val deeplink = NavDeepLinkBuilder(context)\n            .setGraph(R.navigation.mobile_navigation)\n            .setDestination(R.id.android)\n            .setArguments(args)\n            .createPendingIntent()\n    // 通过网页 http://www.example.com/124 直接跳转\n    ```\n\n7. 共享元素\n\n    ```xml\n    // 第一个 fragment\n    <ImageView\n        android:id=\"@+id/image\"\n        android:transitionName=\"image\"/>\n    // 第二个 fragment\n    <ImageView\n        android:id=\"@+id/image\"\n        android:transitionName=\"image\"/>\n    ```\n\n    ```kotlin\n    // 第一个 fragment\n    val imageView = view.findViewById<ImageView>(R.id.image)\n    val extras = FragmentNavigatorExtras(imageView to \"image\")\n    Navigation.findNavController(it).navigate(R.id.next_action, null, null, extras)\n    // 第二个 Fragment\n    override fun onCreateView() {\n        sharedElementEnterTransition = ChangeBounds().apply { duration = 750 }\n        sharedElementReturnTransition= ChangeBounds().apply { duration = 750 }\n    }\n    ```\n\n8. NavHostFragment 之外的元素\n\n    1. 监听 destination 改变\n\n        ```kt\n        navController.addOnNavigatedListener { navController, destination ->\n            textView.setText(destination.label)\n        }\n        ```\n\n    2. 使用 BottomNavigationView 控制 Navigation\n\n        ```xml\n        // layout\n        <com.google.android.material.bottomnavigation.BottomNavigationView\n            android:id=\"@+id/bottom_nav_view\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            app:menu=\"@menu/bottom_nav_menu\" />\n        // bottom_nav_menu\n        <menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n            <item\n                android:id=\"@id/home_dest\"\n                android:icon=\"@drawable/ic_home\"\n                android:title=\"@string/home\" />\n            <item\n                android:id=\"@id/deeplink_dest\"\n                android:icon=\"@drawable/ic_android\"\n                android:title=\"@string/deeplink\" />\n        </menu>\n        ```\n\n        ```kotlin\n        val bottomNav = findViewById<BottomNavigationView>(R.id.bottom_nav_view)\n        bottomNav?.setupWithNavController(navController)  // 把 navController 设置给 bottomNavigationView\n        ```\n\n        点击 item 的时候，如果 navigation 文件中，有跟 item ID 相同的 destination id 就会跳转到这个 destination。\n","source":"_posts/Android_Jetpack_Navigation.md","raw":"---\ntitle: Android Jetpack - Navigation\ndate: 2018-11-8 13:24:10\ncategories: Android\ntags: [Android Jetpack]\nblog: true\n---\n\n\n\nNavigation 目的是为了简化 APP 目的地之间的导航。可视化导航，让页面间的导航一目了然。可以给页面跳转添加过度效果，让页面跳转携带的数据跟简洁。\n\n刚开始看到这个名字的时候，以为可以用它来管理 Activity 之间的跳转，看完之后发现不是这样的，只能管理 Fragment 的跳转。\n\nNavigation 需要在 Activity 中添加一个 NavHostFragment，所有的跳转都在由这个 Fragment 管理，也就是根本出不了 Activity。当然也可以跳到其他的 Activity，跳出去之后就不归 Navigation 管了。\n\n如果要更好的使用 Navigation，需要把多 Activity 的运用，简化成单个 Activity 的运用😢。\n\n<!-- more -->\n\n## 原则\n\n1. 有一个固定的起始位置，退出的时候也应该从这个页面退出\n    > 登录页不能作为起始位置\n\n2. 用栈来表示运用的“导航状态”\n\n3. “向上”按钮永远不会退出应用\n    > 起点界面中不应该出现向上按钮。\n    > 当应用是通过其他应用使用 deeplink 的方式启动时，向上按钮应该将用户带回上层界面而不是当时启动此应用的其他应用。\n\n4. Up和Back在应用程序任务中是等效的\n    > 当前用户不处于起点界面，这个时候系统返回键就不会退出应用。\n\n5. DeepLink或者Navigate至相同界面生成相同的堆栈\n    > deeplink 启动之后，清除已有导航栈，取而代之的是deeplink的导航栈。\n    > 1. 如果 destination 是 start destination，则栈中只有 start destination\n    > 2. 如果 destination 不是 start destination，则栈是 start destination + 目标 destination\n\n## 使用Navigation架构组件实现导航\n\n1. Navigation架构组件的目标类型：\n    - Fragment - 通常是 Fragment\n    - Activity\n    - 导航图和子图 - 当目标是导航图或子图时，导航到该图或子图的起始目标\n    - 自定义目标类型\n\n2. 配置\n\n    1. Android Studio 必须是 3.2 版本以上，Settings > Experimental > Enable Navigation Editor\n    2. 添加依赖\n\n        ```gradle\n        // module build.gradle\n        dependencies {\n            implementation \"android.arch.navigation:navigation-fragment-ktx:$nav_version\"\n            implementation \"android.arch.navigation:navigation-ui-ktx:$nav_version\"\n            androidTestImplementation \"android.arch.navigation:navigation-testing-ktx:$nav_version\"\n        }\n        // ## For safe arguments ##\n        // project build.gradle\n        buildscript{\n            dependencies{\n                classpath 'android.arch.navigation:navigation-safe-args-gradle-plugin:1.0.0-alpha06'\n            }\n        }\n        // module build.gradle\n        apply plugin: \"androidx.navigation.safeargs\"\n        ```\n\n3. 配置 navigation 资源文件\n\n    1. 在 res 目录上， New > Android Resource File > 输入文件名 > 选择文件类型 Navigation\n\n    2. 添加目的地: 视图编辑器 > + 号 > Create blank destination; 或者选择已有的 Fragent& Activity\n\n    3. 在试图编辑器中选中目标之后，可以修改属性\n        - Type: 类型 Activity/Fragment 不可改\n        - id: 用于指定一个目的地\n        - Class: 目的地的 class 类型\n        - label: 定义名称\n        - layout: 用于目的地的预览显示\n\n    4. 建立目的地之间的链接\n\n        选中目标，拖动右侧的线，可以建立链接\n\n    5. 选中链接线或者目的地，可以修改跳转的动画等\n\n    6. 选中目的地，在右侧面板，可以设置为“起始目的地”\n\n    7. 把多个 destinations 合并成一个 navigation graph\n\n        ctrl + 点击多个，右击 =》 Move to Nested Graph\n\n    8. 把上面的 Nested Graph 移动到另一个文件，使用 `<include>` 引入\n\n4. 让 Activity 管理 Navigation\n\n    Activity 需要在布局文件中添加 NavHost 的实现类，如 NavHostFragment 去管理导航，如下布局\n\n    ```xml\n    <fragment\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/my_nav_host_fragment\"\n        android:name=\"androidx.navigation.fragment.NavHostFragment\"\n        app:navGraph=\"@navigation/nav_graph\"\n        app:defaultNavHost=\"true\" // 会重写返回行为，也可以从写 onSupportNavigateUp() 自己实现\n                                  // findNavController(R.id.nav_host_fragment).navigateUp()\n        />\n    ```\n\n    代码中创建 NavHostFragment\n\n    ```kotlin\n    val finalHost = NavHostFragment.create(R.navigation.example_graph)\n    supportFragmentManager.beginTransaction()\n        .replace(R.id.nav_host, finalHost)\n        .setPrimaryNavigationFragment(finalHost) // 相当于设置 app:defaultNavHost=\"true\"\n        .commit()\n    ```\n\n5. 获取 NavController，并进行跳转\n\n    1. 获取 NavController，可以通过下面的 3 中方式\n\n        1. NavHostFragment.findNavController(Fragment)\n        2. Navigation.findNavController(Activity, @IdRes int viewId)\n        3. Navigation.findNavController(View)  // 从父容器中查找\n\n        Kotlin 中给 View 添加了一个方法 finNavController() 同第 3 种方式\n\n    2. 页面跳转\n\n        使用 NavController.navigete(id) 跳转，Navigation 是一个工具类，封装了一些好用的方法，如下\n\n        `button.setOnclickListener(Navigation.createNavigationOnClickLisntener(R.id.next_fragment_action, null))`\n\n    3. 使用 bundle 传递数据\n\n        ```kotlin\n        // 携带数据\n        var bundle = bundleOf(\"amount\" to amount)\n        view.findNavController().navigate(R.id.confirmationAction, bundle)\n        // 获取数据\n        val tv = view.findViewById(R.id.textViewAmount)\n        tv.text = arguments.getString(\"amount\")\n        ```\n\n    4. 使用类型安全的方式传递数据\n\n        需要添加插件 `apply plugin: 'androidx.navigation.safeargs'`\n\n        ```kotlin\n        /// ???  use ConfirmationFragmentArgs.Builder() ?\n        override fun onClick(v: View?) {\n            val amountTv: EditText = view!!.findViewById(R.id.editTextAmount)\n            val amount = amountTv.text.toString().toInt()\n            val action = SpecifyAmountFragmentDirections.confirmationAction(amount)\n            action.amount = amount\n            v.findNavController().navigate(action)\n        }\n        override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n            val tv: TextView = view.findViewById(R.id.textViewAmount)\n            val amount = ConfirmationFragmentArgs.fromBundle(arguments).amount\n            tv.text = amount.toString()\n        }\n        ```\n\n6. Deep link 到一个目的地\n\n    在 Android Studio 3.1 一下，需要自己在 manifest.xml 中添加 intent-filter 标签。3.2 以后添加下面的标签\n\n    ```xml\n    <activity name=\".MainActivity\">\n        <nav-graph androdi:value=\"@navigation/main_nav\" />\n    </activity>\n    // main_nav\n    <fragment\n        android:id=\"@+id/deeplink_dest\"\n        android:name=\"com.example.android.codelabs.navigation.DeepLinkFragment\"\n        tools:layout=\"@layout/deeplink_fragment\">\n        <argument\n            android:name=\"myarg\"\n            android:defaultValue=\"Android!\"/>\n        <deepLink app:uri=\"www.example.com/{myarg}\" />\n    </fragment>\n    ```\n\n    通过 NavController 创建 deeplinkIntent，他会找到 nav-graph 对应的 Activity，然后使用 destination 找到对应的目的地。\n    也可以使用 NavDeepLinkBuilder 直接创建 intent\n\n    ```kotlin\n    // 创建一个 pending Intent\n    val deeplink = findNavController().createDeepLink()\n            //.setGraph(R.id.mobile_navigation)  如果没有设置，就查找当前的\n            .setDestination(R.id.deeplink_dest)\n            .setArguments(args)\n            .createPendingIntent()\n    // 或者直接跳转到目的地\n    findNavController().createDeepLink()\n                    .setDestination(R.id.home_dest)\n                    .setArguments(args)\n                    .createTaskStackBuilder().startActivities()\n    // 通过 NavDeepLinkBuilder deeplink\n    val deeplink = NavDeepLinkBuilder(context)\n            .setGraph(R.navigation.mobile_navigation)\n            .setDestination(R.id.android)\n            .setArguments(args)\n            .createPendingIntent()\n    // 通过网页 http://www.example.com/124 直接跳转\n    ```\n\n7. 共享元素\n\n    ```xml\n    // 第一个 fragment\n    <ImageView\n        android:id=\"@+id/image\"\n        android:transitionName=\"image\"/>\n    // 第二个 fragment\n    <ImageView\n        android:id=\"@+id/image\"\n        android:transitionName=\"image\"/>\n    ```\n\n    ```kotlin\n    // 第一个 fragment\n    val imageView = view.findViewById<ImageView>(R.id.image)\n    val extras = FragmentNavigatorExtras(imageView to \"image\")\n    Navigation.findNavController(it).navigate(R.id.next_action, null, null, extras)\n    // 第二个 Fragment\n    override fun onCreateView() {\n        sharedElementEnterTransition = ChangeBounds().apply { duration = 750 }\n        sharedElementReturnTransition= ChangeBounds().apply { duration = 750 }\n    }\n    ```\n\n8. NavHostFragment 之外的元素\n\n    1. 监听 destination 改变\n\n        ```kt\n        navController.addOnNavigatedListener { navController, destination ->\n            textView.setText(destination.label)\n        }\n        ```\n\n    2. 使用 BottomNavigationView 控制 Navigation\n\n        ```xml\n        // layout\n        <com.google.android.material.bottomnavigation.BottomNavigationView\n            android:id=\"@+id/bottom_nav_view\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            app:menu=\"@menu/bottom_nav_menu\" />\n        // bottom_nav_menu\n        <menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n            <item\n                android:id=\"@id/home_dest\"\n                android:icon=\"@drawable/ic_home\"\n                android:title=\"@string/home\" />\n            <item\n                android:id=\"@id/deeplink_dest\"\n                android:icon=\"@drawable/ic_android\"\n                android:title=\"@string/deeplink\" />\n        </menu>\n        ```\n\n        ```kotlin\n        val bottomNav = findViewById<BottomNavigationView>(R.id.bottom_nav_view)\n        bottomNav?.setupWithNavController(navController)  // 把 navController 设置给 bottomNavigationView\n        ```\n\n        点击 item 的时候，如果 navigation 文件中，有跟 item ID 相同的 destination id 就会跳转到这个 destination。\n","slug":"Android_Jetpack_Navigation","published":1,"updated":"2020-01-18T11:08:00.568Z","_id":"ck5j64djw000yha9kmql5xz7u","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Navigation 目的是为了简化 APP 目的地之间的导航。可视化导航，让页面间的导航一目了然。可以给页面跳转添加过度效果，让页面跳转携带的数据跟简洁。</p>\n<p>刚开始看到这个名字的时候，以为可以用它来管理 Activity 之间的跳转，看完之后发现不是这样的，只能管理 Fragment 的跳转。</p>\n<p>Navigation 需要在 Activity 中添加一个 NavHostFragment，所有的跳转都在由这个 Fragment 管理，也就是根本出不了 Activity。当然也可以跳到其他的 Activity，跳出去之后就不归 Navigation 管了。</p>\n<p>如果要更好的使用 Navigation，需要把多 Activity 的运用，简化成单个 Activity 的运用😢。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2><ol>\n<li><p>有一个固定的起始位置，退出的时候也应该从这个页面退出</p>\n<blockquote>\n<p>登录页不能作为起始位置</p>\n</blockquote>\n</li>\n<li><p>用栈来表示运用的“导航状态”</p>\n</li>\n<li><p>“向上”按钮永远不会退出应用</p>\n<blockquote>\n<p>起点界面中不应该出现向上按钮。<br>当应用是通过其他应用使用 deeplink 的方式启动时，向上按钮应该将用户带回上层界面而不是当时启动此应用的其他应用。</p>\n</blockquote>\n</li>\n<li><p>Up和Back在应用程序任务中是等效的</p>\n<blockquote>\n<p>当前用户不处于起点界面，这个时候系统返回键就不会退出应用。</p>\n</blockquote>\n</li>\n<li><p>DeepLink或者Navigate至相同界面生成相同的堆栈</p>\n<blockquote>\n<p>deeplink 启动之后，清除已有导航栈，取而代之的是deeplink的导航栈。</p>\n<ol>\n<li>如果 destination 是 start destination，则栈中只有 start destination</li>\n<li>如果 destination 不是 start destination，则栈是 start destination + 目标 destination</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"使用Navigation架构组件实现导航\"><a href=\"#使用Navigation架构组件实现导航\" class=\"headerlink\" title=\"使用Navigation架构组件实现导航\"></a>使用Navigation架构组件实现导航</h2><ol>\n<li><p>Navigation架构组件的目标类型：</p>\n<ul>\n<li>Fragment - 通常是 Fragment</li>\n<li>Activity</li>\n<li>导航图和子图 - 当目标是导航图或子图时，导航到该图或子图的起始目标</li>\n<li>自定义目标类型</li>\n</ul>\n</li>\n<li><p>配置</p>\n<ol>\n<li><p>Android Studio 必须是 3.2 版本以上，Settings &gt; Experimental &gt; Enable Navigation Editor</p>\n</li>\n<li><p>添加依赖</p>\n <figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module build.gradle</span></span><br><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    implementation <span class=\"string\">\"android.arch.navigation:navigation-fragment-ktx:$nav_version\"</span></span><br><span class=\"line\">    implementation <span class=\"string\">\"android.arch.navigation:navigation-ui-ktx:$nav_version\"</span></span><br><span class=\"line\">    androidTestImplementation <span class=\"string\">\"android.arch.navigation:navigation-testing-ktx:$nav_version\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ## For safe arguments ##</span></span><br><span class=\"line\"><span class=\"comment\">// project build.gradle</span></span><br><span class=\"line\"><span class=\"keyword\">buildscript</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">dependencies</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">'android.arch.navigation:navigation-safe-args-gradle-plugin:1.0.0-alpha06'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// module build.gradle</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">\"androidx.navigation.safeargs\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>配置 navigation 资源文件</p>\n<ol>\n<li><p>在 res 目录上， New &gt; Android Resource File &gt; 输入文件名 &gt; 选择文件类型 Navigation</p>\n</li>\n<li><p>添加目的地: 视图编辑器 &gt; + 号 &gt; Create blank destination; 或者选择已有的 Fragent&amp; Activity</p>\n</li>\n<li><p>在试图编辑器中选中目标之后，可以修改属性</p>\n<ul>\n<li>Type: 类型 Activity/Fragment 不可改</li>\n<li>id: 用于指定一个目的地</li>\n<li>Class: 目的地的 class 类型</li>\n<li>label: 定义名称</li>\n<li>layout: 用于目的地的预览显示</li>\n</ul>\n</li>\n<li><p>建立目的地之间的链接</p>\n<p> 选中目标，拖动右侧的线，可以建立链接</p>\n</li>\n<li><p>选中链接线或者目的地，可以修改跳转的动画等</p>\n</li>\n<li><p>选中目的地，在右侧面板，可以设置为“起始目的地”</p>\n</li>\n<li><p>把多个 destinations 合并成一个 navigation graph</p>\n<p> ctrl + 点击多个，右击 =》 Move to Nested Graph</p>\n</li>\n<li><p>把上面的 Nested Graph 移动到另一个文件，使用 <code>&lt;include&gt;</code> 引入</p>\n</li>\n</ol>\n</li>\n<li><p>让 Activity 管理 Navigation</p>\n<p> Activity 需要在布局文件中添加 NavHost 的实现类，如 NavHostFragment 去管理导航，如下布局</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/my_nav_host_fragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\"androidx.navigation.fragment.NavHostFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:navGraph</span>=<span class=\"string\">\"@navigation/nav_graph\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:defaultNavHost</span>=<span class=\"string\">\"true\"</span> // 会重写返回行为，也可以从写 <span class=\"attr\">onSupportNavigateUp</span>() 自己实现</span></span><br><span class=\"line\"><span class=\"tag\">                              // <span class=\"attr\">findNavController</span>(<span class=\"attr\">R.id.nav_host_fragment</span>)<span class=\"attr\">.navigateUp</span>()</span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 代码中创建 NavHostFragment</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> finalHost = NavHostFragment.create(R.navigation.example_graph)</span><br><span class=\"line\">supportFragmentManager.beginTransaction()</span><br><span class=\"line\">    .replace(R.id.nav_host, finalHost)</span><br><span class=\"line\">    .setPrimaryNavigationFragment(finalHost) <span class=\"comment\">// 相当于设置 app:defaultNavHost=\"true\"</span></span><br><span class=\"line\">    .commit()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取 NavController，并进行跳转</p>\n<ol>\n<li><p>获取 NavController，可以通过下面的 3 中方式</p>\n<ol>\n<li><p>NavHostFragment.findNavController(Fragment)</p>\n</li>\n<li><p>Navigation.findNavController(Activity, @IdRes int viewId)</p>\n</li>\n<li><p>Navigation.findNavController(View)  // 从父容器中查找</p>\n<p>Kotlin 中给 View 添加了一个方法 finNavController() 同第 3 种方式</p>\n</li>\n</ol>\n</li>\n<li><p>页面跳转</p>\n<p> 使用 NavController.navigete(id) 跳转，Navigation 是一个工具类，封装了一些好用的方法，如下</p>\n<p> <code>button.setOnclickListener(Navigation.createNavigationOnClickLisntener(R.id.next_fragment_action, null))</code></p>\n</li>\n<li><p>使用 bundle 传递数据</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 携带数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bundle = bundleOf(<span class=\"string\">\"amount\"</span> to amount)</span><br><span class=\"line\">view.findNavController().navigate(R.id.confirmationAction, bundle)</span><br><span class=\"line\"><span class=\"comment\">// 获取数据</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> tv = view.findViewById(R.id.textViewAmount)</span><br><span class=\"line\">tv.text = arguments.getString(<span class=\"string\">\"amount\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用类型安全的方式传递数据</p>\n<p> 需要添加插件 <code>apply plugin: &#39;androidx.navigation.safeargs&#39;</code></p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// ???  use ConfirmationFragmentArgs.Builder() ?</span></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onClick</span><span class=\"params\">(v: <span class=\"type\">View</span>?)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> amountTv: EditText = view!!.findViewById(R.id.editTextAmount)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> amount = amountTv.text.toString().toInt()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> action = SpecifyAmountFragmentDirections.confirmationAction(amount)</span><br><span class=\"line\">    action.amount = amount</span><br><span class=\"line\">    v.findNavController().navigate(action)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> tv: TextView = view.findViewById(R.id.textViewAmount)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> amount = ConfirmationFragmentArgs.fromBundle(arguments).amount</span><br><span class=\"line\">    tv.text = amount.toString()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>Deep link 到一个目的地</p>\n<p> 在 Android Studio 3.1 一下，需要自己在 manifest.xml 中添加 intent-filter 标签。3.2 以后添加下面的标签</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">name</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">nav-graph</span> <span class=\"attr\">androdi:value</span>=<span class=\"string\">\"@navigation/main_nav\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">// main_nav</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/deeplink_dest\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.android.codelabs.navigation.DeepLinkFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:layout</span>=<span class=\"string\">\"@layout/deeplink_fragment\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">argument</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"myarg\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:defaultValue</span>=<span class=\"string\">\"Android!\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">deepLink</span> <span class=\"attr\">app:uri</span>=<span class=\"string\">\"www.example.com/&#123;myarg&#125;\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">fragment</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 通过 NavController 创建 deeplinkIntent，他会找到 nav-graph 对应的 Activity，然后使用 destination 找到对应的目的地。<br> 也可以使用 NavDeepLinkBuilder 直接创建 intent</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个 pending Intent</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> deeplink = findNavController().createDeepLink()</span><br><span class=\"line\">        <span class=\"comment\">//.setGraph(R.id.mobile_navigation)  如果没有设置，就查找当前的</span></span><br><span class=\"line\">        .setDestination(R.id.deeplink_dest)</span><br><span class=\"line\">        .setArguments(args)</span><br><span class=\"line\">        .createPendingIntent()</span><br><span class=\"line\"><span class=\"comment\">// 或者直接跳转到目的地</span></span><br><span class=\"line\">findNavController().createDeepLink()</span><br><span class=\"line\">                .setDestination(R.id.home_dest)</span><br><span class=\"line\">                .setArguments(args)</span><br><span class=\"line\">                .createTaskStackBuilder().startActivities()</span><br><span class=\"line\"><span class=\"comment\">// 通过 NavDeepLinkBuilder deeplink</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> deeplink = NavDeepLinkBuilder(context)</span><br><span class=\"line\">        .setGraph(R.navigation.mobile_navigation)</span><br><span class=\"line\">        .setDestination(R.id.android)</span><br><span class=\"line\">        .setArguments(args)</span><br><span class=\"line\">        .createPendingIntent()</span><br><span class=\"line\"><span class=\"comment\">// 通过网页 http://www.example.com/124 直接跳转</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>共享元素</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 第一个 fragment</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/image\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"image\"</span>/&gt;</span></span><br><span class=\"line\">// 第二个 fragment</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/image\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"image\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个 fragment</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> imageView = view.findViewById&lt;ImageView&gt;(R.id.image)</span><br><span class=\"line\"><span class=\"keyword\">val</span> extras = FragmentNavigatorExtras(imageView to <span class=\"string\">\"image\"</span>)</span><br><span class=\"line\">Navigation.findNavController(it).navigate(R.id.next_action, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, extras)</span><br><span class=\"line\"><span class=\"comment\">// 第二个 Fragment</span></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    sharedElementEnterTransition = ChangeBounds().apply &#123; duration = <span class=\"number\">750</span> &#125;</span><br><span class=\"line\">    sharedElementReturnTransition= ChangeBounds().apply &#123; duration = <span class=\"number\">750</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>NavHostFragment 之外的元素</p>\n<ol>\n<li><p>监听 destination 改变</p>\n <figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navController.addOnNavigatedListener &#123; navController, destination -&gt;</span><br><span class=\"line\">    textView.setText(destination.label)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 BottomNavigationView 控制 Navigation</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// layout</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.bottomnavigation.BottomNavigationView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/bottom_nav_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/bottom_nav_menu\"</span> /&gt;</span></span><br><span class=\"line\">// bottom_nav_menu</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@id/home_dest\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_home\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/home\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@id/deeplink_dest\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/deeplink\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> bottomNav = findViewById&lt;BottomNavigationView&gt;(R.id.bottom_nav_view)</span><br><span class=\"line\">bottomNav?.setupWithNavController(navController)  <span class=\"comment\">// 把 navController 设置给 bottomNavigationView</span></span><br></pre></td></tr></table></figure>\n\n<p> 点击 item 的时候，如果 navigation 文件中，有跟 item ID 相同的 destination id 就会跳转到这个 destination。</p>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Navigation 目的是为了简化 APP 目的地之间的导航。可视化导航，让页面间的导航一目了然。可以给页面跳转添加过度效果，让页面跳转携带的数据跟简洁。</p>\n<p>刚开始看到这个名字的时候，以为可以用它来管理 Activity 之间的跳转，看完之后发现不是这样的，只能管理 Fragment 的跳转。</p>\n<p>Navigation 需要在 Activity 中添加一个 NavHostFragment，所有的跳转都在由这个 Fragment 管理，也就是根本出不了 Activity。当然也可以跳到其他的 Activity，跳出去之后就不归 Navigation 管了。</p>\n<p>如果要更好的使用 Navigation，需要把多 Activity 的运用，简化成单个 Activity 的运用😢。</p>","more":"<h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2><ol>\n<li><p>有一个固定的起始位置，退出的时候也应该从这个页面退出</p>\n<blockquote>\n<p>登录页不能作为起始位置</p>\n</blockquote>\n</li>\n<li><p>用栈来表示运用的“导航状态”</p>\n</li>\n<li><p>“向上”按钮永远不会退出应用</p>\n<blockquote>\n<p>起点界面中不应该出现向上按钮。<br>当应用是通过其他应用使用 deeplink 的方式启动时，向上按钮应该将用户带回上层界面而不是当时启动此应用的其他应用。</p>\n</blockquote>\n</li>\n<li><p>Up和Back在应用程序任务中是等效的</p>\n<blockquote>\n<p>当前用户不处于起点界面，这个时候系统返回键就不会退出应用。</p>\n</blockquote>\n</li>\n<li><p>DeepLink或者Navigate至相同界面生成相同的堆栈</p>\n<blockquote>\n<p>deeplink 启动之后，清除已有导航栈，取而代之的是deeplink的导航栈。</p>\n<ol>\n<li>如果 destination 是 start destination，则栈中只有 start destination</li>\n<li>如果 destination 不是 start destination，则栈是 start destination + 目标 destination</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"使用Navigation架构组件实现导航\"><a href=\"#使用Navigation架构组件实现导航\" class=\"headerlink\" title=\"使用Navigation架构组件实现导航\"></a>使用Navigation架构组件实现导航</h2><ol>\n<li><p>Navigation架构组件的目标类型：</p>\n<ul>\n<li>Fragment - 通常是 Fragment</li>\n<li>Activity</li>\n<li>导航图和子图 - 当目标是导航图或子图时，导航到该图或子图的起始目标</li>\n<li>自定义目标类型</li>\n</ul>\n</li>\n<li><p>配置</p>\n<ol>\n<li><p>Android Studio 必须是 3.2 版本以上，Settings &gt; Experimental &gt; Enable Navigation Editor</p>\n</li>\n<li><p>添加依赖</p>\n <figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module build.gradle</span></span><br><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    implementation <span class=\"string\">\"android.arch.navigation:navigation-fragment-ktx:$nav_version\"</span></span><br><span class=\"line\">    implementation <span class=\"string\">\"android.arch.navigation:navigation-ui-ktx:$nav_version\"</span></span><br><span class=\"line\">    androidTestImplementation <span class=\"string\">\"android.arch.navigation:navigation-testing-ktx:$nav_version\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ## For safe arguments ##</span></span><br><span class=\"line\"><span class=\"comment\">// project build.gradle</span></span><br><span class=\"line\"><span class=\"keyword\">buildscript</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">dependencies</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">'android.arch.navigation:navigation-safe-args-gradle-plugin:1.0.0-alpha06'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// module build.gradle</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">\"androidx.navigation.safeargs\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>配置 navigation 资源文件</p>\n<ol>\n<li><p>在 res 目录上， New &gt; Android Resource File &gt; 输入文件名 &gt; 选择文件类型 Navigation</p>\n</li>\n<li><p>添加目的地: 视图编辑器 &gt; + 号 &gt; Create blank destination; 或者选择已有的 Fragent&amp; Activity</p>\n</li>\n<li><p>在试图编辑器中选中目标之后，可以修改属性</p>\n<ul>\n<li>Type: 类型 Activity/Fragment 不可改</li>\n<li>id: 用于指定一个目的地</li>\n<li>Class: 目的地的 class 类型</li>\n<li>label: 定义名称</li>\n<li>layout: 用于目的地的预览显示</li>\n</ul>\n</li>\n<li><p>建立目的地之间的链接</p>\n<p> 选中目标，拖动右侧的线，可以建立链接</p>\n</li>\n<li><p>选中链接线或者目的地，可以修改跳转的动画等</p>\n</li>\n<li><p>选中目的地，在右侧面板，可以设置为“起始目的地”</p>\n</li>\n<li><p>把多个 destinations 合并成一个 navigation graph</p>\n<p> ctrl + 点击多个，右击 =》 Move to Nested Graph</p>\n</li>\n<li><p>把上面的 Nested Graph 移动到另一个文件，使用 <code>&lt;include&gt;</code> 引入</p>\n</li>\n</ol>\n</li>\n<li><p>让 Activity 管理 Navigation</p>\n<p> Activity 需要在布局文件中添加 NavHost 的实现类，如 NavHostFragment 去管理导航，如下布局</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/my_nav_host_fragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\"androidx.navigation.fragment.NavHostFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:navGraph</span>=<span class=\"string\">\"@navigation/nav_graph\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:defaultNavHost</span>=<span class=\"string\">\"true\"</span> // 会重写返回行为，也可以从写 <span class=\"attr\">onSupportNavigateUp</span>() 自己实现</span></span><br><span class=\"line\"><span class=\"tag\">                              // <span class=\"attr\">findNavController</span>(<span class=\"attr\">R.id.nav_host_fragment</span>)<span class=\"attr\">.navigateUp</span>()</span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 代码中创建 NavHostFragment</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> finalHost = NavHostFragment.create(R.navigation.example_graph)</span><br><span class=\"line\">supportFragmentManager.beginTransaction()</span><br><span class=\"line\">    .replace(R.id.nav_host, finalHost)</span><br><span class=\"line\">    .setPrimaryNavigationFragment(finalHost) <span class=\"comment\">// 相当于设置 app:defaultNavHost=\"true\"</span></span><br><span class=\"line\">    .commit()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取 NavController，并进行跳转</p>\n<ol>\n<li><p>获取 NavController，可以通过下面的 3 中方式</p>\n<ol>\n<li><p>NavHostFragment.findNavController(Fragment)</p>\n</li>\n<li><p>Navigation.findNavController(Activity, @IdRes int viewId)</p>\n</li>\n<li><p>Navigation.findNavController(View)  // 从父容器中查找</p>\n<p>Kotlin 中给 View 添加了一个方法 finNavController() 同第 3 种方式</p>\n</li>\n</ol>\n</li>\n<li><p>页面跳转</p>\n<p> 使用 NavController.navigete(id) 跳转，Navigation 是一个工具类，封装了一些好用的方法，如下</p>\n<p> <code>button.setOnclickListener(Navigation.createNavigationOnClickLisntener(R.id.next_fragment_action, null))</code></p>\n</li>\n<li><p>使用 bundle 传递数据</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 携带数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bundle = bundleOf(<span class=\"string\">\"amount\"</span> to amount)</span><br><span class=\"line\">view.findNavController().navigate(R.id.confirmationAction, bundle)</span><br><span class=\"line\"><span class=\"comment\">// 获取数据</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> tv = view.findViewById(R.id.textViewAmount)</span><br><span class=\"line\">tv.text = arguments.getString(<span class=\"string\">\"amount\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用类型安全的方式传递数据</p>\n<p> 需要添加插件 <code>apply plugin: &#39;androidx.navigation.safeargs&#39;</code></p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// ???  use ConfirmationFragmentArgs.Builder() ?</span></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onClick</span><span class=\"params\">(v: <span class=\"type\">View</span>?)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> amountTv: EditText = view!!.findViewById(R.id.editTextAmount)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> amount = amountTv.text.toString().toInt()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> action = SpecifyAmountFragmentDirections.confirmationAction(amount)</span><br><span class=\"line\">    action.amount = amount</span><br><span class=\"line\">    v.findNavController().navigate(action)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> tv: TextView = view.findViewById(R.id.textViewAmount)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> amount = ConfirmationFragmentArgs.fromBundle(arguments).amount</span><br><span class=\"line\">    tv.text = amount.toString()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>Deep link 到一个目的地</p>\n<p> 在 Android Studio 3.1 一下，需要自己在 manifest.xml 中添加 intent-filter 标签。3.2 以后添加下面的标签</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">name</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">nav-graph</span> <span class=\"attr\">androdi:value</span>=<span class=\"string\">\"@navigation/main_nav\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">// main_nav</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/deeplink_dest\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.android.codelabs.navigation.DeepLinkFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:layout</span>=<span class=\"string\">\"@layout/deeplink_fragment\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">argument</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"myarg\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:defaultValue</span>=<span class=\"string\">\"Android!\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">deepLink</span> <span class=\"attr\">app:uri</span>=<span class=\"string\">\"www.example.com/&#123;myarg&#125;\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">fragment</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 通过 NavController 创建 deeplinkIntent，他会找到 nav-graph 对应的 Activity，然后使用 destination 找到对应的目的地。<br> 也可以使用 NavDeepLinkBuilder 直接创建 intent</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个 pending Intent</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> deeplink = findNavController().createDeepLink()</span><br><span class=\"line\">        <span class=\"comment\">//.setGraph(R.id.mobile_navigation)  如果没有设置，就查找当前的</span></span><br><span class=\"line\">        .setDestination(R.id.deeplink_dest)</span><br><span class=\"line\">        .setArguments(args)</span><br><span class=\"line\">        .createPendingIntent()</span><br><span class=\"line\"><span class=\"comment\">// 或者直接跳转到目的地</span></span><br><span class=\"line\">findNavController().createDeepLink()</span><br><span class=\"line\">                .setDestination(R.id.home_dest)</span><br><span class=\"line\">                .setArguments(args)</span><br><span class=\"line\">                .createTaskStackBuilder().startActivities()</span><br><span class=\"line\"><span class=\"comment\">// 通过 NavDeepLinkBuilder deeplink</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> deeplink = NavDeepLinkBuilder(context)</span><br><span class=\"line\">        .setGraph(R.navigation.mobile_navigation)</span><br><span class=\"line\">        .setDestination(R.id.android)</span><br><span class=\"line\">        .setArguments(args)</span><br><span class=\"line\">        .createPendingIntent()</span><br><span class=\"line\"><span class=\"comment\">// 通过网页 http://www.example.com/124 直接跳转</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>共享元素</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 第一个 fragment</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/image\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"image\"</span>/&gt;</span></span><br><span class=\"line\">// 第二个 fragment</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/image\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"image\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个 fragment</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> imageView = view.findViewById&lt;ImageView&gt;(R.id.image)</span><br><span class=\"line\"><span class=\"keyword\">val</span> extras = FragmentNavigatorExtras(imageView to <span class=\"string\">\"image\"</span>)</span><br><span class=\"line\">Navigation.findNavController(it).navigate(R.id.next_action, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, extras)</span><br><span class=\"line\"><span class=\"comment\">// 第二个 Fragment</span></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    sharedElementEnterTransition = ChangeBounds().apply &#123; duration = <span class=\"number\">750</span> &#125;</span><br><span class=\"line\">    sharedElementReturnTransition= ChangeBounds().apply &#123; duration = <span class=\"number\">750</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>NavHostFragment 之外的元素</p>\n<ol>\n<li><p>监听 destination 改变</p>\n <figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navController.addOnNavigatedListener &#123; navController, destination -&gt;</span><br><span class=\"line\">    textView.setText(destination.label)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 BottomNavigationView 控制 Navigation</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// layout</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.bottomnavigation.BottomNavigationView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/bottom_nav_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/bottom_nav_menu\"</span> /&gt;</span></span><br><span class=\"line\">// bottom_nav_menu</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@id/home_dest\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_home\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/home\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@id/deeplink_dest\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/deeplink\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> bottomNav = findViewById&lt;BottomNavigationView&gt;(R.id.bottom_nav_view)</span><br><span class=\"line\">bottomNav?.setupWithNavController(navController)  <span class=\"comment\">// 把 navController 设置给 bottomNavigationView</span></span><br></pre></td></tr></table></figure>\n\n<p> 点击 item 的时候，如果 navigation 文件中，有跟 item ID 相同的 destination id 就会跳转到这个 destination。</p>\n</li>\n</ol>\n</li>\n</ol>"},{"title":"Android Accessibility (2) —— 创建自己的 Accessibility Service","date":"2018-10-07T12:27:00.000Z","blog":true,"_content":"\n\n\n> 在分析 Accessibility Service 源码之前，我们先看一下 Accessibility Service 是如何创建的，为后续继续分析源码做准备。[参考文档](https://developer.android.com/guide/topics/ui/accessibility/services)\n\nAndroid 系统给我们提供了标准的 accessibility 服务，如 Talkback 和 Select to Speak。一些 APP 也为我们提供了 Accessibility 功能，如 绿色保护、MacroDroid、Tasker、Vysor 等，当然我们也可以自定义我们自己的服务。\n\n## 初始化\n\n1. 声明 Accessibility 服务\n\n    <!-- more -->\n\n    声明一个 Service 并添加到 Manifest 文件中，需要权限和 filter\n\n    ```xml\n    <service\n        android:name=\".MyAccessibilityService\"\n        android:permission=\"android.permission.BIND_ACCESSIBILITY_SERVICE\">\n        ...\n        <intent-filter>\n            <action android:name=\"android.accessibilityservice.AccessibilityService\" />\n        </intent-filter>\n        <!-- 设置 configuration -->\n        <meta-data\n            android:name=\"android:accessibilityservice\"\n            android:resource=\"@xml/accessibility\" />\n    </service>\n    ```\n\n2. 添加 accessibility 配置文件\n\n    ```xml\n    <accessibility-service xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:description=\"@string/accessibility_service_description\"\n        android:packageNames=\"com.example.android.apis\"\n        android:accessibilityEventTypes=\"typeAllMask\"\n        android:accessibilityFlags=\"flagDefault\"\n        android:accessibilityFeedbackType=\"feedbackSpoken\"\n        android:notificationTimeout=\"100\"\n        android:canRetrieveWindowContent=\"true\"\n        android:settingsActivity=\"com.example.android.accessibility.ServiceSettingsActivity\"\n    />\n    ```\n\n3. 参数说明\n\n| 字段名 | 字段说明 |\n    | -- | -- |\n    | android:packageNames | 关注哪些应用发出的事件，多个应用包名之间用逗号分隔，如果不填，则关注手机上所有应用发出的事件 |\n    | android:accessibilityEventType | 关注的事件类型，TYPE_VIEW_FOCUSED，TYPE_WINDOW_STATE_CHANGED，TYPE_NOTIFICATION_STATE_CHANGED 等 |\n    | android:accessibilityFlags | 辅助服务额外的flag信息。例如FLAG_REPORT_VIEW_IDS可以使回调的事件带上view的ID |\n    | android:accessibilityFeedbackType | 事件的反馈类型，例如声音反馈、触觉反馈、视觉反馈等。 |\n    | android:notificationTimeout | 两个同样类型的辅助事件发给辅助服务的最小时间间隔 |\n    | android:canRetrieveWindowContent | 是否可以获取窗口内容 |\n    | android:description | 打开 Accessibility 之后的描述信息 |\n    | android:settingsActivity | 打开 Accessibility 之后，点击 Settings 跳转的 Activity |\n\n## 实现 AccessibilityService\n\n1. 需要重写 AccessibilityService 的方法\n\n    1. onServiceConnected() 可选。系统启动这个 Service 的时候，可以在这里调用setServiceInfo()进行配置AccessibilityServiceInfo\n    2. onAccessibilityEvent() 必选。接收系统发来的 AccessibilityEvent\n    3. onInterrupt() 必选。系统想要中断 AccessibilityService 返给的响应时会调用。在整个生命周期里会被调用多次。\n    4. onUnbind() 可选。系统关闭这个 Service 的时候，做一些释放工作\n\n2. 过滤 Accessibility 事件\n\n    1. 过滤需要的事件，可以通过两种方式\n        - 包名: 通过 android:packageNames 中定义\n        - 事件类型: 通过 android:accessibilityEventTypes 设置\n\n    2. 注意： 系统会把 accessibility 事件发送给多个 Service，如果他们的 feedback Types 不一样，如果是一样的，会发送给先注册的那个\n\n3. 设置音量\n\n    ```kotlin\n    private val mAudioManager = getSystemService(AUDIO_SERVICE) as AudioManager\n    override fun onAccessibilityEvent(accessibilityEvent: AccessibilityEvent) {\n        if (accessibilityEvent.source.text == \"Increase volume\") {\n            mAudioManager.adjustStreamVolume(AudioManager.STREAM_ACCESSIBILITY, ADJUST_RAISE, 0)\n        }\n    }\n    ```\n\n4. 使用 Accessibility 按钮(在 Navigation Bar 右侧, Android 8.0)\n\n    可以在 Service 启动的时候，检查并监听这个按钮。可以查看 Select to Speck 这个 Accessibility Service\n\n    ```kotlin\n    override fun onServiceConnected() {\n        if (accessibilityButtonController?.isAccessibilityButtonAvailable) { // 需要判断能否注册这个 button\n            registerAccessibilityButton();\n        } else {\n            // Can't register\n        }\n    }\n\n    private fun registerAccessibilityButton() {\n        accessibilityButtonController?.registerAccessibilityButtonCallback(\n            object: AccessibilityButtonCallback() {\n                override fun onClicked(controller: accessibilityButtonController) {\n                    // 被点击了\n                }\n                override fun onAvailablityChanged(controller: accessibilityButtonController, available: Boolean) {\n                    if (controller == accessibilityButtonController) {\n                    }\n                }\n            }, null)\n    }\n    ```\n\n5. 获取指纹识别手势\n\n    如果要使用这个功能，应该提供给用户开关控制这个功能。如果多个 Accessibility Service 都使用指纹手势功能，可能导致冲突。\n\n    ```xml\n    <accessibility-service xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    ...\n    android:accessibilityFlags=\" ... |flagRequestFingerprintGestures\"\n    android:canRequestFingerprintGestures=\"true\"\n    ... />\n    ```\n\n    ```kotlin\n    override fun onCreate() {\n        mGestureController = fingerprintGestureController\n        mIsGestureDetectionAvailable = mGestureController?.isGestureDetectionAvailable ?: false\n    }\n    override fun onServiceConnected() {\n        if (mFingerprintGestureCallback != null || !mIsGestureDetectionAvailable) return\n        mFingerprintGestureCallback =\n                object : FingerprintGestureController.FingerprintGestureCallback() {\n                    override fun onGestureDetected(gesture: Int) {\n                        when (gesture) {\n                            FINGERPRINT_GESTURE_SWIPE_DOWN -> moveGameCursorDown()\n                            FINGERPRINT_GESTURE_SWIPE_LEFT -> moveGameCursorLeft()\n                            FINGERPRINT_GESTURE_SWIPE_RIGHT -> moveGameCursorRight()\n                            FINGERPRINT_GESTURE_SWIPE_UP -> moveGameCursorUp()\n                            else -> Log.e(MY_APP_TAG, \"Error: Unknown gesture type detected!\")\n                        }\n                    }\n                    override fun onGestureDetectionAvailabilityChanged(available: Boolean) {\n                        mIsGestureDetectionAvailable = available\n                    }\n                }\n        mFingerprintGestureCallback?.also {\n            mGestureController?.registerFingerprintGestureCallback(it, null)\n        }\n    }\n    ```\n\n6. 多国语言的支持\n\n7. 监听手势(Android 4.1)\n\n    设置 `serviceInfo.flags = AccessibilityServiceInfo.FLAG_REQUEST_TOUCH_EXPLORTATION_MODE`\n\n8. 执行手势操作\n\n    右滑然后下滑\n    ```kotlin\n    private fun doRightThenDownDrag() {\n        val dragRightPath = Path().apply { moveTo(200, 200) lineTo(400, 200) }\n        val rightDuration = 500L\n        val dragDownPath = Path().apply { moveTo(400, 200) lineTo(400, 400) }\n        val downtDuration = 500L\n        val rightThenDownDrag = GestureDexcription.StrokeDescription(dragRightPath, 0L, rightDuration, true).apply {\n            continueStroke(dragDownPath, rightDuration, downtDuration, false)\n        }\n    }\n    ```\n\n9. 使用 Accessibility 动作(Android 4.1)\n\n    使用  performAction() 执行特殊动作。\n    ```kt\n    override fun onAccessibilityEvent(event: AccessibilityEvent) {\n        event.source?.apply {\n            // 使用 event 和 层级信息 source 决定执行啥动作\n            performAction(AccessibilityNodeInfo.ACTION_SCROLL_FORWARD)\n            // 也可以使用 performGlobalAction() 执行全局操作，如跳转到首页\n            recycle()\n        }\n    }\n    ```\n\n### 其他方法\n\n1. 使用焦点\n\n    Accessibility 焦点跟输入焦点是不一样的。Accessibility 焦点是为了让 Accessibility 能能够使用非选中的点。使用 `AccessibilityNodeInfo.findFocus()` 或者 `focusSearch()` 查找元素，然后使用 `perfomAction(ACTION_SET_ACCESSIBILITY_FOCUS)` 获取焦点\n\n2. 获取布局文件\n\n    使用 `AccessibilityEvent.getSource()` 获取布局层级，需要设置 `canRetrieveWindowContent = true`\n\n3. 获取焦点文件\n\n    使用 `AccessibilityNodeInfo.getChild()` 和 `getParent()` 获取焦点元素\n\n4. 获取 Hint Text\n\n    `getHintText()` 即使 hint 没有显示也能获取到\n\n5. 获取元素的位置\n\n    使用 refreshWithExtraData(EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY, resultBundle)\n","source":"_posts/建立自己的_Accessibility_Service.md","raw":"---\ntitle: Android Accessibility (2) —— 创建自己的 Accessibility Service\ndate: 2018-10-7 20:27:00\ncategories: Android\ntags: [Accessibility, 辅助]\nblog: true\n---\n\n\n\n> 在分析 Accessibility Service 源码之前，我们先看一下 Accessibility Service 是如何创建的，为后续继续分析源码做准备。[参考文档](https://developer.android.com/guide/topics/ui/accessibility/services)\n\nAndroid 系统给我们提供了标准的 accessibility 服务，如 Talkback 和 Select to Speak。一些 APP 也为我们提供了 Accessibility 功能，如 绿色保护、MacroDroid、Tasker、Vysor 等，当然我们也可以自定义我们自己的服务。\n\n## 初始化\n\n1. 声明 Accessibility 服务\n\n    <!-- more -->\n\n    声明一个 Service 并添加到 Manifest 文件中，需要权限和 filter\n\n    ```xml\n    <service\n        android:name=\".MyAccessibilityService\"\n        android:permission=\"android.permission.BIND_ACCESSIBILITY_SERVICE\">\n        ...\n        <intent-filter>\n            <action android:name=\"android.accessibilityservice.AccessibilityService\" />\n        </intent-filter>\n        <!-- 设置 configuration -->\n        <meta-data\n            android:name=\"android:accessibilityservice\"\n            android:resource=\"@xml/accessibility\" />\n    </service>\n    ```\n\n2. 添加 accessibility 配置文件\n\n    ```xml\n    <accessibility-service xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:description=\"@string/accessibility_service_description\"\n        android:packageNames=\"com.example.android.apis\"\n        android:accessibilityEventTypes=\"typeAllMask\"\n        android:accessibilityFlags=\"flagDefault\"\n        android:accessibilityFeedbackType=\"feedbackSpoken\"\n        android:notificationTimeout=\"100\"\n        android:canRetrieveWindowContent=\"true\"\n        android:settingsActivity=\"com.example.android.accessibility.ServiceSettingsActivity\"\n    />\n    ```\n\n3. 参数说明\n\n| 字段名 | 字段说明 |\n    | -- | -- |\n    | android:packageNames | 关注哪些应用发出的事件，多个应用包名之间用逗号分隔，如果不填，则关注手机上所有应用发出的事件 |\n    | android:accessibilityEventType | 关注的事件类型，TYPE_VIEW_FOCUSED，TYPE_WINDOW_STATE_CHANGED，TYPE_NOTIFICATION_STATE_CHANGED 等 |\n    | android:accessibilityFlags | 辅助服务额外的flag信息。例如FLAG_REPORT_VIEW_IDS可以使回调的事件带上view的ID |\n    | android:accessibilityFeedbackType | 事件的反馈类型，例如声音反馈、触觉反馈、视觉反馈等。 |\n    | android:notificationTimeout | 两个同样类型的辅助事件发给辅助服务的最小时间间隔 |\n    | android:canRetrieveWindowContent | 是否可以获取窗口内容 |\n    | android:description | 打开 Accessibility 之后的描述信息 |\n    | android:settingsActivity | 打开 Accessibility 之后，点击 Settings 跳转的 Activity |\n\n## 实现 AccessibilityService\n\n1. 需要重写 AccessibilityService 的方法\n\n    1. onServiceConnected() 可选。系统启动这个 Service 的时候，可以在这里调用setServiceInfo()进行配置AccessibilityServiceInfo\n    2. onAccessibilityEvent() 必选。接收系统发来的 AccessibilityEvent\n    3. onInterrupt() 必选。系统想要中断 AccessibilityService 返给的响应时会调用。在整个生命周期里会被调用多次。\n    4. onUnbind() 可选。系统关闭这个 Service 的时候，做一些释放工作\n\n2. 过滤 Accessibility 事件\n\n    1. 过滤需要的事件，可以通过两种方式\n        - 包名: 通过 android:packageNames 中定义\n        - 事件类型: 通过 android:accessibilityEventTypes 设置\n\n    2. 注意： 系统会把 accessibility 事件发送给多个 Service，如果他们的 feedback Types 不一样，如果是一样的，会发送给先注册的那个\n\n3. 设置音量\n\n    ```kotlin\n    private val mAudioManager = getSystemService(AUDIO_SERVICE) as AudioManager\n    override fun onAccessibilityEvent(accessibilityEvent: AccessibilityEvent) {\n        if (accessibilityEvent.source.text == \"Increase volume\") {\n            mAudioManager.adjustStreamVolume(AudioManager.STREAM_ACCESSIBILITY, ADJUST_RAISE, 0)\n        }\n    }\n    ```\n\n4. 使用 Accessibility 按钮(在 Navigation Bar 右侧, Android 8.0)\n\n    可以在 Service 启动的时候，检查并监听这个按钮。可以查看 Select to Speck 这个 Accessibility Service\n\n    ```kotlin\n    override fun onServiceConnected() {\n        if (accessibilityButtonController?.isAccessibilityButtonAvailable) { // 需要判断能否注册这个 button\n            registerAccessibilityButton();\n        } else {\n            // Can't register\n        }\n    }\n\n    private fun registerAccessibilityButton() {\n        accessibilityButtonController?.registerAccessibilityButtonCallback(\n            object: AccessibilityButtonCallback() {\n                override fun onClicked(controller: accessibilityButtonController) {\n                    // 被点击了\n                }\n                override fun onAvailablityChanged(controller: accessibilityButtonController, available: Boolean) {\n                    if (controller == accessibilityButtonController) {\n                    }\n                }\n            }, null)\n    }\n    ```\n\n5. 获取指纹识别手势\n\n    如果要使用这个功能，应该提供给用户开关控制这个功能。如果多个 Accessibility Service 都使用指纹手势功能，可能导致冲突。\n\n    ```xml\n    <accessibility-service xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    ...\n    android:accessibilityFlags=\" ... |flagRequestFingerprintGestures\"\n    android:canRequestFingerprintGestures=\"true\"\n    ... />\n    ```\n\n    ```kotlin\n    override fun onCreate() {\n        mGestureController = fingerprintGestureController\n        mIsGestureDetectionAvailable = mGestureController?.isGestureDetectionAvailable ?: false\n    }\n    override fun onServiceConnected() {\n        if (mFingerprintGestureCallback != null || !mIsGestureDetectionAvailable) return\n        mFingerprintGestureCallback =\n                object : FingerprintGestureController.FingerprintGestureCallback() {\n                    override fun onGestureDetected(gesture: Int) {\n                        when (gesture) {\n                            FINGERPRINT_GESTURE_SWIPE_DOWN -> moveGameCursorDown()\n                            FINGERPRINT_GESTURE_SWIPE_LEFT -> moveGameCursorLeft()\n                            FINGERPRINT_GESTURE_SWIPE_RIGHT -> moveGameCursorRight()\n                            FINGERPRINT_GESTURE_SWIPE_UP -> moveGameCursorUp()\n                            else -> Log.e(MY_APP_TAG, \"Error: Unknown gesture type detected!\")\n                        }\n                    }\n                    override fun onGestureDetectionAvailabilityChanged(available: Boolean) {\n                        mIsGestureDetectionAvailable = available\n                    }\n                }\n        mFingerprintGestureCallback?.also {\n            mGestureController?.registerFingerprintGestureCallback(it, null)\n        }\n    }\n    ```\n\n6. 多国语言的支持\n\n7. 监听手势(Android 4.1)\n\n    设置 `serviceInfo.flags = AccessibilityServiceInfo.FLAG_REQUEST_TOUCH_EXPLORTATION_MODE`\n\n8. 执行手势操作\n\n    右滑然后下滑\n    ```kotlin\n    private fun doRightThenDownDrag() {\n        val dragRightPath = Path().apply { moveTo(200, 200) lineTo(400, 200) }\n        val rightDuration = 500L\n        val dragDownPath = Path().apply { moveTo(400, 200) lineTo(400, 400) }\n        val downtDuration = 500L\n        val rightThenDownDrag = GestureDexcription.StrokeDescription(dragRightPath, 0L, rightDuration, true).apply {\n            continueStroke(dragDownPath, rightDuration, downtDuration, false)\n        }\n    }\n    ```\n\n9. 使用 Accessibility 动作(Android 4.1)\n\n    使用  performAction() 执行特殊动作。\n    ```kt\n    override fun onAccessibilityEvent(event: AccessibilityEvent) {\n        event.source?.apply {\n            // 使用 event 和 层级信息 source 决定执行啥动作\n            performAction(AccessibilityNodeInfo.ACTION_SCROLL_FORWARD)\n            // 也可以使用 performGlobalAction() 执行全局操作，如跳转到首页\n            recycle()\n        }\n    }\n    ```\n\n### 其他方法\n\n1. 使用焦点\n\n    Accessibility 焦点跟输入焦点是不一样的。Accessibility 焦点是为了让 Accessibility 能能够使用非选中的点。使用 `AccessibilityNodeInfo.findFocus()` 或者 `focusSearch()` 查找元素，然后使用 `perfomAction(ACTION_SET_ACCESSIBILITY_FOCUS)` 获取焦点\n\n2. 获取布局文件\n\n    使用 `AccessibilityEvent.getSource()` 获取布局层级，需要设置 `canRetrieveWindowContent = true`\n\n3. 获取焦点文件\n\n    使用 `AccessibilityNodeInfo.getChild()` 和 `getParent()` 获取焦点元素\n\n4. 获取 Hint Text\n\n    `getHintText()` 即使 hint 没有显示也能获取到\n\n5. 获取元素的位置\n\n    使用 refreshWithExtraData(EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY, resultBundle)\n","slug":"建立自己的_Accessibility_Service","published":1,"updated":"2019-03-07T15:01:19.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5j64dml0011ha9knqdaqdhg","content":"<blockquote>\n<p>在分析 Accessibility Service 源码之前，我们先看一下 Accessibility Service 是如何创建的，为后续继续分析源码做准备。<a href=\"https://developer.android.com/guide/topics/ui/accessibility/services\" target=\"_blank\" rel=\"noopener\">参考文档</a></p>\n</blockquote>\n<p>Android 系统给我们提供了标准的 accessibility 服务，如 Talkback 和 Select to Speak。一些 APP 也为我们提供了 Accessibility 功能，如 绿色保护、MacroDroid、Tasker、Vysor 等，当然我们也可以自定义我们自己的服务。</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><ol>\n<li><p>声明 Accessibility 服务</p>\n <a id=\"more\"></a>\n<p> 声明一个 Service 并添加到 Manifest 文件中，需要权限和 filter</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">service</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".MyAccessibilityService\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:permission</span>=<span class=\"string\">\"android.permission.BIND_ACCESSIBILITY_SERVICE\"</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.accessibilityservice.AccessibilityService\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置 configuration --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"android:accessibilityservice\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/accessibility\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">service</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加 accessibility 配置文件</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">accessibility-service</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:description</span>=<span class=\"string\">\"@string/accessibility_service_description\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:packageNames</span>=<span class=\"string\">\"com.example.android.apis\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:accessibilityEventTypes</span>=<span class=\"string\">\"typeAllMask\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:accessibilityFlags</span>=<span class=\"string\">\"flagDefault\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:accessibilityFeedbackType</span>=<span class=\"string\">\"feedbackSpoken\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:notificationTimeout</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:canRetrieveWindowContent</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:settingsActivity</span>=<span class=\"string\">\"com.example.android.accessibility.ServiceSettingsActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数说明</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>字段说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>android:packageNames</td>\n<td>关注哪些应用发出的事件，多个应用包名之间用逗号分隔，如果不填，则关注手机上所有应用发出的事件</td>\n</tr>\n<tr>\n<td>android:accessibilityEventType</td>\n<td>关注的事件类型，TYPE_VIEW_FOCUSED，TYPE_WINDOW_STATE_CHANGED，TYPE_NOTIFICATION_STATE_CHANGED 等</td>\n</tr>\n<tr>\n<td>android:accessibilityFlags</td>\n<td>辅助服务额外的flag信息。例如FLAG_REPORT_VIEW_IDS可以使回调的事件带上view的ID</td>\n</tr>\n<tr>\n<td>android:accessibilityFeedbackType</td>\n<td>事件的反馈类型，例如声音反馈、触觉反馈、视觉反馈等。</td>\n</tr>\n<tr>\n<td>android:notificationTimeout</td>\n<td>两个同样类型的辅助事件发给辅助服务的最小时间间隔</td>\n</tr>\n<tr>\n<td>android:canRetrieveWindowContent</td>\n<td>是否可以获取窗口内容</td>\n</tr>\n<tr>\n<td>android:description</td>\n<td>打开 Accessibility 之后的描述信息</td>\n</tr>\n<tr>\n<td>android:settingsActivity</td>\n<td>打开 Accessibility 之后，点击 Settings 跳转的 Activity</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"实现-AccessibilityService\"><a href=\"#实现-AccessibilityService\" class=\"headerlink\" title=\"实现 AccessibilityService\"></a>实现 AccessibilityService</h2><ol>\n<li><p>需要重写 AccessibilityService 的方法</p>\n<ol>\n<li>onServiceConnected() 可选。系统启动这个 Service 的时候，可以在这里调用setServiceInfo()进行配置AccessibilityServiceInfo</li>\n<li>onAccessibilityEvent() 必选。接收系统发来的 AccessibilityEvent</li>\n<li>onInterrupt() 必选。系统想要中断 AccessibilityService 返给的响应时会调用。在整个生命周期里会被调用多次。</li>\n<li>onUnbind() 可选。系统关闭这个 Service 的时候，做一些释放工作</li>\n</ol>\n</li>\n<li><p>过滤 Accessibility 事件</p>\n<ol>\n<li><p>过滤需要的事件，可以通过两种方式</p>\n<ul>\n<li>包名: 通过 android:packageNames 中定义</li>\n<li>事件类型: 通过 android:accessibilityEventTypes 设置</li>\n</ul>\n</li>\n<li><p>注意： 系统会把 accessibility 事件发送给多个 Service，如果他们的 feedback Types 不一样，如果是一样的，会发送给先注册的那个</p>\n</li>\n</ol>\n</li>\n<li><p>设置音量</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mAudioManager = getSystemService(AUDIO_SERVICE) <span class=\"keyword\">as</span> AudioManager</span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onAccessibilityEvent</span><span class=\"params\">(accessibilityEvent: <span class=\"type\">AccessibilityEvent</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (accessibilityEvent.source.text == <span class=\"string\">\"Increase volume\"</span>) &#123;</span><br><span class=\"line\">        mAudioManager.adjustStreamVolume(AudioManager.STREAM_ACCESSIBILITY, ADJUST_RAISE, <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 Accessibility 按钮(在 Navigation Bar 右侧, Android 8.0)</p>\n<p> 可以在 Service 启动的时候，检查并监听这个按钮。可以查看 Select to Speck 这个 Accessibility Service</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (accessibilityButtonController?.isAccessibilityButtonAvailable) &#123; <span class=\"comment\">// 需要判断能否注册这个 button</span></span><br><span class=\"line\">        registerAccessibilityButton();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Can't register</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">registerAccessibilityButton</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    accessibilityButtonController?.registerAccessibilityButtonCallback(</span><br><span class=\"line\">        <span class=\"keyword\">object</span>: AccessibilityButtonCallback() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onClicked</span><span class=\"params\">(controller: <span class=\"type\">accessibilityButtonController</span>)</span></span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 被点击了</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onAvailablityChanged</span><span class=\"params\">(controller: <span class=\"type\">accessibilityButtonController</span>, available: <span class=\"type\">Boolean</span>)</span></span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (controller == accessibilityButtonController) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取指纹识别手势</p>\n<p> 如果要使用这个功能，应该提供给用户开关控制这个功能。如果多个 Accessibility Service 都使用指纹手势功能，可能导致冲突。</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">accessibility-service</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">android:accessibilityFlags</span>=<span class=\"string\">\" ... |flagRequestFingerprintGestures\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">android:canRequestFingerprintGestures</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">...</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mGestureController = fingerprintGestureController</span><br><span class=\"line\">    mIsGestureDetectionAvailable = mGestureController?.isGestureDetectionAvailable ?: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mFingerprintGestureCallback != <span class=\"literal\">null</span> || !mIsGestureDetectionAvailable) <span class=\"keyword\">return</span></span><br><span class=\"line\">    mFingerprintGestureCallback =</span><br><span class=\"line\">            <span class=\"keyword\">object</span> : FingerprintGestureController.FingerprintGestureCallback() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onGestureDetected</span><span class=\"params\">(gesture: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">when</span> (gesture) &#123;</span><br><span class=\"line\">                        FINGERPRINT_GESTURE_SWIPE_DOWN -&gt; moveGameCursorDown()</span><br><span class=\"line\">                        FINGERPRINT_GESTURE_SWIPE_LEFT -&gt; moveGameCursorLeft()</span><br><span class=\"line\">                        FINGERPRINT_GESTURE_SWIPE_RIGHT -&gt; moveGameCursorRight()</span><br><span class=\"line\">                        FINGERPRINT_GESTURE_SWIPE_UP -&gt; moveGameCursorUp()</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> -&gt; Log.e(MY_APP_TAG, <span class=\"string\">\"Error: Unknown gesture type detected!\"</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onGestureDetectionAvailabilityChanged</span><span class=\"params\">(available: <span class=\"type\">Boolean</span>)</span></span> &#123;</span><br><span class=\"line\">                    mIsGestureDetectionAvailable = available</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    mFingerprintGestureCallback?.also &#123;</span><br><span class=\"line\">        mGestureController?.registerFingerprintGestureCallback(it, <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多国语言的支持</p>\n</li>\n<li><p>监听手势(Android 4.1)</p>\n<p> 设置 <code>serviceInfo.flags = AccessibilityServiceInfo.FLAG_REQUEST_TOUCH_EXPLORTATION_MODE</code></p>\n</li>\n<li><p>执行手势操作</p>\n<p> 右滑然后下滑</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doRightThenDownDrag</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> dragRightPath = Path().apply &#123; moveTo(<span class=\"number\">200</span>, <span class=\"number\">200</span>) lineTo(<span class=\"number\">400</span>, <span class=\"number\">200</span>) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> rightDuration = <span class=\"number\">500</span>L</span><br><span class=\"line\">    <span class=\"keyword\">val</span> dragDownPath = Path().apply &#123; moveTo(<span class=\"number\">400</span>, <span class=\"number\">200</span>) lineTo(<span class=\"number\">400</span>, <span class=\"number\">400</span>) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> downtDuration = <span class=\"number\">500</span>L</span><br><span class=\"line\">    <span class=\"keyword\">val</span> rightThenDownDrag = GestureDexcription.StrokeDescription(dragRightPath, <span class=\"number\">0</span>L, rightDuration, <span class=\"literal\">true</span>).apply &#123;</span><br><span class=\"line\">        continueStroke(dragDownPath, rightDuration, downtDuration, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 Accessibility 动作(Android 4.1)</p>\n<p> 使用  performAction() 执行特殊动作。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override fun onAccessibilityEvent(event: AccessibilityEvent) &#123;</span><br><span class=\"line\">    event.source?.apply &#123;</span><br><span class=\"line\">        // 使用 event 和 层级信息 source 决定执行啥动作</span><br><span class=\"line\">        performAction(AccessibilityNodeInfo.ACTION_SCROLL_FORWARD)</span><br><span class=\"line\">        // 也可以使用 performGlobalAction() 执行全局操作，如跳转到首页</span><br><span class=\"line\">        recycle()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h3><ol>\n<li><p>使用焦点</p>\n<p> Accessibility 焦点跟输入焦点是不一样的。Accessibility 焦点是为了让 Accessibility 能能够使用非选中的点。使用 <code>AccessibilityNodeInfo.findFocus()</code> 或者 <code>focusSearch()</code> 查找元素，然后使用 <code>perfomAction(ACTION_SET_ACCESSIBILITY_FOCUS)</code> 获取焦点</p>\n</li>\n<li><p>获取布局文件</p>\n<p> 使用 <code>AccessibilityEvent.getSource()</code> 获取布局层级，需要设置 <code>canRetrieveWindowContent = true</code></p>\n</li>\n<li><p>获取焦点文件</p>\n<p> 使用 <code>AccessibilityNodeInfo.getChild()</code> 和 <code>getParent()</code> 获取焦点元素</p>\n</li>\n<li><p>获取 Hint Text</p>\n<p> <code>getHintText()</code> 即使 hint 没有显示也能获取到</p>\n</li>\n<li><p>获取元素的位置</p>\n<p> 使用 refreshWithExtraData(EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY, resultBundle)</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在分析 Accessibility Service 源码之前，我们先看一下 Accessibility Service 是如何创建的，为后续继续分析源码做准备。<a href=\"https://developer.android.com/guide/topics/ui/accessibility/services\" target=\"_blank\" rel=\"noopener\">参考文档</a></p>\n</blockquote>\n<p>Android 系统给我们提供了标准的 accessibility 服务，如 Talkback 和 Select to Speak。一些 APP 也为我们提供了 Accessibility 功能，如 绿色保护、MacroDroid、Tasker、Vysor 等，当然我们也可以自定义我们自己的服务。</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><ol>\n<li><p>声明 Accessibility 服务</p>","more":"<p> 声明一个 Service 并添加到 Manifest 文件中，需要权限和 filter</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">service</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".MyAccessibilityService\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:permission</span>=<span class=\"string\">\"android.permission.BIND_ACCESSIBILITY_SERVICE\"</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.accessibilityservice.AccessibilityService\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置 configuration --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"android:accessibilityservice\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/accessibility\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">service</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加 accessibility 配置文件</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">accessibility-service</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:description</span>=<span class=\"string\">\"@string/accessibility_service_description\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:packageNames</span>=<span class=\"string\">\"com.example.android.apis\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:accessibilityEventTypes</span>=<span class=\"string\">\"typeAllMask\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:accessibilityFlags</span>=<span class=\"string\">\"flagDefault\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:accessibilityFeedbackType</span>=<span class=\"string\">\"feedbackSpoken\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:notificationTimeout</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:canRetrieveWindowContent</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:settingsActivity</span>=<span class=\"string\">\"com.example.android.accessibility.ServiceSettingsActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数说明</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>字段说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>android:packageNames</td>\n<td>关注哪些应用发出的事件，多个应用包名之间用逗号分隔，如果不填，则关注手机上所有应用发出的事件</td>\n</tr>\n<tr>\n<td>android:accessibilityEventType</td>\n<td>关注的事件类型，TYPE_VIEW_FOCUSED，TYPE_WINDOW_STATE_CHANGED，TYPE_NOTIFICATION_STATE_CHANGED 等</td>\n</tr>\n<tr>\n<td>android:accessibilityFlags</td>\n<td>辅助服务额外的flag信息。例如FLAG_REPORT_VIEW_IDS可以使回调的事件带上view的ID</td>\n</tr>\n<tr>\n<td>android:accessibilityFeedbackType</td>\n<td>事件的反馈类型，例如声音反馈、触觉反馈、视觉反馈等。</td>\n</tr>\n<tr>\n<td>android:notificationTimeout</td>\n<td>两个同样类型的辅助事件发给辅助服务的最小时间间隔</td>\n</tr>\n<tr>\n<td>android:canRetrieveWindowContent</td>\n<td>是否可以获取窗口内容</td>\n</tr>\n<tr>\n<td>android:description</td>\n<td>打开 Accessibility 之后的描述信息</td>\n</tr>\n<tr>\n<td>android:settingsActivity</td>\n<td>打开 Accessibility 之后，点击 Settings 跳转的 Activity</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"实现-AccessibilityService\"><a href=\"#实现-AccessibilityService\" class=\"headerlink\" title=\"实现 AccessibilityService\"></a>实现 AccessibilityService</h2><ol>\n<li><p>需要重写 AccessibilityService 的方法</p>\n<ol>\n<li>onServiceConnected() 可选。系统启动这个 Service 的时候，可以在这里调用setServiceInfo()进行配置AccessibilityServiceInfo</li>\n<li>onAccessibilityEvent() 必选。接收系统发来的 AccessibilityEvent</li>\n<li>onInterrupt() 必选。系统想要中断 AccessibilityService 返给的响应时会调用。在整个生命周期里会被调用多次。</li>\n<li>onUnbind() 可选。系统关闭这个 Service 的时候，做一些释放工作</li>\n</ol>\n</li>\n<li><p>过滤 Accessibility 事件</p>\n<ol>\n<li><p>过滤需要的事件，可以通过两种方式</p>\n<ul>\n<li>包名: 通过 android:packageNames 中定义</li>\n<li>事件类型: 通过 android:accessibilityEventTypes 设置</li>\n</ul>\n</li>\n<li><p>注意： 系统会把 accessibility 事件发送给多个 Service，如果他们的 feedback Types 不一样，如果是一样的，会发送给先注册的那个</p>\n</li>\n</ol>\n</li>\n<li><p>设置音量</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mAudioManager = getSystemService(AUDIO_SERVICE) <span class=\"keyword\">as</span> AudioManager</span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onAccessibilityEvent</span><span class=\"params\">(accessibilityEvent: <span class=\"type\">AccessibilityEvent</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (accessibilityEvent.source.text == <span class=\"string\">\"Increase volume\"</span>) &#123;</span><br><span class=\"line\">        mAudioManager.adjustStreamVolume(AudioManager.STREAM_ACCESSIBILITY, ADJUST_RAISE, <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 Accessibility 按钮(在 Navigation Bar 右侧, Android 8.0)</p>\n<p> 可以在 Service 启动的时候，检查并监听这个按钮。可以查看 Select to Speck 这个 Accessibility Service</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (accessibilityButtonController?.isAccessibilityButtonAvailable) &#123; <span class=\"comment\">// 需要判断能否注册这个 button</span></span><br><span class=\"line\">        registerAccessibilityButton();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Can't register</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">registerAccessibilityButton</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    accessibilityButtonController?.registerAccessibilityButtonCallback(</span><br><span class=\"line\">        <span class=\"keyword\">object</span>: AccessibilityButtonCallback() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onClicked</span><span class=\"params\">(controller: <span class=\"type\">accessibilityButtonController</span>)</span></span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 被点击了</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onAvailablityChanged</span><span class=\"params\">(controller: <span class=\"type\">accessibilityButtonController</span>, available: <span class=\"type\">Boolean</span>)</span></span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (controller == accessibilityButtonController) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取指纹识别手势</p>\n<p> 如果要使用这个功能，应该提供给用户开关控制这个功能。如果多个 Accessibility Service 都使用指纹手势功能，可能导致冲突。</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">accessibility-service</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">android:accessibilityFlags</span>=<span class=\"string\">\" ... |flagRequestFingerprintGestures\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">android:canRequestFingerprintGestures</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">...</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mGestureController = fingerprintGestureController</span><br><span class=\"line\">    mIsGestureDetectionAvailable = mGestureController?.isGestureDetectionAvailable ?: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mFingerprintGestureCallback != <span class=\"literal\">null</span> || !mIsGestureDetectionAvailable) <span class=\"keyword\">return</span></span><br><span class=\"line\">    mFingerprintGestureCallback =</span><br><span class=\"line\">            <span class=\"keyword\">object</span> : FingerprintGestureController.FingerprintGestureCallback() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onGestureDetected</span><span class=\"params\">(gesture: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">when</span> (gesture) &#123;</span><br><span class=\"line\">                        FINGERPRINT_GESTURE_SWIPE_DOWN -&gt; moveGameCursorDown()</span><br><span class=\"line\">                        FINGERPRINT_GESTURE_SWIPE_LEFT -&gt; moveGameCursorLeft()</span><br><span class=\"line\">                        FINGERPRINT_GESTURE_SWIPE_RIGHT -&gt; moveGameCursorRight()</span><br><span class=\"line\">                        FINGERPRINT_GESTURE_SWIPE_UP -&gt; moveGameCursorUp()</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> -&gt; Log.e(MY_APP_TAG, <span class=\"string\">\"Error: Unknown gesture type detected!\"</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onGestureDetectionAvailabilityChanged</span><span class=\"params\">(available: <span class=\"type\">Boolean</span>)</span></span> &#123;</span><br><span class=\"line\">                    mIsGestureDetectionAvailable = available</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    mFingerprintGestureCallback?.also &#123;</span><br><span class=\"line\">        mGestureController?.registerFingerprintGestureCallback(it, <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多国语言的支持</p>\n</li>\n<li><p>监听手势(Android 4.1)</p>\n<p> 设置 <code>serviceInfo.flags = AccessibilityServiceInfo.FLAG_REQUEST_TOUCH_EXPLORTATION_MODE</code></p>\n</li>\n<li><p>执行手势操作</p>\n<p> 右滑然后下滑</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doRightThenDownDrag</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> dragRightPath = Path().apply &#123; moveTo(<span class=\"number\">200</span>, <span class=\"number\">200</span>) lineTo(<span class=\"number\">400</span>, <span class=\"number\">200</span>) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> rightDuration = <span class=\"number\">500</span>L</span><br><span class=\"line\">    <span class=\"keyword\">val</span> dragDownPath = Path().apply &#123; moveTo(<span class=\"number\">400</span>, <span class=\"number\">200</span>) lineTo(<span class=\"number\">400</span>, <span class=\"number\">400</span>) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> downtDuration = <span class=\"number\">500</span>L</span><br><span class=\"line\">    <span class=\"keyword\">val</span> rightThenDownDrag = GestureDexcription.StrokeDescription(dragRightPath, <span class=\"number\">0</span>L, rightDuration, <span class=\"literal\">true</span>).apply &#123;</span><br><span class=\"line\">        continueStroke(dragDownPath, rightDuration, downtDuration, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 Accessibility 动作(Android 4.1)</p>\n<p> 使用  performAction() 执行特殊动作。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override fun onAccessibilityEvent(event: AccessibilityEvent) &#123;</span><br><span class=\"line\">    event.source?.apply &#123;</span><br><span class=\"line\">        // 使用 event 和 层级信息 source 决定执行啥动作</span><br><span class=\"line\">        performAction(AccessibilityNodeInfo.ACTION_SCROLL_FORWARD)</span><br><span class=\"line\">        // 也可以使用 performGlobalAction() 执行全局操作，如跳转到首页</span><br><span class=\"line\">        recycle()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h3><ol>\n<li><p>使用焦点</p>\n<p> Accessibility 焦点跟输入焦点是不一样的。Accessibility 焦点是为了让 Accessibility 能能够使用非选中的点。使用 <code>AccessibilityNodeInfo.findFocus()</code> 或者 <code>focusSearch()</code> 查找元素，然后使用 <code>perfomAction(ACTION_SET_ACCESSIBILITY_FOCUS)</code> 获取焦点</p>\n</li>\n<li><p>获取布局文件</p>\n<p> 使用 <code>AccessibilityEvent.getSource()</code> 获取布局层级，需要设置 <code>canRetrieveWindowContent = true</code></p>\n</li>\n<li><p>获取焦点文件</p>\n<p> 使用 <code>AccessibilityNodeInfo.getChild()</code> 和 <code>getParent()</code> 获取焦点元素</p>\n</li>\n<li><p>获取 Hint Text</p>\n<p> <code>getHintText()</code> 即使 hint 没有显示也能获取到</p>\n</li>\n<li><p>获取元素的位置</p>\n<p> 使用 refreshWithExtraData(EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY, resultBundle)</p>\n</li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck5j64d8n0001ha9khjhwwhpu","category_id":"ck5j64dkp000zha9k04j64jz5","_id":"ck5j64duf003rha9knls7djbc"},{"post_id":"ck5j64daj0003ha9ku8xebzl9","category_id":"ck5j64dmo0012ha9k6cp5dxgp","_id":"ck5j64dug003tha9kuifsfv2x"},{"post_id":"ck5j64daz0005ha9kp5ai605i","category_id":"ck5j64dkp000zha9k04j64jz5","_id":"ck5j64duh003vha9kxcp7m423"},{"post_id":"ck5j64db30006ha9koqksp55a","category_id":"ck5j64dn60016ha9knre0u9t8","_id":"ck5j64dui003xha9kltpmffmj"},{"post_id":"ck5j64dbf0007ha9kwkc479ml","category_id":"ck5j64dne0018ha9kt066m7b3","_id":"ck5j64dui003zha9kj1emzkwb"},{"post_id":"ck5j64dc10008ha9kefcysca7","category_id":"ck5j64dne0018ha9kt066m7b3","_id":"ck5j64duj0041ha9klgvpcxuw"},{"post_id":"ck5j64dcv0009ha9kn8sa5fcp","category_id":"ck5j64dne0018ha9kt066m7b3","_id":"ck5j64duj0043ha9kgt3g5tor"},{"post_id":"ck5j64ddb000aha9knvqga27r","category_id":"ck5j64dne0018ha9kt066m7b3","_id":"ck5j64duj0045ha9kzn276k57"},{"post_id":"ck5j64ddf000bha9ksiq4kh9d","category_id":"ck5j64dne0018ha9kt066m7b3","_id":"ck5j64duj0047ha9k9d015qed"},{"post_id":"ck5j64ddh000cha9kztn5j651","category_id":"ck5j64do0001iha9kn5nakcvn","_id":"ck5j64duj0049ha9kgsvfyjlb"},{"post_id":"ck5j64ddm000dha9kh5u29m7v","category_id":"ck5j64do1001kha9kxe38b0r6","_id":"ck5j64duj004bha9k5nf640w0"},{"post_id":"ck5j64ddp000eha9kh9625l2d","category_id":"ck5j64doc001mha9k8w4chusd","_id":"ck5j64duk004dha9kz0zrh5zk"},{"post_id":"ck5j64dds000fha9keoupeny4","category_id":"ck5j64dkp000zha9k04j64jz5","_id":"ck5j64duk004fha9kqayg1994"},{"post_id":"ck5j64ddu000gha9kik3b8akp","category_id":"ck5j64dow001qha9kwohfoeec","_id":"ck5j64duk004hha9kqom78ies"},{"post_id":"ck5j64de6000hha9kjzxu2kx7","category_id":"ck5j64do1001kha9kxe38b0r6","_id":"ck5j64duk004jha9k0jlpvprl"},{"post_id":"ck5j64de9000iha9kgz02xung","category_id":"ck5j64dmo0012ha9k6cp5dxgp","_id":"ck5j64duk004lha9kf64c1mj3"},{"post_id":"ck5j64deb000jha9kgycx79lp","category_id":"ck5j64dmo0012ha9k6cp5dxgp","_id":"ck5j64duk004nha9kjna0xual"},{"post_id":"ck5j64deb000kha9k7jrcwtpd","category_id":"ck5j64dpc001yha9kwcqm9ble","_id":"ck5j64duq004pha9kjxse8lpy"},{"post_id":"ck5j64dep000lha9kbmqjhphf","category_id":"ck5j64do1001kha9kxe38b0r6","_id":"ck5j64duq004rha9kxgf896a2"},{"post_id":"ck5j64deq000mha9kpx89w0w1","category_id":"ck5j64dmo0012ha9k6cp5dxgp","_id":"ck5j64dur004tha9ki4ha2pt6"},{"post_id":"ck5j64df2000nha9k4j9oobr9","category_id":"ck5j64dmo0012ha9k6cp5dxgp","_id":"ck5j64dus004vha9k029fs8ad"},{"post_id":"ck5j64df4000oha9k1sguw89z","category_id":"ck5j64do0001iha9kn5nakcvn","_id":"ck5j64duv004xha9kyvds6sdb"},{"post_id":"ck5j64df7000qha9k8oaffb0v","category_id":"ck5j64do1001kha9kxe38b0r6","_id":"ck5j64duv004zha9k9sxvpdqf"},{"post_id":"ck5j64df8000rha9kjufal6lx","category_id":"ck5j64dmo0012ha9k6cp5dxgp","_id":"ck5j64duw0051ha9kqe0kecgk"},{"post_id":"ck5j64df9000sha9kmrib2jot","category_id":"ck5j64dow001qha9kwohfoeec","_id":"ck5j64duw0053ha9kwm4i72vo"},{"post_id":"ck5j64df9000tha9kxll4k7xp","category_id":"ck5j64dkp000zha9k04j64jz5","_id":"ck5j64duw0055ha9kn5bimed2"},{"post_id":"ck5j64dfa000uha9kjmytttks","category_id":"ck5j64dqa002gha9ke2581418","_id":"ck5j64duw0057ha9k695b7g8f"},{"post_id":"ck5j64dfi000vha9k043qet1l","category_id":"ck5j64dqb002iha9kzii0df87","_id":"ck5j64dux0059ha9klt2s93wi"},{"post_id":"ck5j64dfk000wha9k56fdq1uf","category_id":"ck5j64dmo0012ha9k6cp5dxgp","_id":"ck5j64dux005bha9kczvy418z"},{"post_id":"ck5j64dfm000xha9kn0fjotc3","category_id":"ck5j64dqe002lha9kou8tuvjx","_id":"ck5j64dux005dha9kq7qs3dm9"},{"post_id":"ck5j64djw000yha9kmql5xz7u","category_id":"ck5j64dmo0012ha9k6cp5dxgp","_id":"ck5j64dux005fha9kugiocdj7"},{"post_id":"ck5j64dml0011ha9knqdaqdhg","category_id":"ck5j64dmo0012ha9k6cp5dxgp","_id":"ck5j64dux005hha9k8hkp9ofs"}],"PostTag":[{"post_id":"ck5j64d8n0001ha9khjhwwhpu","tag_id":"ck5j64dmi0010ha9kgitidga5","_id":"ck5j64duf003pha9kknd7b2a7"},{"post_id":"ck5j64d8n0001ha9khjhwwhpu","tag_id":"ck5j64dmx0013ha9ka3mxcr6y","_id":"ck5j64dug003sha9krkxuvfw8"},{"post_id":"ck5j64daj0003ha9ku8xebzl9","tag_id":"ck5j64dn00015ha9kuvgsv3fo","_id":"ck5j64duh003uha9k43n5w7j5"},{"post_id":"ck5j64daj0003ha9ku8xebzl9","tag_id":"ck5j64dnd0017ha9khntgre5n","_id":"ck5j64dui003wha9kj281c5wr"},{"post_id":"ck5j64daj0003ha9ku8xebzl9","tag_id":"ck5j64dnf0019ha9kvqlj53ie","_id":"ck5j64dui003yha9kyi655p9v"},{"post_id":"ck5j64daz0005ha9kp5ai605i","tag_id":"ck5j64dmx0013ha9ka3mxcr6y","_id":"ck5j64duj0040ha9kvbsdw5mr"},{"post_id":"ck5j64daz0005ha9kp5ai605i","tag_id":"ck5j64dnl001dha9kyfbdkfxz","_id":"ck5j64duj0042ha9kbts25bdt"},{"post_id":"ck5j64db30006ha9koqksp55a","tag_id":"ck5j64dnw001fha9kxshk4pq7","_id":"ck5j64duj0044ha9kw0mg3f35"},{"post_id":"ck5j64db30006ha9koqksp55a","tag_id":"ck5j64dnz001hha9k66lngku2","_id":"ck5j64duj0046ha9kppeckvhw"},{"post_id":"ck5j64db30006ha9koqksp55a","tag_id":"ck5j64do1001jha9kvzecepoh","_id":"ck5j64duj0048ha9kkpi4mvo0"},{"post_id":"ck5j64dbf0007ha9kwkc479ml","tag_id":"ck5j64do2001lha9kte7y5m5m","_id":"ck5j64duj004aha9ki6mjpk4e"},{"post_id":"ck5j64dbf0007ha9kwkc479ml","tag_id":"ck5j64doh001nha9kmm9hlgyn","_id":"ck5j64duk004cha9kue3ucrgg"},{"post_id":"ck5j64dc10008ha9kefcysca7","tag_id":"ck5j64do2001lha9kte7y5m5m","_id":"ck5j64duk004eha9k6xc0aqjh"},{"post_id":"ck5j64dc10008ha9kefcysca7","tag_id":"ck5j64doh001nha9kmm9hlgyn","_id":"ck5j64duk004gha9klypjzlu7"},{"post_id":"ck5j64dcv0009ha9kn8sa5fcp","tag_id":"ck5j64do2001lha9kte7y5m5m","_id":"ck5j64duk004iha9kkoq294jx"},{"post_id":"ck5j64dcv0009ha9kn8sa5fcp","tag_id":"ck5j64doh001nha9kmm9hlgyn","_id":"ck5j64duk004kha9k3suz1lzx"},{"post_id":"ck5j64ddb000aha9knvqga27r","tag_id":"ck5j64doh001nha9kmm9hlgyn","_id":"ck5j64duk004mha9kde6j9jbx"},{"post_id":"ck5j64ddb000aha9knvqga27r","tag_id":"ck5j64do2001lha9kte7y5m5m","_id":"ck5j64dup004oha9klctd4bwr"},{"post_id":"ck5j64ddf000bha9ksiq4kh9d","tag_id":"ck5j64do2001lha9kte7y5m5m","_id":"ck5j64duq004qha9ks59jlj0m"},{"post_id":"ck5j64ddf000bha9ksiq4kh9d","tag_id":"ck5j64doh001nha9kmm9hlgyn","_id":"ck5j64dur004sha9ktk40m9tp"},{"post_id":"ck5j64ddh000cha9kztn5j651","tag_id":"ck5j64dph0025ha9kp264rr1i","_id":"ck5j64dus004uha9kmkos2jti"},{"post_id":"ck5j64ddm000dha9kh5u29m7v","tag_id":"ck5j64dpo0027ha9ka4snk8fg","_id":"ck5j64duv004wha9ky8d2dens"},{"post_id":"ck5j64ddm000dha9kh5u29m7v","tag_id":"ck5j64dps0029ha9k4k7jgplx","_id":"ck5j64duv004yha9k8vh7gi54"},{"post_id":"ck5j64ddm000dha9kh5u29m7v","tag_id":"ck5j64dpv002bha9kc0zk2o77","_id":"ck5j64duv0050ha9kj3px2yun"},{"post_id":"ck5j64ddp000eha9kh9625l2d","tag_id":"ck5j64dq7002dha9kd3e88td1","_id":"ck5j64duw0052ha9k0p7ar92c"},{"post_id":"ck5j64ddp000eha9kh9625l2d","tag_id":"ck5j64dq9002fha9k13tj1d8b","_id":"ck5j64duw0054ha9k6zogr295"},{"post_id":"ck5j64ddp000eha9kh9625l2d","tag_id":"ck5j64dqb002hha9kz84z8i3z","_id":"ck5j64duw0056ha9kt0soeco3"},{"post_id":"ck5j64ddp000eha9kh9625l2d","tag_id":"ck5j64dqd002jha9kokdkwzud","_id":"ck5j64dux0058ha9klspwv8gk"},{"post_id":"ck5j64dds000fha9keoupeny4","tag_id":"ck5j64dqe002mha9ky19zpqrb","_id":"ck5j64dux005aha9kfsvwp2yq"},{"post_id":"ck5j64ddu000gha9kik3b8akp","tag_id":"ck5j64dqf002nha9k7m78xg1h","_id":"ck5j64dux005cha9ky8cvc7tu"},{"post_id":"ck5j64de6000hha9kjzxu2kx7","tag_id":"ck5j64dqf002oha9kabcrb7am","_id":"ck5j64dux005eha9kokk8p92m"},{"post_id":"ck5j64de6000hha9kjzxu2kx7","tag_id":"ck5j64dqf002pha9kg94s2a5q","_id":"ck5j64dux005gha9kvk48jny8"},{"post_id":"ck5j64de6000hha9kjzxu2kx7","tag_id":"ck5j64dqf002qha9kwbx07qvv","_id":"ck5j64dux005iha9ku7x2nitg"},{"post_id":"ck5j64de9000iha9kgz02xung","tag_id":"ck5j64dqp002rha9kcolalapt","_id":"ck5j64dux005jha9kpugknj0s"},{"post_id":"ck5j64de9000iha9kgz02xung","tag_id":"ck5j64dqq002sha9kqytyy9iq","_id":"ck5j64dux005kha9kpvm9mcq8"},{"post_id":"ck5j64deb000jha9kgycx79lp","tag_id":"ck5j64dqq002tha9k8202mmwo","_id":"ck5j64dux005lha9k78709qsj"},{"post_id":"ck5j64deb000jha9kgycx79lp","tag_id":"ck5j64dqr002uha9kxamprtql","_id":"ck5j64dux005mha9kgcsw1wrp"},{"post_id":"ck5j64deb000kha9k7jrcwtpd","tag_id":"ck5j64dqr002vha9ka9bu96pr","_id":"ck5j64duy005nha9k6tv6m53i"},{"post_id":"ck5j64deb000kha9k7jrcwtpd","tag_id":"ck5j64dqs002wha9kd19mb506","_id":"ck5j64duy005oha9knl6i6ne5"},{"post_id":"ck5j64dep000lha9kbmqjhphf","tag_id":"ck5j64dqv002xha9ky46du7kf","_id":"ck5j64duz005pha9k4cqp74r6"},{"post_id":"ck5j64dep000lha9kbmqjhphf","tag_id":"ck5j64dr3002yha9kjb9ju6yb","_id":"ck5j64duz005qha9knpbyal99"},{"post_id":"ck5j64deq000mha9kpx89w0w1","tag_id":"ck5j64dr6002zha9kal9xzlta","_id":"ck5j64duz005rha9kmyftoes8"},{"post_id":"ck5j64deq000mha9kpx89w0w1","tag_id":"ck5j64dqp002rha9kcolalapt","_id":"ck5j64duz005sha9kyik0wx17"},{"post_id":"ck5j64deq000mha9kpx89w0w1","tag_id":"ck5j64dr90031ha9kvnost8hd","_id":"ck5j64duz005tha9kueo3zpoz"},{"post_id":"ck5j64df2000nha9k4j9oobr9","tag_id":"ck5j64drd0032ha9ki8pgoghh","_id":"ck5j64duz005uha9ksd67s2b8"},{"post_id":"ck5j64df2000nha9k4j9oobr9","tag_id":"ck5j64drj0033ha9ks1t0rrhz","_id":"ck5j64duz005vha9kv99q22ev"},{"post_id":"ck5j64df2000nha9k4j9oobr9","tag_id":"ck5j64dmx0013ha9ka3mxcr6y","_id":"ck5j64duz005wha9k134wdyzg"},{"post_id":"ck5j64df4000oha9k1sguw89z","tag_id":"ck5j64drl0035ha9k7rps9ada","_id":"ck5j64duz005xha9knsb567nu"},{"post_id":"ck5j64df6000pha9ks8cfenuy","tag_id":"ck5j64drn0036ha9k1aul98jg","_id":"ck5j64duz005yha9ku36iibt7"},{"post_id":"ck5j64df6000pha9ks8cfenuy","tag_id":"ck5j64drp0037ha9kstozk5m9","_id":"ck5j64duz005zha9k4k8hiwr7"},{"post_id":"ck5j64df7000qha9k8oaffb0v","tag_id":"ck5j64drp0038ha9k3qqbz97t","_id":"ck5j64duz0060ha9khvwobicw"},{"post_id":"ck5j64df7000qha9k8oaffb0v","tag_id":"ck5j64drr0039ha9kqdfgyvq2","_id":"ck5j64dv00061ha9kr60y00ca"},{"post_id":"ck5j64df7000qha9k8oaffb0v","tag_id":"ck5j64drs003aha9khc50bcbp","_id":"ck5j64dv00062ha9kazf7y5bd"},{"post_id":"ck5j64df7000qha9k8oaffb0v","tag_id":"ck5j64drs003bha9k7fn084qw","_id":"ck5j64dv00063ha9kfltmosmc"},{"post_id":"ck5j64df8000rha9kjufal6lx","tag_id":"ck5j64drs003cha9krcdliorc","_id":"ck5j64dv00064ha9k8dhnws91"},{"post_id":"ck5j64df8000rha9kjufal6lx","tag_id":"ck5j64ds3003dha9k0fj2fy3p","_id":"ck5j64dv00065ha9kuzme68qg"},{"post_id":"ck5j64df9000sha9kmrib2jot","tag_id":"ck5j64dqf002nha9k7m78xg1h","_id":"ck5j64dv00066ha9kbzg70o6a"},{"post_id":"ck5j64df9000tha9kxll4k7xp","tag_id":"ck5j64do1001jha9kvzecepoh","_id":"ck5j64dv00067ha9kcwv9877y"},{"post_id":"ck5j64df9000tha9kxll4k7xp","tag_id":"ck5j64dmx0013ha9ka3mxcr6y","_id":"ck5j64dv00068ha9k25yno3h3"},{"post_id":"ck5j64dfa000uha9kjmytttks","tag_id":"ck5j64ds7003hha9k43nb8e2m","_id":"ck5j64dv00069ha9k4knkx7zi"},{"post_id":"ck5j64dfa000uha9kjmytttks","tag_id":"ck5j64ds8003iha9kf0byvdcd","_id":"ck5j64dv0006aha9kh327xw8l"},{"post_id":"ck5j64dfi000vha9k043qet1l","tag_id":"ck5j64ds7003hha9k43nb8e2m","_id":"ck5j64dv0006bha9kb2a7p38p"},{"post_id":"ck5j64dfk000wha9k56fdq1uf","tag_id":"ck5j64dsd003kha9kh541ghyw","_id":"ck5j64dv0006cha9kupjqifn2"},{"post_id":"ck5j64dfk000wha9k56fdq1uf","tag_id":"ck5j64drj0033ha9ks1t0rrhz","_id":"ck5j64dv0006dha9kkppb4ry4"},{"post_id":"ck5j64dfm000xha9kn0fjotc3","tag_id":"ck5j64dsk003mha9kwa44ghql","_id":"ck5j64dv0006eha9k8oxkmu9j"},{"post_id":"ck5j64dfm000xha9kn0fjotc3","tag_id":"ck5j64dsk003nha9klw2mhx6l","_id":"ck5j64dv0006fha9k94sb9dyo"},{"post_id":"ck5j64dml0011ha9knqdaqdhg","tag_id":"ck5j64dsd003kha9kh541ghyw","_id":"ck5j64dv0006gha9klamgabrb"},{"post_id":"ck5j64dml0011ha9knqdaqdhg","tag_id":"ck5j64drj0033ha9ks1t0rrhz","_id":"ck5j64dv0006hha9kxrdpyt10"},{"post_id":"ck5j64djw000yha9kmql5xz7u","tag_id":"ck5j64duf003qha9ke4chf9uh","_id":"ck5j64dz5006iha9kghstni27"}],"Tag":[{"name":"AsyncQueryHandler","_id":"ck5j64dmi0010ha9kgitidga5"},{"name":"源码","_id":"ck5j64dmx0013ha9ka3mxcr6y"},{"name":"自定义View","_id":"ck5j64dn00015ha9kuvgsv3fo"},{"name":"ObjectAnimator","_id":"ck5j64dnd0017ha9khntgre5n"},{"name":"Path","_id":"ck5j64dnf0019ha9kvqlj53ie"},{"name":"ActiveAndroid","_id":"ck5j64dnl001dha9kyfbdkfxz"},{"name":"CMake","_id":"ck5j64dnw001fha9kxshk4pq7"},{"name":"踩坑","_id":"ck5j64dnz001hha9k66lngku2"},{"name":"Sublime","_id":"ck5j64do1001jha9kvzecepoh"},{"name":"Algorithm","_id":"ck5j64do2001lha9kte7y5m5m"},{"name":"Codeforces","_id":"ck5j64doh001nha9kmm9hlgyn"},{"name":"CopyOnWrite","_id":"ck5j64dph0025ha9kp264rr1i"},{"name":"plantuml","_id":"ck5j64dpo0027ha9ka4snk8fg"},{"name":"GitBook","_id":"ck5j64dps0029ha9k4k7jgplx"},{"name":"plugin","_id":"ck5j64dpv002bha9kc0zk2o77"},{"name":"Inklet","_id":"ck5j64dq7002dha9kd3e88td1"},{"name":"SketchBook","_id":"ck5j64dq9002fha9k13tj1d8b"},{"name":"Alfred","_id":"ck5j64dqb002hha9kz84z8i3z"},{"name":"shell","_id":"ck5j64dqd002jha9kokdkwzud"},{"name":"IntentServcie","_id":"ck5j64dqe002mha9ky19zpqrb"},{"name":"Hexo","_id":"ck5j64dqf002nha9k7m78xg1h"},{"name":"mac","_id":"ck5j64dqf002oha9kabcrb7am"},{"name":"apple script","_id":"ck5j64dqf002pha9kg94s2a5q"},{"name":"xGestures","_id":"ck5j64dqf002qha9kwbx07qvv"},{"name":"Android","_id":"ck5j64dqp002rha9kcolalapt"},{"name":"Strict Mode","_id":"ck5j64dqq002sha9kqytyy9iq"},{"name":"Stetho","_id":"ck5j64dqq002tha9k8202mmwo"},{"name":"修改默认databases目录","_id":"ck5j64dqr002uha9kxamprtql"},{"name":"Wordpress","_id":"ck5j64dqr002vha9ka9bu96pr"},{"name":"php","_id":"ck5j64dqs002wha9kd19mb506"},{"name":"Kotlin","_id":"ck5j64dqv002xha9ky46du7kf"},{"name":"Sublime Text 3","_id":"ck5j64dr3002yha9kjb9ju6yb"},{"name":"uiautomatorview","_id":"ck5j64dr6002zha9kal9xzlta"},{"name":"sdkmanager","_id":"ck5j64dr90031ha9kvnost8hd"},{"name":"Talkback","_id":"ck5j64drd0032ha9ki8pgoghh"},{"name":"辅助","_id":"ck5j64drj0033ha9ks1t0rrhz"},{"name":"gradle","_id":"ck5j64drl0035ha9k7rps9ada"},{"name":"Docker","_id":"ck5j64drn0036ha9k1aul98jg"},{"name":"Jupyter","_id":"ck5j64drp0037ha9kstozk5m9"},{"name":"hexo","_id":"ck5j64drp0038ha9k3qqbz97t"},{"name":"Gogs","_id":"ck5j64drr0039ha9kqdfgyvq2"},{"name":"Linux","_id":"ck5j64drs003aha9khc50bcbp"},{"name":"Cron","_id":"ck5j64drs003bha9k7fn084qw"},{"name":"bug","_id":"ck5j64drs003cha9krcdliorc"},{"name":"依赖包","_id":"ck5j64ds3003dha9k0fj2fy3p"},{"name":"树莓派","_id":"ck5j64ds7003hha9k43nb8e2m"},{"name":"AndroidThings","_id":"ck5j64ds8003iha9kf0byvdcd"},{"name":"Accessibility","_id":"ck5j64dsd003kha9kh541ghyw"},{"name":"微信","_id":"ck5j64dsk003mha9kwa44ghql"},{"name":"跳一跳","_id":"ck5j64dsk003nha9klw2mhx6l"},{"name":"Android Jetpack","_id":"ck5j64duf003qha9ke4chf9uh"}]}}